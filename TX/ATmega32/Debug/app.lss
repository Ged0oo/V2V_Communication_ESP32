
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  00004a56  00004aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800244  00800244  00004cce  2**0
                  ALLOC
  3 .debug_aranges 00000698  00000000  00000000  00004cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c89  00000000  00000000  00005366  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005245  00000000  00000000  00005fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002229  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004163  00000000  00000000  0000d45d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009b0  00000000  00000000  000115c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014a0  00000000  00000000  00011f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  00013410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004c8  00000000  00000000  00013d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_1>
       8:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__vector_2>
       c:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_6>
      1c:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_7>
      20:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_8>
      24:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_15>
      40:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__vector_16>
      44:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <main>
      8a:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ea       	ldi	r26, 0xA3	; 163
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ea       	ldi	r24, 0xA3	; 163
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ea       	ldi	r22, 0xA3	; 163
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 55       	subi	r30, 0x55	; 85
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <EEPROM_Read_Byte>:

#include "EEPROM.h"

static void (*(EEPROM_interrupt)) (void);
void EEPROM_Read_Byte(uint8 address,uint8 *_value)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <EEPROM_Read_Byte+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	7b 83       	std	Y+3, r23	; 0x03
     e3e:	6a 83       	std	Y+2, r22	; 0x02

	while(EECR & (1<<EEWE));
     e40:	ec e3       	ldi	r30, 0x3C	; 60
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	82 70       	andi	r24, 0x02	; 2
     e4c:	90 70       	andi	r25, 0x00	; 0
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	b9 f7       	brne	.-18     	; 0xe40 <EEPROM_Read_Byte+0x12>


	EEAR = address;
     e52:	ee e3       	ldi	r30, 0x3E	; 62
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24

	EECR |= (1<<EERE);
     e60:	ac e3       	ldi	r26, 0x3C	; 60
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ec e3       	ldi	r30, 0x3C	; 60
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24


	*_value = EEDR;
     e6e:	ed e3       	ldi	r30, 0x3D	; 61
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 83       	st	Z, r24

}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <EEPROM_Write_Byte>:


void EEPROM_Write_Byte(uint8 address,uint8 _value)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <EEPROM_Write_Byte+0x6>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	6a 83       	std	Y+2, r22	; 0x02
	while(EECR & (1<<EEWE));
     e94:	ec e3       	ldi	r30, 0x3C	; 60
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	82 70       	andi	r24, 0x02	; 2
     ea0:	90 70       	andi	r25, 0x00	; 0
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	b9 f7       	brne	.-18     	; 0xe94 <EEPROM_Write_Byte+0xe>
	EEAR = address;
     ea6:	ee e3       	ldi	r30, 0x3E	; 62
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
	EECR |= (1<<EERE);
     eb4:	ac e3       	ldi	r26, 0x3C	; 60
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ec e3       	ldi	r30, 0x3C	; 60
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	8c 93       	st	X, r24
	if(EEDR != _value)
     ec2:	ed e3       	ldi	r30, 0x3D	; 61
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	90 81       	ld	r25, Z
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	98 17       	cp	r25, r24
     ecc:	91 f0       	breq	.+36     	; 0xef2 <EEPROM_Write_Byte+0x6c>
	{
		EEDR = _value;
     ece:	ed e3       	ldi	r30, 0x3D	; 61
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	80 83       	st	Z, r24
		EECR |= (1<<EEMWE);
     ed6:	ac e3       	ldi	r26, 0x3C	; 60
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ec e3       	ldi	r30, 0x3C	; 60
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	84 60       	ori	r24, 0x04	; 4
     ee2:	8c 93       	st	X, r24
		EECR |= (1<<EEWE);
     ee4:	ac e3       	ldi	r26, 0x3C	; 60
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ec e3       	ldi	r30, 0x3C	; 60
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	8c 93       	st	X, r24
	}


}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <EEPROM_Interupt_Enable>:

void EEPROM_Interupt_Enable(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EECR,EERIE);
     f04:	ac e3       	ldi	r26, 0x3C	; 60
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ec e3       	ldi	r30, 0x3C	; 60
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 60       	ori	r24, 0x08	; 8
     f10:	8c 93       	st	X, r24

}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <EEPROM_Interupt_Disable>:
void EEPROM_Interupt_Disable(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(EECR,EERIE);
     f20:	ac e3       	ldi	r26, 0x3C	; 60
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ec e3       	ldi	r30, 0x3C	; 60
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24

}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <EEPROM_Set_CallBack>:
void EEPROM_Set_CallBack(void(*Local_ptr)(void))
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <EEPROM_Set_CallBack+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_interrupt=Local_ptr;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	90 93 45 02 	sts	0x0245, r25
     f4a:	80 93 44 02 	sts	0x0244, r24
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <__vector_17>:

 ISR(EE_RDY_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	if(EEPROM_interrupt)
     f82:	80 91 44 02 	lds	r24, 0x0244
     f86:	90 91 45 02 	lds	r25, 0x0245
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__vector_17+0x40>
		EEPROM_interrupt();
     f8e:	e0 91 44 02 	lds	r30, 0x0244
     f92:	f0 91 45 02 	lds	r31, 0x0245
     f96:	09 95       	icall
};
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <UART_Init>:
const uint16 BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE]=
		 {{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
		  {{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};

void UART_Init(void)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <UART_Init+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRC_var=0;
     fca:	1b 82       	std	Y+3, r1	; 0x03
	uint16 UBRR_var=0;
     fcc:	1a 82       	std	Y+2, r1	; 0x02
     fce:	19 82       	std	Y+1, r1	; 0x01
/***************************** transmission speed***************************/
	#if (SPEED_MODE==NORMAL_SPEED)
	CLEAR_BIT(UCSRA,U2X);
     fd0:	ab e2       	ldi	r26, 0x2B	; 43
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8d 7f       	andi	r24, 0xFD	; 253
     fdc:	8c 93       	st	X, r24
	#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
	#endif

//******************set URSEL to write data to UCSRC register***************/
   SET_BIT(UCSRC_var,URSEL);
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	80 68       	ori	r24, 0x80	; 128
     fe2:	8b 83       	std	Y+3, r24	; 0x03

//********************************synch***********************************/
	 #if (SYNCH_MODE==SYNCH)
	 SET_BIT(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE==ASYNCH)
 	 CLEAR_BIT(UCSRC_var,UMSEL);
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8b 83       	std	Y+3, r24	; 0x03
	 #endif
 //*****************************parity mode*******************************/

	#if (PARITY_MODE==NO_PARITY)
	CLEAR_BIT(UCSRC_var,UPM0);
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRC_var,UPM1);
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	8f 7d       	andi	r24, 0xDF	; 223
     ff4:	8b 83       	std	Y+3, r24	; 0x03
    #elif (N_DATA_BITS==_7_DATA_BITS)
    CLEAR_BIT(UCSRC_var,UCSZ0);
    SET_BIT(UCSRC_var,UCSZ1);
    CLEAR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	84 60       	ori	r24, 0x04	; 4
    1000:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRB,UCSZ2);
    1002:	aa e2       	ldi	r26, 0x2A	; 42
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e2       	ldi	r30, 0x2A	; 42
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8b 7f       	andi	r24, 0xFB	; 251
    100e:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
	#endif
//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLEAR_BIT(UCSRC_var,USBS);
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	87 7f       	andi	r24, 0xF7	; 247
    1014:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
	#endif
//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
    1016:	e0 e4       	ldi	r30, 0x40	; 64
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	80 83       	st	Z, r24

//************************Baud rate *******************************/

    UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
    101e:	80 91 fb 01 	lds	r24, 0x01FB
    1022:	90 91 fc 01 	lds	r25, 0x01FC
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8)(UBRR_var>>8);
    102a:	e0 e4       	ldi	r30, 0x40	; 64
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	89 2f       	mov	r24, r25
    1034:	99 27       	eor	r25, r25
    1036:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR_var;
    1038:	e9 e2       	ldi	r30, 0x29	; 41
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	80 83       	st	Z, r24

//************************Enable  *******************************/
//enable UART  receiver.
SET_BIT(UCSRB,RXEN);
    1040:	aa e2       	ldi	r26, 0x2A	; 42
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ea e2       	ldi	r30, 0x2A	; 42
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	8c 93       	st	X, r24
//enable UART  transmitter .
SET_BIT(UCSRB,TXEN);
    104e:	aa e2       	ldi	r26, 0x2A	; 42
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ea e2       	ldi	r30, 0x2A	; 42
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 60       	ori	r24, 0x08	; 8
    105a:	8c 93       	st	X, r24
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <UART_RX_InterruptEnable>:

/*****************************************Interrupt functions*********************************************/


 void UART_RX_InterruptEnable(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    1070:	aa e2       	ldi	r26, 0x2A	; 42
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e2       	ldi	r30, 0x2A	; 42
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	8c 93       	st	X, r24
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <UART_RX_InterruptDisable>:

 void UART_RX_InterruptDisable(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    108c:	aa e2       	ldi	r26, 0x2A	; 42
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e2       	ldi	r30, 0x2A	; 42
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 77       	andi	r24, 0x7F	; 127
    1098:	8c 93       	st	X, r24
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <UART_TX_InterruptEnable>:

 void UART_TX_InterruptEnable(void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    10a8:	aa e2       	ldi	r26, 0x2A	; 42
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e2       	ldi	r30, 0x2A	; 42
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <UART_TX_InterruptDisable>:

 void UART_TX_InterruptDisable(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    10c4:	aa e2       	ldi	r26, 0x2A	; 42
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e2       	ldi	r30, 0x2A	; 42
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	8c 93       	st	X, r24
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <UART_RX_SetCallBack>:
/*****************************************Set Call Back Functions*********************************************/
 void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <UART_RX_SetCallBack+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	90 93 47 02 	sts	0x0247, r25
    10ee:	80 93 46 02 	sts	0x0246, r24
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <UART_TX_SetCallBack>:

 void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <UART_TX_SetCallBack+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	90 93 49 02 	sts	0x0249, r25
    1112:	80 93 48 02 	sts	0x0248, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <__vector_13>:
/***********************************************ISR ************************************************************/
 ISR(USART_RXC_vect)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr)
    114a:	80 91 46 02 	lds	r24, 0x0246
    114e:	90 91 47 02 	lds	r25, 0x0247
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	29 f0       	breq	.+10     	; 0x1160 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    1156:	e0 91 46 02 	lds	r30, 0x0246
    115a:	f0 91 47 02 	lds	r31, 0x0247
    115e:	09 95       	icall
	}
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_15>:

 ISR(USART_TXC_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr)
    11b0:	80 91 48 02 	lds	r24, 0x0248
    11b4:	90 91 49 02 	lds	r25, 0x0249
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <__vector_15+0x40>
	{
		UART_TX_Fptr();
    11bc:	e0 91 48 02 	lds	r30, 0x0248
    11c0:	f0 91 49 02 	lds	r31, 0x0249
    11c4:	09 95       	icall
	}
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <UART_SendByteNoBlock>:


/****************************************Send and receive functions with no ckecking********************************/

void UART_SendByteNoBlock(uint8 data)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    11f8:	ec e2       	ldi	r30, 0x2C	; 44
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	80 83       	st	Z, r24
}
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <UART_ReceiveByteNoBlock>:

uint8 UART_ReceiveByteNoBlock(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    1210:	ec e2       	ldi	r30, 0x2C	; 44
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <UART_SendByte>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendByte(uint8 data)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the buffer is empty and ready
	for transmitting a new byte so wait until this flag is set to one
	and it will cleared by hardware when u write  new data to puffer.*/
	while(!(READ_BIT(UCSRA,UDRE)));
    1228:	eb e2       	ldi	r30, 0x2B	; 43
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	82 95       	swap	r24
    1230:	86 95       	lsr	r24
    1232:	87 70       	andi	r24, 0x07	; 7
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	90 70       	andi	r25, 0x00	; 0
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	a1 f3       	breq	.-24     	; 0x1228 <UART_SendByte+0xc>
	UDR = data;
    1240:	ec e2       	ldi	r30, 0x2C	; 44
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	80 83       	st	Z, r24
}
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when the UART receive data so  wait until this flag is set to one
	and it will cleared by hardware when u read the data*/
	while(!(READ_BIT(UCSRA,RXC)));
    1258:	eb e2       	ldi	r30, 0x2B	; 43
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 23       	and	r24, r24
    1260:	dc f7       	brge	.-10     	; 0x1258 <UART_ReceiveByte+0x8>
    return UDR;
    1262:	ec e2       	ldi	r30, 0x2C	; 44
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <UART_SendString>:

void UART_SendString(uint8* str)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <UART_SendString+0x6>
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
    127e:	19 82       	std	Y+1, r1	; 0x01
    1280:	0e c0       	rjmp	.+28     	; 0x129e <UART_SendString+0x30>
	while(str[count]!='\0')
	{
		UART_SendByte(str[count]);
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	80 81       	ld	r24, Z
    1294:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
		count++;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(uint8* str)
{
	uint8 count=0;
	while(str[count]!='\0')
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	fc 01       	movw	r30, r24
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	39 f7       	brne	.-50     	; 0x1282 <UART_SendString+0x14>
	{
		UART_SendByte(str[count]);
		count++;
	}
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <UART_Receive_NoBlock>:

uint8 UART_Receive_NoBlock(uint8*pdata)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <UART_Receive_NoBlock+0x6>
    12c6:	0f 92       	push	r0
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9b 83       	std	Y+3, r25	; 0x03
    12ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status=0;
    12d0:	19 82       	std	Y+1, r1	; 0x01
	if(READ_BIT(UCSRA,RXC))
    12d2:	eb e2       	ldi	r30, 0x2B	; 43
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 23       	and	r24, r24
    12da:	4c f4       	brge	.+18     	; 0x12ee <UART_Receive_NoBlock+0x2e>
	{
		*pdata=UDR;
    12dc:	ec e2       	ldi	r30, 0x2C	; 44
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	ea 81       	ldd	r30, Y+2	; 0x02
    12e4:	fb 81       	ldd	r31, Y+3	; 0x03
    12e6:	80 83       	st	Z, r24
		status=1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <UART_Receive_NoBlock+0x30>
	}
	else
	{
		status=0;
    12ee:	19 82       	std	Y+1, r1	; 0x01
	}
return status;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <Timer1_Init>:
static void (*(TMR1_InterriptComB)) (void);
static void (*(TMR1_InterrupICU)) (void);
static void Func_ICU();
uint8 flag=0;
volatile uint16 t1,t2,t3;
void Timer1_Init(uint8 mode ,OCRA_Phase_fast_pwm outputa,OCRB_Phase_fast_pwm outputb){
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Timer1_Init+0x6>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	6a 83       	std	Y+2, r22	; 0x02
    130e:	4b 83       	std	Y+3, r20	; 0x03
	TIMER1_SET_MODE(mode);
    1310:	af e4       	ldi	r26, 0x4F	; 79
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ef e4       	ldi	r30, 0x4F	; 79
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	90 81       	ld	r25, Z
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	83 70       	andi	r24, 0x03	; 3
    131e:	89 0f       	add	r24, r25
    1320:	8c 93       	st	X, r24
    1322:	ae e4       	ldi	r26, 0x4E	; 78
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ee e4       	ldi	r30, 0x4E	; 78
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	90 81       	ld	r25, Z
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	8c 70       	andi	r24, 0x0C	; 12
    1330:	88 0f       	add	r24, r24
    1332:	89 0f       	add	r24, r25
    1334:	8c 93       	st	X, r24
	TIMER1_SET_PRESCALLER(TIMER1_PRESCALLER);
    1336:	ae e4       	ldi	r26, 0x4E	; 78
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ee e4       	ldi	r30, 0x4E	; 78
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8e 5f       	subi	r24, 0xFE	; 254
    1342:	8c 93       	st	X, r24
	TIMER1_OCR1A_CHAN_MODE(outputa);
    1344:	af e4       	ldi	r26, 0x4F	; 79
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ef e4       	ldi	r30, 0x4F	; 79
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	90 81       	ld	r25, Z
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	89 2b       	or	r24, r25
    1352:	8c 93       	st	X, r24
	TIMER1_OCR1A_CHAN_MODE(outputb);
    1354:	af e4       	ldi	r26, 0x4F	; 79
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ef e4       	ldi	r30, 0x4F	; 79
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	90 81       	ld	r25, Z
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	89 2b       	or	r24, r25
    1362:	8c 93       	st	X, r24
	if(outputa !=OCRA1_DISCONNECTED)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 23       	and	r24, r24
    1368:	39 f0       	breq	.+14     	; 0x1378 <Timer1_Init+0x7a>
	{
		SET_BIT(DDRD,5);
    136a:	a1 e3       	ldi	r26, 0x31	; 49
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e1 e3       	ldi	r30, 0x31	; 49
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 62       	ori	r24, 0x20	; 32
    1376:	8c 93       	st	X, r24
	}
	if(outputa !=OCRB1_DISCONNECTED)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	88 23       	and	r24, r24
    137c:	39 f0       	breq	.+14     	; 0x138c <Timer1_Init+0x8e>
	{
		SET_BIT(DDRD,4);
    137e:	a1 e3       	ldi	r26, 0x31	; 49
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e1 e3       	ldi	r30, 0x31	; 49
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 61       	ori	r24, 0x10	; 16
    138a:	8c 93       	st	X, r24
	}
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <Timer1_Interrupt_Enable>:


void Timer1_Interrupt_Enable()
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    13a0:	a9 e5       	ldi	r26, 0x59	; 89
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e9 e5       	ldi	r30, 0x59	; 89
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	84 60       	ori	r24, 0x04	; 4
    13ac:	8c 93       	st	X, r24
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <Timer1_Interrupt_Disable>:
void Timer1_Interrupt_Disable()
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE1);
    13bc:	a9 e5       	ldi	r26, 0x59	; 89
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e9 e5       	ldi	r30, 0x59	; 89
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8b 7f       	andi	r24, 0xFB	; 251
    13c8:	8c 93       	st	X, r24
}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <Timer1_SetCallBack>:
void Timer1_SetCallBack(void (*tmr1_ptf)(void))
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <Timer1_SetCallBack+0x6>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
	TMR1_InterriptOveFlow = tmr1_ptf;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	90 93 4c 02 	sts	0x024C, r25
    13e6:	80 93 4b 02 	sts	0x024B, r24
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <TIMER1_SetOCR1A>:

void TIMER1_SetOCR1A(uint16 _value)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <TIMER1_SetOCR1A+0x6>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=_value;
    1402:	ea e4       	ldi	r30, 0x4A	; 74
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TIMER1_SetOCR1B>:
void TIMER1_SetOCR1B(uint16 _value)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER1_SetOCR1B+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=_value;
    1426:	e8 e4       	ldi	r30, 0x48	; 72
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TIMER1_SetICR1>:
void TIMER1_SetICR1(uint16 _value)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <TIMER1_SetICR1+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
	ICR1=_value;
    144a:	e6 e4       	ldi	r30, 0x46	; 70
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <TIMER1_SetTCNT1>:
void TIMER1_SetTCNT1(uint16 _value)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <TIMER1_SetTCNT1+0x6>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=_value;
    146e:	ec e4       	ldi	r30, 0x4C	; 76
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <PWM_FreQ_KHz>:
void PWM_FreQ_KHz(uint16 _ferq)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <PWM_FreQ_KHz+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <PWM_FreQ_KHz+0x8>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ttotal = (uint32)1000/_ferq;
    1494:	88 ee       	ldi	r24, 0xE8	; 232
    1496:	93 e0       	ldi	r25, 0x03	; 3
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	b9 01       	movw	r22, r18
    149e:	0e 94 bc 24 	call	0x4978	; 0x4978 <__udivmodhi4>
    14a2:	cb 01       	movw	r24, r22
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
	if(ttotal >= 1)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	41 f0       	breq	.+16     	; 0x14c0 <PWM_FreQ_KHz+0x3c>
	{
		ICR1 = ttotal-1;
    14b0:	e6 e4       	ldi	r30, 0x46	; 70
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <PWM_FreQ_KHz+0x44>
	}
	else{ICR1 = 0 ;}
    14c0:	e6 e4       	ldi	r30, 0x46	; 70
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	11 82       	std	Z+1, r1	; 0x01
    14c6:	10 82       	st	Z, r1
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <PWM_FreQ_Hz>:
void PWM_FreQ_Hz(uint16 _ferq)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <PWM_FreQ_Hz+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <PWM_FreQ_Hz+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ttotal =(uint32) 1000000/_ferq;
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	9c 01       	movw	r18, r24
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	80 e4       	ldi	r24, 0x40	; 64
    14f2:	92 e4       	ldi	r25, 0x42	; 66
    14f4:	af e0       	ldi	r26, 0x0F	; 15
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    1500:	da 01       	movw	r26, r20
    1502:	c9 01       	movw	r24, r18
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	if(ttotal >= 1)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	41 f0       	breq	.+16     	; 0x1520 <PWM_FreQ_Hz+0x4a>
	{
		ICR1 = ttotal-1;
    1510:	e6 e4       	ldi	r30, 0x46	; 70
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <PWM_FreQ_Hz+0x52>
	}
	else{ICR1 = 0 ;}
    1520:	e6 e4       	ldi	r30, 0x46	; 70
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	11 82       	std	Z+1, r1	; 0x01
    1526:	10 82       	st	Z, r1
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <PWM_SetDuty_Cycle_OCR1A>:
void PWM_SetDuty_Cycle_OCR1A(uint8 _duty)
{
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <PWM_SetDuty_Cycle_OCR1A+0xe>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ton =((uint32)_duty*(ICR1+1))/100;
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	e8 2e       	mov	r14, r24
    1550:	ff 24       	eor	r15, r15
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	e6 e4       	ldi	r30, 0x46	; 70
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	9c 01       	movw	r18, r24
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	c8 01       	movw	r24, r16
    1568:	b7 01       	movw	r22, r14
    156a:	0e 94 9d 24 	call	0x493a	; 0x493a <__mulsi3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	24 e6       	ldi	r18, 0x64	; 100
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    1582:	da 01       	movw	r26, r20
    1584:	c9 01       	movw	r24, r18
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	if(ton >= 1)
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	41 f0       	breq	.+16     	; 0x15a2 <PWM_SetDuty_Cycle_OCR1A+0x6c>
	{
		OCR1A = ton - 1;
    1592:	ea e4       	ldi	r30, 0x4A	; 74
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <PWM_SetDuty_Cycle_OCR1A+0x74>
	}
	else {OCR1A = 0 ;}
    15a2:	ea e4       	ldi	r30, 0x4A	; 74
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	11 82       	std	Z+1, r1	; 0x01
    15a8:	10 82       	st	Z, r1
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	08 95       	ret

000015be <PWM_SetDuty_Cycle_OCR1B>:

void PWM_SetDuty_Cycle_OCR1B(uint8 _duty)
{
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <PWM_SetDuty_Cycle_OCR1B+0xe>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ton =((uint32)_duty*(ICR1+1))/100;
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	e8 2e       	mov	r14, r24
    15d8:	ff 24       	eor	r15, r15
    15da:	00 e0       	ldi	r16, 0x00	; 0
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	e6 e4       	ldi	r30, 0x46	; 70
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	9c 01       	movw	r18, r24
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	c8 01       	movw	r24, r16
    15f0:	b7 01       	movw	r22, r14
    15f2:	0e 94 9d 24 	call	0x493a	; 0x493a <__mulsi3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	24 e6       	ldi	r18, 0x64	; 100
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    160a:	da 01       	movw	r26, r20
    160c:	c9 01       	movw	r24, r18
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	if(ton >= 1)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	41 f0       	breq	.+16     	; 0x162a <PWM_SetDuty_Cycle_OCR1B+0x6c>
	{
		OCR1B = ton - 1;
    161a:	e8 e4       	ldi	r30, 0x48	; 72
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <PWM_SetDuty_Cycle_OCR1B+0x74>
	}
	else {OCR1B = 0 ;}
    162a:	e8 e4       	ldi	r30, 0x48	; 72
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	11 82       	std	Z+1, r1	; 0x01
    1630:	10 82       	st	Z, r1
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	08 95       	ret

00001646 <TMR1_Interrupt_COMPA_enable>:


void TMR1_Interrupt_COMPA_enable(){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    164e:	a9 e5       	ldi	r26, 0x59	; 89
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e9 e5       	ldi	r30, 0x59	; 89
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 61       	ori	r24, 0x10	; 16
    165a:	8c 93       	st	X, r24
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <Timer1_SetCallBack_COMPA>:
void Timer1_SetCallBack_COMPA(void (*tmr1_ptf)(void))
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <Timer1_SetCallBack_COMPA+0x6>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	TMR1_InterriptComA=tmr1_ptf;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	9a 81       	ldd	r25, Y+2	; 0x02
    1674:	90 93 4e 02 	sts	0x024E, r25
    1678:	80 93 4d 02 	sts	0x024D, r24
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <TMR1_Interrupt_COMPA_Disable>:
void TMR1_Interrupt_COMPA_Disable(){
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1A);
    168e:	a9 e5       	ldi	r26, 0x59	; 89
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e9 e5       	ldi	r30, 0x59	; 89
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7e       	andi	r24, 0xEF	; 239
    169a:	8c 93       	st	X, r24
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <TMR1_Interrupt_CAPT_enable>:
void TMR1_Interrupt_CAPT_enable()
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62

}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <TMR1_Interrupt_COMPB_enable>:
void TMR1_Interrupt_COMPB_enable(){
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62

}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <Timer1_SetCallBack_COMPB>:
void Timer1_SetCallBack_COMPB(void (*tmr1_ptf)(void))
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <Timer1_SetCallBack_COMPB+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01

}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <Timer1_InputCpetureEdge>:


void Timer1_InputCpetureEdge(Edge_t _edge)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	89 83       	std	Y+1, r24	; 0x01
	if(FALLING_EDGE ==_edge)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	88 23       	and	r24, r24
    16e6:	41 f4       	brne	.+16     	; 0x16f8 <Timer1_InputCpetureEdge+0x22>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    16e8:	ae e4       	ldi	r26, 0x4E	; 78
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 7b       	andi	r24, 0xBF	; 191
    16f4:	8c 93       	st	X, r24
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <Timer1_InputCpetureEdge+0x36>
	}
	else if(RISING_EDGE ==_edge)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	39 f4       	brne	.+14     	; 0x170c <Timer1_InputCpetureEdge+0x36>
	{
		SET_BIT(TCCR1B,ICES1);
    16fe:	ae e4       	ldi	r26, 0x4E	; 78
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ee e4       	ldi	r30, 0x4E	; 78
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 64       	ori	r24, 0x40	; 64
    170a:	8c 93       	st	X, r24
	}
}
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <Timer1_ICU_InterruptEnable>:

void Timer1_ICU_InterruptEnable()
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 62       	ori	r24, 0x20	; 32
    1728:	8c 93       	st	X, r24
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <Timer1_ICU_InterruptDisnable>:
void Timer1_ICU_InterruptDisnable()
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    1738:	a9 e5       	ldi	r26, 0x59	; 89
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e9 e5       	ldi	r30, 0x59	; 89
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8f 7d       	andi	r24, 0xDF	; 223
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void (*(TMR1_ICU)) (void))
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <Timer1_ICU_SetCallBack+0x6>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01

		TMR1_InterrupICU=TMR1_ICU;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	90 93 52 02 	sts	0x0252, r25
    1762:	80 93 51 02 	sts	0x0251, r24

}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <PWM_measure>:


void PWM_measure(uint32 *pfeq,uint8 * pduty)
{
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	28 97       	sbiw	r28, 0x08	; 8
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	9e 83       	std	Y+6, r25	; 0x06
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	78 87       	std	Y+8, r23	; 0x08
    1792:	6f 83       	std	Y+7, r22	; 0x07
	uint16 Ton,Toff;
	TCNT1=0;
    1794:	ec e4       	ldi	r30, 0x4C	; 76
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	11 82       	std	Z+1, r1	; 0x01
    179a:	10 82       	st	Z, r1
	Timer1_ICU_SetCallBack(Func_ICU);
    179c:	8a e4       	ldi	r24, 0x4A	; 74
    179e:	9c e0       	ldi	r25, 0x0C	; 12
    17a0:	0e 94 a6 0b 	call	0x174c	; 0x174c <Timer1_ICU_SetCallBack>
	Timer1_InputCpetureEdge(RISING_EDGE);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
	Timer1_ICU_InterruptEnable();
    17aa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Timer1_ICU_InterruptEnable>
	flag=0;
    17ae:	10 92 4a 02 	sts	0x024A, r1
	while(flag<3);
    17b2:	80 91 4a 02 	lds	r24, 0x024A
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	e0 f3       	brcs	.-8      	; 0x17b2 <PWM_measure+0x42>
	Ton=t2-t1;
    17ba:	20 91 6a 02 	lds	r18, 0x026A
    17be:	30 91 6b 02 	lds	r19, 0x026B
    17c2:	80 91 6c 02 	lds	r24, 0x026C
    17c6:	90 91 6d 02 	lds	r25, 0x026D
    17ca:	a9 01       	movw	r20, r18
    17cc:	48 1b       	sub	r20, r24
    17ce:	59 0b       	sbc	r21, r25
    17d0:	ca 01       	movw	r24, r20
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
	Toff=t3-t2;
    17d6:	20 91 68 02 	lds	r18, 0x0268
    17da:	30 91 69 02 	lds	r19, 0x0269
    17de:	80 91 6a 02 	lds	r24, 0x026A
    17e2:	90 91 6b 02 	lds	r25, 0x026B
    17e6:	a9 01       	movw	r20, r18
    17e8:	48 1b       	sub	r20, r24
    17ea:	59 0b       	sbc	r21, r25
    17ec:	ca 01       	movw	r24, r20
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
	*pduty = ((uint32)Ton*100)/((uint32)Ton+Toff);
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	cc 01       	movw	r24, r24
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	24 e6       	ldi	r18, 0x64	; 100
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 9d 24 	call	0x493a	; 0x493a <__mulsi3>
    180c:	7b 01       	movw	r14, r22
    180e:	8c 01       	movw	r16, r24
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	9c 01       	movw	r18, r24
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	cc 01       	movw	r24, r24
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	28 0f       	add	r18, r24
    1826:	39 1f       	adc	r19, r25
    1828:	4a 1f       	adc	r20, r26
    182a:	5b 1f       	adc	r21, r27
    182c:	c8 01       	movw	r24, r16
    182e:	b7 01       	movw	r22, r14
    1830:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    1834:	da 01       	movw	r26, r20
    1836:	c9 01       	movw	r24, r18
    1838:	ef 81       	ldd	r30, Y+7	; 0x07
    183a:	f8 85       	ldd	r31, Y+8	; 0x08
    183c:	80 83       	st	Z, r24
	*pfeq =(uint32)1000000/((uint32)Ton+Toff);
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	9c 01       	movw	r18, r24
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	cc 01       	movw	r24, r24
    184e:	a0 e0       	ldi	r26, 0x00	; 0
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	28 0f       	add	r18, r24
    1854:	39 1f       	adc	r19, r25
    1856:	4a 1f       	adc	r20, r26
    1858:	5b 1f       	adc	r21, r27
    185a:	80 e4       	ldi	r24, 0x40	; 64
    185c:	92 e4       	ldi	r25, 0x42	; 66
    185e:	af e0       	ldi	r26, 0x0F	; 15
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    186a:	da 01       	movw	r26, r20
    186c:	c9 01       	movw	r24, r18
    186e:	ed 81       	ldd	r30, Y+5	; 0x05
    1870:	fe 81       	ldd	r31, Y+6	; 0x06
    1872:	80 83       	st	Z, r24
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	a2 83       	std	Z+2, r26	; 0x02
    1878:	b3 83       	std	Z+3, r27	; 0x03


}
    187a:	28 96       	adiw	r28, 0x08	; 8
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	08 95       	ret

00001894 <Func_ICU>:
static void Func_ICU()
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    189c:	80 91 4a 02 	lds	r24, 0x024A
    18a0:	88 23       	and	r24, r24
    18a2:	79 f4       	brne	.+30     	; 0x18c2 <Func_ICU+0x2e>
	{
		t1=ICR1;
    18a4:	e6 e4       	ldi	r30, 0x46	; 70
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	90 93 6d 02 	sts	0x026D, r25
    18b0:	80 93 6c 02 	sts	0x026C, r24
		Timer1_InputCpetureEdge(FALLING_EDGE);
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
		flag=1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	80 93 4a 02 	sts	0x024A, r24
    18c0:	24 c0       	rjmp	.+72     	; 0x190a <Func_ICU+0x76>

	}
	else if(flag==1)
    18c2:	80 91 4a 02 	lds	r24, 0x024A
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <Func_ICU+0x54>
	{
		t2=ICR1;
    18ca:	e6 e4       	ldi	r30, 0x46	; 70
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	90 93 6b 02 	sts	0x026B, r25
    18d6:	80 93 6a 02 	sts	0x026A, r24
		Timer1_InputCpetureEdge(RISING_EDGE);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
		flag=2;
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	80 93 4a 02 	sts	0x024A, r24
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <Func_ICU+0x76>
	}
	else if(flag==2)
    18e8:	80 91 4a 02 	lds	r24, 0x024A
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	69 f4       	brne	.+26     	; 0x190a <Func_ICU+0x76>
	{
		t3=ICR1;
    18f0:	e6 e4       	ldi	r30, 0x46	; 70
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	90 93 69 02 	sts	0x0269, r25
    18fc:	80 93 68 02 	sts	0x0268, r24
		Timer1_ICU_InterruptDisnable();
    1900:	0e 94 98 0b 	call	0x1730	; 0x1730 <Timer1_ICU_InterruptDisnable>
		flag=3;
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	80 93 4a 02 	sts	0x024A, r24
	}
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptOveFlow)
    193a:	80 91 4b 02 	lds	r24, 0x024B
    193e:	90 91 4c 02 	lds	r25, 0x024C
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	29 f0       	breq	.+10     	; 0x1950 <__vector_9+0x40>
		TMR1_InterriptOveFlow();
    1946:	e0 91 4b 02 	lds	r30, 0x024B
    194a:	f0 91 4c 02 	lds	r31, 0x024C
    194e:	09 95       	icall
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <__vector_7>:

/***********************ISR For TMR1 For COMPA***************************/


ISR(TIMER1_COMPA_vect)
{
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	2f 93       	push	r18
    1982:	3f 93       	push	r19
    1984:	4f 93       	push	r20
    1986:	5f 93       	push	r21
    1988:	6f 93       	push	r22
    198a:	7f 93       	push	r23
    198c:	8f 93       	push	r24
    198e:	9f 93       	push	r25
    1990:	af 93       	push	r26
    1992:	bf 93       	push	r27
    1994:	ef 93       	push	r30
    1996:	ff 93       	push	r31
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptComA)
    19a0:	80 91 4d 02 	lds	r24, 0x024D
    19a4:	90 91 4e 02 	lds	r25, 0x024E
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	29 f0       	breq	.+10     	; 0x19b6 <__vector_7+0x40>
		TMR1_InterriptComA();
    19ac:	e0 91 4d 02 	lds	r30, 0x024D
    19b0:	f0 91 4e 02 	lds	r31, 0x024E
    19b4:	09 95       	icall
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	bf 91       	pop	r27
    19c0:	af 91       	pop	r26
    19c2:	9f 91       	pop	r25
    19c4:	8f 91       	pop	r24
    19c6:	7f 91       	pop	r23
    19c8:	6f 91       	pop	r22
    19ca:	5f 91       	pop	r21
    19cc:	4f 91       	pop	r20
    19ce:	3f 91       	pop	r19
    19d0:	2f 91       	pop	r18
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <__vector_8>:
/**********************ISR For TMR1 For COMPB**************************/

ISR(TIMER1_COMPB_vect)
{
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterriptComB)
    1a06:	80 91 4f 02 	lds	r24, 0x024F
    1a0a:	90 91 50 02 	lds	r25, 0x0250
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <__vector_8+0x40>
		TMR1_InterriptComB();
    1a12:	e0 91 4f 02 	lds	r30, 0x024F
    1a16:	f0 91 50 02 	lds	r31, 0x0250
    1a1a:	09 95       	icall
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_6>:
/**********************ISR For TMR1 For ICU****************************/

ISR(TIMER1_CAPT_vect)
{
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	if(TMR1_InterrupICU)
    1a6c:	80 91 51 02 	lds	r24, 0x0251
    1a70:	90 91 52 02 	lds	r25, 0x0252
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	29 f0       	breq	.+10     	; 0x1a82 <__vector_6+0x40>
		TMR1_InterrupICU();
    1a78:	e0 91 51 02 	lds	r30, 0x0251
    1a7c:	f0 91 52 02 	lds	r31, 0x0252
    1a80:	09 95       	icall
}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	ff 91       	pop	r31
    1a88:	ef 91       	pop	r30
    1a8a:	bf 91       	pop	r27
    1a8c:	af 91       	pop	r26
    1a8e:	9f 91       	pop	r25
    1a90:	8f 91       	pop	r24
    1a92:	7f 91       	pop	r23
    1a94:	6f 91       	pop	r22
    1a96:	5f 91       	pop	r21
    1a98:	4f 91       	pop	r20
    1a9a:	3f 91       	pop	r19
    1a9c:	2f 91       	pop	r18
    1a9e:	0f 90       	pop	r0
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	0f 90       	pop	r0
    1aa4:	1f 90       	pop	r1
    1aa6:	18 95       	reti

00001aa8 <Timer0_Init>:
 *  Created on: 24 Sept 2022
 *      Author: El-Wattaneya
 */
#include "timer0.h"
static void (*timer0_ptf)(void);
void Timer0_Init(uint8 mode,uint8 outputpin){
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <Timer0_Init+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <Timer0_Init+0x8>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <Timer0_Init+0xa>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	6a 83       	std	Y+2, r22	; 0x02
	switch(mode){
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3e 83       	std	Y+6, r19	; 0x06
    1ac2:	2d 83       	std	Y+5, r18	; 0x05
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	21 f1       	breq	.+72     	; 0x1b16 <Timer0_Init+0x6e>
    1ace:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <Timer0_Init+0x3a>
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <Timer0_Init+0x50>
    1ae0:	46 c0       	rjmp	.+140    	; 0x1b6e <Timer0_Init+0xc6>
    1ae2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	21 f1       	breq	.+72     	; 0x1b34 <Timer0_Init+0x8c>
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	83 30       	cpi	r24, 0x03	; 3
    1af2:	91 05       	cpc	r25, r1
    1af4:	71 f1       	breq	.+92     	; 0x1b52 <Timer0_Init+0xaa>
    1af6:	3b c0       	rjmp	.+118    	; 0x1b6e <Timer0_Init+0xc6>
		case TIMER0_NORMAL_MODE:
			CLEAR_BIT(TCCR0,WGM00);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 7b       	andi	r24, 0xBF	; 191
    1b04:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    1b06:	a3 e5       	ldi	r26, 0x53	; 83
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e3 e5       	ldi	r30, 0x53	; 83
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	8c 93       	st	X, r24
    1b14:	2c c0       	rjmp	.+88     	; 0x1b6e <Timer0_Init+0xc6>
		break;
		case TIMER0_PHASSCORRECT_MODE:
			SET_BIT(TCCR0,WGM00);
    1b16:	a3 e5       	ldi	r26, 0x53	; 83
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e3 e5       	ldi	r30, 0x53	; 83
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 64       	ori	r24, 0x40	; 64
    1b22:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    1b24:	a3 e5       	ldi	r26, 0x53	; 83
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e3 e5       	ldi	r30, 0x53	; 83
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	8c 93       	st	X, r24
    1b32:	1d c0       	rjmp	.+58     	; 0x1b6e <Timer0_Init+0xc6>
		break;
		case TIMER0_CTC_MODE:
			CLEAR_BIT(TCCR0,WGM00);
    1b34:	a3 e5       	ldi	r26, 0x53	; 83
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e3 e5       	ldi	r30, 0x53	; 83
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8f 7b       	andi	r24, 0xBF	; 191
    1b40:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    1b42:	a3 e5       	ldi	r26, 0x53	; 83
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e3 e5       	ldi	r30, 0x53	; 83
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 60       	ori	r24, 0x08	; 8
    1b4e:	8c 93       	st	X, r24
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <Timer0_Init+0xc6>
		break;
		case TIMER0_FASTPWM_MODE:
			SET_BIT(TCCR0,WGM00);
    1b52:	a3 e5       	ldi	r26, 0x53	; 83
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e3 e5       	ldi	r30, 0x53	; 83
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 64       	ori	r24, 0x40	; 64
    1b5e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    1b60:	a3 e5       	ldi	r26, 0x53	; 83
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e3 e5       	ldi	r30, 0x53	; 83
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 60       	ori	r24, 0x08	; 8
    1b6c:	8c 93       	st	X, r24
		break;
	}
	switch(outputpin)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3c 83       	std	Y+4, r19	; 0x04
    1b76:	2b 83       	std	Y+3, r18	; 0x03
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	91 05       	cpc	r25, r1
    1b80:	21 f1       	breq	.+72     	; 0x1bca <Timer0_Init+0x122>
    1b82:	2b 81       	ldd	r18, Y+3	; 0x03
    1b84:	3c 81       	ldd	r19, Y+4	; 0x04
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <Timer0_Init+0xee>
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	61 f0       	breq	.+24     	; 0x1bac <Timer0_Init+0x104>
    1b94:	5b c0       	rjmp	.+182    	; 0x1c4c <Timer0_Init+0x1a4>
    1b96:	2b 81       	ldd	r18, Y+3	; 0x03
    1b98:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	59 f1       	breq	.+86     	; 0x1bf6 <Timer0_Init+0x14e>
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	e1 f1       	breq	.+120    	; 0x1c22 <Timer0_Init+0x17a>
    1baa:	50 c0       	rjmp	.+160    	; 0x1c4c <Timer0_Init+0x1a4>
	{
		case OC0_DISCONNECTED:
			CLEAR_BIT(TCCR0,COM00);
    1bac:	a3 e5       	ldi	r26, 0x53	; 83
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e3 e5       	ldi	r30, 0x53	; 83
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 7e       	andi	r24, 0xEF	; 239
    1bb8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1bba:	a3 e5       	ldi	r26, 0x53	; 83
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e3 e5       	ldi	r30, 0x53	; 83
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7d       	andi	r24, 0xDF	; 223
    1bc6:	8c 93       	st	X, r24
    1bc8:	41 c0       	rjmp	.+130    	; 0x1c4c <Timer0_Init+0x1a4>
			break;
		case OC0_TOGGLE:
			SET_BIT(TCCR0,COM00);
    1bca:	a3 e5       	ldi	r26, 0x53	; 83
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e3 e5       	ldi	r30, 0x53	; 83
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 61       	ori	r24, 0x10	; 16
    1bd6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1bd8:	a3 e5       	ldi	r26, 0x53	; 83
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e3 e5       	ldi	r30, 0x53	; 83
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7d       	andi	r24, 0xDF	; 223
    1be4:	8c 93       	st	X, r24
			SET_BIT(DDRB,3);
    1be6:	a7 e3       	ldi	r26, 0x37	; 55
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e7 e3       	ldi	r30, 0x37	; 55
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	88 60       	ori	r24, 0x08	; 8
    1bf2:	8c 93       	st	X, r24
    1bf4:	2b c0       	rjmp	.+86     	; 0x1c4c <Timer0_Init+0x1a4>
			break;
		case OC0_NON_INVERTING:
			CLEAR_BIT(TCCR0,COM00);
    1bf6:	a3 e5       	ldi	r26, 0x53	; 83
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e3 e5       	ldi	r30, 0x53	; 83
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7e       	andi	r24, 0xEF	; 239
    1c02:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e3 e5       	ldi	r30, 0x53	; 83
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 62       	ori	r24, 0x20	; 32
    1c10:	8c 93       	st	X, r24
			SET_BIT(DDRB,3);
    1c12:	a7 e3       	ldi	r26, 0x37	; 55
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e7 e3       	ldi	r30, 0x37	; 55
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 60       	ori	r24, 0x08	; 8
    1c1e:	8c 93       	st	X, r24
    1c20:	15 c0       	rjmp	.+42     	; 0x1c4c <Timer0_Init+0x1a4>
			break;
		case OC0_INVERTING:
			SET_BIT(TCCR0,COM00);
    1c22:	a3 e5       	ldi	r26, 0x53	; 83
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e3 e5       	ldi	r30, 0x53	; 83
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 61       	ori	r24, 0x10	; 16
    1c2e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    1c30:	a3 e5       	ldi	r26, 0x53	; 83
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e3 e5       	ldi	r30, 0x53	; 83
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 62       	ori	r24, 0x20	; 32
    1c3c:	8c 93       	st	X, r24
			SET_BIT(DDRB,3);
    1c3e:	a7 e3       	ldi	r26, 0x37	; 55
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e7 e3       	ldi	r30, 0x37	; 55
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	88 60       	ori	r24, 0x08	; 8
    1c4a:	8c 93       	st	X, r24
	#elif TIMER0_PRESCALLER == TIMER0_1_PRESCALER
		SET_BIT(TCCR0,CS00);
		CLEAR_BIT(TCCR0,CS01);
		CLEAR_BIT(TCCR0,CS02);
	#elif TIMER0_PRESCALLER == TIMER0_8_PRESCALER
		CLEAR_BIT(TCCR0,CS00);
    1c4c:	a3 e5       	ldi	r26, 0x53	; 83
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e3 e5       	ldi	r30, 0x53	; 83
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8e 7f       	andi	r24, 0xFE	; 254
    1c58:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    1c5a:	a3 e5       	ldi	r26, 0x53	; 83
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e3 e5       	ldi	r30, 0x53	; 83
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	82 60       	ori	r24, 0x02	; 2
    1c66:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,CS02);
    1c68:	a3 e5       	ldi	r26, 0x53	; 83
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e3 e5       	ldi	r30, 0x53	; 83
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	8b 7f       	andi	r24, 0xFB	; 251
    1c74:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS00);
		SET_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS02);
	#endif

}
    1c76:	26 96       	adiw	r28, 0x06	; 6
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <Timer0_Set_OCR0>:


void Timer0_Set_OCR0(uint8 value){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
	OCR0=value;
    1c94:	ec e5       	ldi	r30, 0x5C	; 92
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	80 83       	st	Z, r24
}
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <Timer0_Interrupt_Enable>:
void Timer0_Interrupt_Enable(){
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1cac:	a9 e5       	ldi	r26, 0x59	; 89
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e9 e5       	ldi	r30, 0x59	; 89
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	81 60       	ori	r24, 0x01	; 1
    1cb8:	8c 93       	st	X, r24
}
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <Timer0_Interrupt_Disable>:
void Timer0_Interrupt_Disable()
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    1cc8:	a9 e5       	ldi	r26, 0x59	; 89
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e9 e5       	ldi	r30, 0x59	; 89
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8e 7f       	andi	r24, 0xFE	; 254
    1cd4:	8c 93       	st	X, r24
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Timer0_SetCallBack>:
void Timer0_SetCallBack(void (*tmr0_ptf)(void)){
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <Timer0_SetCallBack+0x6>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
	timer0_ptf=tmr0_ptf;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	90 93 54 02 	sts	0x0254, r25
    1cf2:	80 93 53 02 	sts	0x0253, r24
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	if(timer0_ptf)
    1d2a:	80 91 53 02 	lds	r24, 0x0253
    1d2e:	90 91 54 02 	lds	r25, 0x0254
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	29 f0       	breq	.+10     	; 0x1d40 <__vector_11+0x40>
		timer0_ptf();
    1d36:	e0 91 53 02 	lds	r30, 0x0253
    1d3a:	f0 91 54 02 	lds	r31, 0x0254
    1d3e:	09 95       	icall
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	ff 91       	pop	r31
    1d46:	ef 91       	pop	r30
    1d48:	bf 91       	pop	r27
    1d4a:	af 91       	pop	r26
    1d4c:	9f 91       	pop	r25
    1d4e:	8f 91       	pop	r24
    1d50:	7f 91       	pop	r23
    1d52:	6f 91       	pop	r22
    1d54:	5f 91       	pop	r21
    1d56:	4f 91       	pop	r20
    1d58:	3f 91       	pop	r19
    1d5a:	2f 91       	pop	r18
    1d5c:	0f 90       	pop	r0
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	0f 90       	pop	r0
    1d62:	1f 90       	pop	r1
    1d64:	18 95       	reti

00001d66 <SPI_SlaveInit>:
 *      Author: El-Wattaneya
 */

#include "spi.h"
void SPI_SlaveInit(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
/* Set MISO output, all others input */
DDRB = (1<<6);
    1d6e:	e7 e3       	ldi	r30, 0x37	; 55
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 e4       	ldi	r24, 0x40	; 64
    1d74:	80 83       	st	Z, r24
/* Enable SPI */
SPCR = (1<<SPE);
    1d76:	ed e2       	ldi	r30, 0x2D	; 45
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 e4       	ldi	r24, 0x40	; 64
    1d7c:	80 83       	st	Z, r24
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <SPI_SlaveReceive>:


char SPI_SlaveReceive(void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)))
    1d8c:	ee e2       	ldi	r30, 0x2E	; 46
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	dc f7       	brge	.-10     	; 0x1d8c <SPI_SlaveReceive+0x8>
;
/* Return data register */
return SPDR;
    1d96:	ef e2       	ldi	r30, 0x2F	; 47
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <SPI_MasterInit>:


void SPI_MasterInit(void)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
DDRB = (1<<5)|(1<<7);
    1daa:	e7 e3       	ldi	r30, 0x37	; 55
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 ea       	ldi	r24, 0xA0	; 160
    1db0:	80 83       	st	Z, r24
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1db2:	ed e2       	ldi	r30, 0x2D	; 45
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	81 e5       	ldi	r24, 0x51	; 81
    1db8:	80 83       	st	Z, r24
}
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <SPI_MasterTransmit>:


void SPI_MasterTransmit(char cData)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = cData;
    1dcc:	ef e2       	ldi	r30, 0x2F	; 47
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	80 83       	st	Z, r24
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
    1dd4:	ee e2       	ldi	r30, 0x2E	; 46
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 23       	and	r24, r24
    1ddc:	dc f7       	brge	.-10     	; 0x1dd4 <SPI_MasterTransmit+0x14>
}
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <EXIT_Interrupts_Init>:
#include "EXIT_interrupts.h"
static void (*INT0_fptr) (void) = NULL;
static void (*INT1_fptr) (void) = NULL;
static void (*INT2_fptr) (void) = NULL;

void EXIT_Interrupts_Init(EXIT_interrupts_t source,EXIT_interrupts_edge_t edge){
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	2a 97       	sbiw	r28, 0x0a	; 10
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	6a 83       	std	Y+2, r22	; 0x02

	switch(source)
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3a 87       	std	Y+10, r19	; 0x0a
    1e06:	29 87       	std	Y+9, r18	; 0x09
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <EXIT_Interrupts_Init+0x2e>
    1e12:	6d c0       	rjmp	.+218    	; 0x1eee <EXIT_Interrupts_Init+0x108>
    1e14:	29 85       	ldd	r18, Y+9	; 0x09
    1e16:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <EXIT_Interrupts_Init+0x3a>
    1e1e:	c9 c0       	rjmp	.+402    	; 0x1fb2 <EXIT_Interrupts_Init+0x1cc>
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <EXIT_Interrupts_Init+0x44>
    1e28:	ea c0       	rjmp	.+468    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
	{
		case EXIT_INT0:
			SET_BIT(GICR,INT0);
    1e2a:	ab e5       	ldi	r26, 0x5B	; 91
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e5       	ldi	r30, 0x5B	; 91
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 64       	ori	r24, 0x40	; 64
    1e36:	8c 93       	st	X, r24
			switch(edge){
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	38 87       	std	Y+8, r19	; 0x08
    1e40:	2f 83       	std	Y+7, r18	; 0x07
    1e42:	8f 81       	ldd	r24, Y+7	; 0x07
    1e44:	98 85       	ldd	r25, Y+8	; 0x08
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	21 f1       	breq	.+72     	; 0x1e94 <EXIT_Interrupts_Init+0xae>
    1e4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e4e:	38 85       	ldd	r19, Y+8	; 0x08
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <EXIT_Interrupts_Init+0x7a>
    1e56:	8f 81       	ldd	r24, Y+7	; 0x07
    1e58:	98 85       	ldd	r25, Y+8	; 0x08
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	61 f0       	breq	.+24     	; 0x1e76 <EXIT_Interrupts_Init+0x90>
    1e5e:	cf c0       	rjmp	.+414    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
    1e60:	2f 81       	ldd	r18, Y+7	; 0x07
    1e62:	38 85       	ldd	r19, Y+8	; 0x08
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	21 f1       	breq	.+72     	; 0x1eb2 <EXIT_Interrupts_Init+0xcc>
    1e6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6c:	98 85       	ldd	r25, Y+8	; 0x08
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	91 05       	cpc	r25, r1
    1e72:	71 f1       	breq	.+92     	; 0x1ed0 <EXIT_Interrupts_Init+0xea>
    1e74:	c4 c0       	rjmp	.+392    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
				case EXIT_EDGE_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC00);
    1e76:	a5 e5       	ldi	r26, 0x55	; 85
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e5       	ldi	r30, 0x55	; 85
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);
    1e84:	a5 e5       	ldi	r26, 0x55	; 85
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e5       	ldi	r30, 0x55	; 85
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8d 7f       	andi	r24, 0xFD	; 253
    1e90:	8c 93       	st	X, r24
    1e92:	b5 c0       	rjmp	.+362    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_BOTH_RAISING_FALLING:
					SET_BIT(MCUCR,ISC00);
    1e94:	a5 e5       	ldi	r26, 0x55	; 85
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e5       	ldi	r30, 0x55	; 85
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);
    1ea2:	a5 e5       	ldi	r26, 0x55	; 85
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8d 7f       	andi	r24, 0xFD	; 253
    1eae:	8c 93       	st	X, r24
    1eb0:	a6 c0       	rjmp	.+332    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_FALLING:
					CLEAR_BIT(MCUCR,ISC00);
    1eb2:	a5 e5       	ldi	r26, 0x55	; 85
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e5 e5       	ldi	r30, 0x55	; 85
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8e 7f       	andi	r24, 0xFE	; 254
    1ebe:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
    1ec0:	a5 e5       	ldi	r26, 0x55	; 85
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e5       	ldi	r30, 0x55	; 85
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	8c 93       	st	X, r24
    1ece:	97 c0       	rjmp	.+302    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					SET_BIT(MCUCR,ISC00);
    1ed0:	a5 e5       	ldi	r26, 0x55	; 85
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e5       	ldi	r30, 0x55	; 85
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	81 60       	ori	r24, 0x01	; 1
    1edc:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
    1ede:	a5 e5       	ldi	r26, 0x55	; 85
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e5       	ldi	r30, 0x55	; 85
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	8c 93       	st	X, r24
    1eec:	88 c0       	rjmp	.+272    	; 0x1ffe <EXIT_Interrupts_Init+0x218>




		case EXIT_INT1:
			SET_BIT(GICR,INT1);
    1eee:	ab e5       	ldi	r26, 0x5B	; 91
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e5       	ldi	r30, 0x5B	; 91
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 68       	ori	r24, 0x80	; 128
    1efa:	8c 93       	st	X, r24

			switch(edge){
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3e 83       	std	Y+6, r19	; 0x06
    1f04:	2d 83       	std	Y+5, r18	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	21 f1       	breq	.+72     	; 0x1f58 <EXIT_Interrupts_Init+0x172>
    1f10:	2d 81       	ldd	r18, Y+5	; 0x05
    1f12:	3e 81       	ldd	r19, Y+6	; 0x06
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <EXIT_Interrupts_Init+0x13e>
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <EXIT_Interrupts_Init+0x154>
    1f22:	6d c0       	rjmp	.+218    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
    1f24:	2d 81       	ldd	r18, Y+5	; 0x05
    1f26:	3e 81       	ldd	r19, Y+6	; 0x06
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	21 f1       	breq	.+72     	; 0x1f76 <EXIT_Interrupts_Init+0x190>
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	83 30       	cpi	r24, 0x03	; 3
    1f34:	91 05       	cpc	r25, r1
    1f36:	71 f1       	breq	.+92     	; 0x1f94 <EXIT_Interrupts_Init+0x1ae>
    1f38:	62 c0       	rjmp	.+196    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
				case EXIT_EDGE_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC10);
    1f3a:	a5 e5       	ldi	r26, 0x55	; 85
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e5 e5       	ldi	r30, 0x55	; 85
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	8b 7f       	andi	r24, 0xFB	; 251
    1f46:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);
    1f48:	a5 e5       	ldi	r26, 0x55	; 85
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e5 e5       	ldi	r30, 0x55	; 85
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	87 7f       	andi	r24, 0xF7	; 247
    1f54:	8c 93       	st	X, r24
    1f56:	53 c0       	rjmp	.+166    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_BOTH_RAISING_FALLING:
					SET_BIT(MCUCR,ISC10);
    1f58:	a5 e5       	ldi	r26, 0x55	; 85
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e5 e5       	ldi	r30, 0x55	; 85
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	84 60       	ori	r24, 0x04	; 4
    1f64:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);
    1f66:	a5 e5       	ldi	r26, 0x55	; 85
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e5 e5       	ldi	r30, 0x55	; 85
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	87 7f       	andi	r24, 0xF7	; 247
    1f72:	8c 93       	st	X, r24
    1f74:	44 c0       	rjmp	.+136    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_FALLING:
					CLEAR_BIT(MCUCR,ISC10);
    1f76:	a5 e5       	ldi	r26, 0x55	; 85
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e5 e5       	ldi	r30, 0x55	; 85
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	8b 7f       	andi	r24, 0xFB	; 251
    1f82:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
    1f84:	a5 e5       	ldi	r26, 0x55	; 85
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e5       	ldi	r30, 0x55	; 85
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 60       	ori	r24, 0x08	; 8
    1f90:	8c 93       	st	X, r24
    1f92:	35 c0       	rjmp	.+106    	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					SET_BIT(MCUCR,ISC10);
    1f94:	a5 e5       	ldi	r26, 0x55	; 85
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e5       	ldi	r30, 0x55	; 85
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
    1fa2:	a5 e5       	ldi	r26, 0x55	; 85
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e5       	ldi	r30, 0x55	; 85
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	88 60       	ori	r24, 0x08	; 8
    1fae:	8c 93       	st	X, r24
    1fb0:	26 c0       	rjmp	.+76     	; 0x1ffe <EXIT_Interrupts_Init+0x218>




		case EXIT_INT2:
			SET_BIT(GICR,INT2);
    1fb2:	ab e5       	ldi	r26, 0x5B	; 91
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	eb e5       	ldi	r30, 0x5B	; 91
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 62       	ori	r24, 0x20	; 32
    1fbe:	8c 93       	st	X, r24
			switch(edge)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3c 83       	std	Y+4, r19	; 0x04
    1fc8:	2b 83       	std	Y+3, r18	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	31 f0       	breq	.+12     	; 0x1fe0 <EXIT_Interrupts_Init+0x1fa>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	23 30       	cpi	r18, 0x03	; 3
    1fda:	31 05       	cpc	r19, r1
    1fdc:	49 f0       	breq	.+18     	; 0x1ff0 <EXIT_Interrupts_Init+0x20a>
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <EXIT_Interrupts_Init+0x218>
			{
				case EXIT_EDGE_FALLING:
					SET_BIT(MCUCSR,ISC2);
    1fe0:	a4 e5       	ldi	r26, 0x54	; 84
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e4 e5       	ldi	r30, 0x54	; 84
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 64       	ori	r24, 0x40	; 64
    1fec:	8c 93       	st	X, r24
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					CLEAR_BIT(MCUCSR,ISC2);
    1ff0:	a4 e5       	ldi	r26, 0x54	; 84
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e4 e5       	ldi	r30, 0x54	; 84
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 7b       	andi	r24, 0xBF	; 191
    1ffc:	8c 93       	st	X, r24
			}
			break;
	}


}
    1ffe:	2a 96       	adiw	r28, 0x0a	; 10
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <EXIT_Interrupts_Disable>:
void EXIT_Interrupts_Disable(EXIT_interrupts_t source){
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <EXIT_Interrupts_Disable+0x6>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
	switch(source)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3b 83       	std	Y+3, r19	; 0x03
    2026:	2a 83       	std	Y+2, r18	; 0x02
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	89 f0       	breq	.+34     	; 0x2054 <EXIT_Interrupts_Disable+0x44>
    2032:	2a 81       	ldd	r18, Y+2	; 0x02
    2034:	3b 81       	ldd	r19, Y+3	; 0x03
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	a1 f0       	breq	.+40     	; 0x2064 <EXIT_Interrupts_Disable+0x54>
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	b9 f4       	brne	.+46     	; 0x2072 <EXIT_Interrupts_Disable+0x62>
	{
		case EXIT_INT0: CLEAR_BIT(GICR,INT0);break;
    2044:	ab e5       	ldi	r26, 0x5B	; 91
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	eb e5       	ldi	r30, 0x5B	; 91
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8f 7b       	andi	r24, 0xBF	; 191
    2050:	8c 93       	st	X, r24
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <EXIT_Interrupts_Disable+0x62>
		case EXIT_INT1:	CLEAR_BIT(GICR,INT1);break;
    2054:	ab e5       	ldi	r26, 0x5B	; 91
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	eb e5       	ldi	r30, 0x5B	; 91
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8f 77       	andi	r24, 0x7F	; 127
    2060:	8c 93       	st	X, r24
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <EXIT_Interrupts_Disable+0x62>
		case EXIT_INT2:	CLEAR_BIT(GICR,INT2);break;
    2064:	ab e5       	ldi	r26, 0x5B	; 91
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	eb e5       	ldi	r30, 0x5B	; 91
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7d       	andi	r24, 0xDF	; 223
    2070:	8c 93       	st	X, r24
	}
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <EXIT_Set_CallBack>:
void EXIT_Set_CallBack(EXIT_interrupts_t source,void (*INT_ptf)(void)){
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <EXIT_Set_CallBack+0x6>
    2084:	00 d0       	rcall	.+0      	; 0x2086 <EXIT_Set_CallBack+0x8>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	7b 83       	std	Y+3, r23	; 0x03
    2090:	6a 83       	std	Y+2, r22	; 0x02

	switch(source)
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3d 83       	std	Y+5, r19	; 0x05
    209a:	2c 83       	std	Y+4, r18	; 0x04
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	81 f0       	breq	.+32     	; 0x20c6 <EXIT_Set_CallBack+0x48>
    20a6:	2c 81       	ldd	r18, Y+4	; 0x04
    20a8:	3d 81       	ldd	r19, Y+5	; 0x05
    20aa:	22 30       	cpi	r18, 0x02	; 2
    20ac:	31 05       	cpc	r19, r1
    20ae:	91 f0       	breq	.+36     	; 0x20d4 <EXIT_Set_CallBack+0x56>
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	a1 f4       	brne	.+40     	; 0x20e0 <EXIT_Set_CallBack+0x62>
	{
		case EXIT_INT0: INT0_fptr = INT_ptf;break;
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	90 93 56 02 	sts	0x0256, r25
    20c0:	80 93 55 02 	sts	0x0255, r24
    20c4:	0d c0       	rjmp	.+26     	; 0x20e0 <EXIT_Set_CallBack+0x62>
		case EXIT_INT1:	INT1_fptr = INT_ptf;break;
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	90 93 58 02 	sts	0x0258, r25
    20ce:	80 93 57 02 	sts	0x0257, r24
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <EXIT_Set_CallBack+0x62>
		case EXIT_INT2:	INT2_fptr = INT_ptf;break;
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	90 93 5a 02 	sts	0x025A, r25
    20dc:	80 93 59 02 	sts	0x0259, r24
	}
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <__vector_1>:
ISR(INT0_vect)
{
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	if(INT0_fptr)
    211a:	80 91 55 02 	lds	r24, 0x0255
    211e:	90 91 56 02 	lds	r25, 0x0256
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	29 f0       	breq	.+10     	; 0x2130 <__vector_1+0x40>
		INT0_fptr();
    2126:	e0 91 55 02 	lds	r30, 0x0255
    212a:	f0 91 56 02 	lds	r31, 0x0256
    212e:	09 95       	icall

}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	ff 91       	pop	r31
    2136:	ef 91       	pop	r30
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	7f 91       	pop	r23
    2142:	6f 91       	pop	r22
    2144:	5f 91       	pop	r21
    2146:	4f 91       	pop	r20
    2148:	3f 91       	pop	r19
    214a:	2f 91       	pop	r18
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <__vector_2>:
ISR(INT1_vect)
{
    2156:	1f 92       	push	r1
    2158:	0f 92       	push	r0
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	0f 92       	push	r0
    215e:	11 24       	eor	r1, r1
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	ef 93       	push	r30
    2176:	ff 93       	push	r31
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	if(INT2_fptr)
    2180:	80 91 59 02 	lds	r24, 0x0259
    2184:	90 91 5a 02 	lds	r25, 0x025A
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_2+0x40>
		INT2_fptr();
    218c:	e0 91 59 02 	lds	r30, 0x0259
    2190:	f0 91 5a 02 	lds	r31, 0x025A
    2194:	09 95       	icall

}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <__vector_3>:
ISR(INT2_vect)
{
    21bc:	1f 92       	push	r1
    21be:	0f 92       	push	r0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	0f 92       	push	r0
    21c4:	11 24       	eor	r1, r1
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	if(INT2_fptr)
    21e6:	80 91 59 02 	lds	r24, 0x0259
    21ea:	90 91 5a 02 	lds	r25, 0x025A
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_3+0x40>
		INT2_fptr();
    21f2:	e0 91 59 02 	lds	r30, 0x0259
    21f6:	f0 91 5a 02 	lds	r31, 0x025A
    21fa:	09 95       	icall

}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <Dio_init>:
#include "Dio.h"
extern Dio_pin_config pin[PIN_COUNT];

void Dio_init()
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	uint8 counter=0;
    222c:	19 82       	std	Y+1, r1	; 0x01
	for(counter=0;counter<PIN_COUNT;counter++)
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	72 c1       	rjmp	.+740    	; 0x2516 <Dio_init+0x2f4>
	{
		if(pin[counter].port == PORT_A)
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	c9 01       	movw	r24, r18
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	82 0f       	add	r24, r18
    2240:	93 1f       	adc	r25, r19
    2242:	fc 01       	movw	r30, r24
    2244:	e5 55       	subi	r30, 0x55	; 85
    2246:	fe 4f       	sbci	r31, 0xFE	; 254
    2248:	80 81       	ld	r24, Z
    224a:	88 23       	and	r24, r24
    224c:	09 f0       	breq	.+2      	; 0x2250 <Dio_init+0x2e>
    224e:	4d c0       	rjmp	.+154    	; 0x22ea <Dio_init+0xc8>
		{
			if(pin[counter].direction == OUTPUT)
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	c9 01       	movw	r24, r18
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	fc 01       	movw	r30, r24
    2262:	e3 55       	subi	r30, 0x53	; 83
    2264:	fe 4f       	sbci	r31, 0xFE	; 254
    2266:	80 81       	ld	r24, Z
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	f9 f4       	brne	.+62     	; 0x22aa <Dio_init+0x88>
				SET_BIT(DDRA,pin[counter].pin);
    226c:	aa e3       	ldi	r26, 0x3A	; 58
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ea e3       	ldi	r30, 0x3A	; 58
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	48 2f       	mov	r20, r24
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	c9 01       	movw	r24, r18
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	fc 01       	movw	r30, r24
    228a:	e4 55       	subi	r30, 0x54	; 84
    228c:	fe 4f       	sbci	r31, 0xFE	; 254
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 2e       	mov	r0, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <Dio_init+0x7e>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	0a 94       	dec	r0
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <Dio_init+0x7a>
    22a4:	84 2b       	or	r24, r20
    22a6:	8c 93       	st	X, r24
    22a8:	33 c1       	rjmp	.+614    	; 0x2510 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRA,pin[counter].pin);
    22aa:	aa e3       	ldi	r26, 0x3A	; 58
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	ea e3       	ldi	r30, 0x3A	; 58
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	c9 01       	movw	r24, r18
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	fc 01       	movw	r30, r24
    22c8:	e4 55       	subi	r30, 0x54	; 84
    22ca:	fe 4f       	sbci	r31, 0xFE	; 254
    22cc:	80 81       	ld	r24, Z
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 2e       	mov	r0, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <Dio_init+0xbc>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	0a 94       	dec	r0
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <Dio_init+0xb8>
    22e2:	80 95       	com	r24
    22e4:	84 23       	and	r24, r20
    22e6:	8c 93       	st	X, r24
    22e8:	13 c1       	rjmp	.+550    	; 0x2510 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_B)
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	c9 01       	movw	r24, r18
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	82 0f       	add	r24, r18
    22f8:	93 1f       	adc	r25, r19
    22fa:	fc 01       	movw	r30, r24
    22fc:	e5 55       	subi	r30, 0x55	; 85
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	80 81       	ld	r24, Z
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	09 f0       	breq	.+2      	; 0x2308 <Dio_init+0xe6>
    2306:	4d c0       	rjmp	.+154    	; 0x23a2 <Dio_init+0x180>
		{
			if(pin[counter].direction == OUTPUT)
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	c9 01       	movw	r24, r18
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	82 0f       	add	r24, r18
    2316:	93 1f       	adc	r25, r19
    2318:	fc 01       	movw	r30, r24
    231a:	e3 55       	subi	r30, 0x53	; 83
    231c:	fe 4f       	sbci	r31, 0xFE	; 254
    231e:	80 81       	ld	r24, Z
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	f9 f4       	brne	.+62     	; 0x2362 <Dio_init+0x140>
				SET_BIT(DDRB,pin[counter].pin);
    2324:	a7 e3       	ldi	r26, 0x37	; 55
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e7 e3       	ldi	r30, 0x37	; 55
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	c9 01       	movw	r24, r18
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	82 0f       	add	r24, r18
    233e:	93 1f       	adc	r25, r19
    2340:	fc 01       	movw	r30, r24
    2342:	e4 55       	subi	r30, 0x54	; 84
    2344:	fe 4f       	sbci	r31, 0xFE	; 254
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <Dio_init+0x136>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <Dio_init+0x132>
    235c:	84 2b       	or	r24, r20
    235e:	8c 93       	st	X, r24
    2360:	d7 c0       	rjmp	.+430    	; 0x2510 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRB,pin[counter].pin);
    2362:	a7 e3       	ldi	r26, 0x37	; 55
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e7 e3       	ldi	r30, 0x37	; 55
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	c9 01       	movw	r24, r18
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	fc 01       	movw	r30, r24
    2380:	e4 55       	subi	r30, 0x54	; 84
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	80 81       	ld	r24, Z
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <Dio_init+0x174>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <Dio_init+0x170>
    239a:	80 95       	com	r24
    239c:	84 23       	and	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	b7 c0       	rjmp	.+366    	; 0x2510 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_C)
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	c9 01       	movw	r24, r18
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	fc 01       	movw	r30, r24
    23b4:	e5 55       	subi	r30, 0x55	; 85
    23b6:	fe 4f       	sbci	r31, 0xFE	; 254
    23b8:	80 81       	ld	r24, Z
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <Dio_init+0x19e>
    23be:	4d c0       	rjmp	.+154    	; 0x245a <Dio_init+0x238>
		{
			if(pin[counter].direction == OUTPUT)
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	c9 01       	movw	r24, r18
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	82 0f       	add	r24, r18
    23ce:	93 1f       	adc	r25, r19
    23d0:	fc 01       	movw	r30, r24
    23d2:	e3 55       	subi	r30, 0x53	; 83
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	80 81       	ld	r24, Z
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	f9 f4       	brne	.+62     	; 0x241a <Dio_init+0x1f8>
				SET_BIT(DDRC,pin[counter].pin);
    23dc:	a4 e3       	ldi	r26, 0x34	; 52
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e4 e3       	ldi	r30, 0x34	; 52
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	c9 01       	movw	r24, r18
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	fc 01       	movw	r30, r24
    23fa:	e4 55       	subi	r30, 0x54	; 84
    23fc:	fe 4f       	sbci	r31, 0xFE	; 254
    23fe:	80 81       	ld	r24, Z
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 2e       	mov	r0, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <Dio_init+0x1ee>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	0a 94       	dec	r0
    2412:	e2 f7       	brpl	.-8      	; 0x240c <Dio_init+0x1ea>
    2414:	84 2b       	or	r24, r20
    2416:	8c 93       	st	X, r24
    2418:	7b c0       	rjmp	.+246    	; 0x2510 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRC,pin[counter].pin);
    241a:	a4 e3       	ldi	r26, 0x34	; 52
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e4 e3       	ldi	r30, 0x34	; 52
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	48 2f       	mov	r20, r24
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	c9 01       	movw	r24, r18
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	fc 01       	movw	r30, r24
    2438:	e4 55       	subi	r30, 0x54	; 84
    243a:	fe 4f       	sbci	r31, 0xFE	; 254
    243c:	80 81       	ld	r24, Z
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	02 2e       	mov	r0, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <Dio_init+0x22c>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <Dio_init+0x228>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	5b c0       	rjmp	.+182    	; 0x2510 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_D)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	c9 01       	movw	r24, r18
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	fc 01       	movw	r30, r24
    246c:	e5 55       	subi	r30, 0x55	; 85
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	80 81       	ld	r24, Z
    2472:	83 30       	cpi	r24, 0x03	; 3
    2474:	09 f0       	breq	.+2      	; 0x2478 <Dio_init+0x256>
    2476:	4c c0       	rjmp	.+152    	; 0x2510 <Dio_init+0x2ee>
		{
			if(pin[counter].direction == OUTPUT)
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	c9 01       	movw	r24, r18
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	fc 01       	movw	r30, r24
    248a:	e3 55       	subi	r30, 0x53	; 83
    248c:	fe 4f       	sbci	r31, 0xFE	; 254
    248e:	80 81       	ld	r24, Z
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	f9 f4       	brne	.+62     	; 0x24d2 <Dio_init+0x2b0>
				SET_BIT(DDRD,pin[counter].pin);
    2494:	a1 e3       	ldi	r26, 0x31	; 49
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e1 e3       	ldi	r30, 0x31	; 49
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	c9 01       	movw	r24, r18
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	fc 01       	movw	r30, r24
    24b2:	e4 55       	subi	r30, 0x54	; 84
    24b4:	fe 4f       	sbci	r31, 0xFE	; 254
    24b6:	80 81       	ld	r24, Z
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	02 2e       	mov	r0, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <Dio_init+0x2a6>
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <Dio_init+0x2a2>
    24cc:	84 2b       	or	r24, r20
    24ce:	8c 93       	st	X, r24
    24d0:	1f c0       	rjmp	.+62     	; 0x2510 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
    24d2:	a1 e3       	ldi	r26, 0x31	; 49
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e1 e3       	ldi	r30, 0x31	; 49
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	48 2f       	mov	r20, r24
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	c9 01       	movw	r24, r18
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	82 0f       	add	r24, r18
    24ec:	93 1f       	adc	r25, r19
    24ee:	fc 01       	movw	r30, r24
    24f0:	e4 55       	subi	r30, 0x54	; 84
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	80 81       	ld	r24, Z
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <Dio_init+0x2e4>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <Dio_init+0x2e0>
    250a:	80 95       	com	r24
    250c:	84 23       	and	r24, r20
    250e:	8c 93       	st	X, r24
extern Dio_pin_config pin[PIN_COUNT];

void Dio_init()
{
	uint8 counter=0;
	for(counter=0;counter<PIN_COUNT;counter++)
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	84 31       	cpi	r24, 0x14	; 20
    251a:	08 f4       	brcc	.+2      	; 0x251e <Dio_init+0x2fc>
    251c:	8a ce       	rjmp	.-748    	; 0x2232 <Dio_init+0x10>
				SET_BIT(DDRD,pin[counter].pin);
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
		}
	}
}
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <Dio_Write>:
void Dio_Write(channel_t ch,Dio_state_t state)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	00 d0       	rcall	.+0      	; 0x252c <Dio_Write+0x6>
    252c:	00 d0       	rcall	.+0      	; 0x252e <Dio_Write+0x8>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	6c 83       	std	Y+4, r22	; 0x04
	Dio_port_t port = ch / 8;
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	86 95       	lsr	r24
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	87 70       	andi	r24, 0x07	; 7
    2544:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	88 23       	and	r24, r24
    254a:	81 f5       	brne	.+96     	; 0x25ac <Dio_Write+0x86>
	{
		if(state == HIGH)
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	a1 f4       	brne	.+40     	; 0x257a <Dio_Write+0x54>
		{
			SET_BIT(PORTA,pin);
    2552:	ab e3       	ldi	r26, 0x3B	; 59
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <Dio_Write+0x4a>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <Dio_Write+0x46>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	b0 c0       	rjmp	.+352    	; 0x26da <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	88 23       	and	r24, r24
    257e:	09 f0       	breq	.+2      	; 0x2582 <Dio_Write+0x5c>
    2580:	ac c0       	rjmp	.+344    	; 0x26da <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTA,pin);
    2582:	ab e3       	ldi	r26, 0x3B	; 59
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	eb e3       	ldi	r30, 0x3B	; 59
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <Dio_Write+0x7a>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <Dio_Write+0x76>
    25a4:	80 95       	com	r24
    25a6:	84 23       	and	r24, r20
    25a8:	8c 93       	st	X, r24
    25aa:	97 c0       	rjmp	.+302    	; 0x26da <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_B)
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	81 f5       	brne	.+96     	; 0x2612 <Dio_Write+0xec>
	{
		if(state == HIGH)
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	a1 f4       	brne	.+40     	; 0x25e0 <Dio_Write+0xba>
		{
			SET_BIT(PORTB,pin);
    25b8:	a8 e3       	ldi	r26, 0x38	; 56
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e8 e3       	ldi	r30, 0x38	; 56
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	48 2f       	mov	r20, r24
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	02 2e       	mov	r0, r18
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <Dio_Write+0xb0>
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	0a 94       	dec	r0
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <Dio_Write+0xac>
    25da:	84 2b       	or	r24, r20
    25dc:	8c 93       	st	X, r24
    25de:	7d c0       	rjmp	.+250    	; 0x26da <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	88 23       	and	r24, r24
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <Dio_Write+0xc2>
    25e6:	79 c0       	rjmp	.+242    	; 0x26da <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTB,pin);
    25e8:	a8 e3       	ldi	r26, 0x38	; 56
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e8 e3       	ldi	r30, 0x38	; 56
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	48 2f       	mov	r20, r24
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 2e       	mov	r0, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <Dio_Write+0xe0>
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	0a 94       	dec	r0
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <Dio_Write+0xdc>
    260a:	80 95       	com	r24
    260c:	84 23       	and	r24, r20
    260e:	8c 93       	st	X, r24
    2610:	64 c0       	rjmp	.+200    	; 0x26da <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_C)
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	81 f5       	brne	.+96     	; 0x2678 <Dio_Write+0x152>
	{
		if(state == HIGH)
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	a1 f4       	brne	.+40     	; 0x2646 <Dio_Write+0x120>
		{
			SET_BIT(PORTC,pin);
    261e:	a5 e3       	ldi	r26, 0x35	; 53
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e3       	ldi	r30, 0x35	; 53
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 2e       	mov	r0, r18
    2636:	02 c0       	rjmp	.+4      	; 0x263c <Dio_Write+0x116>
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	0a 94       	dec	r0
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <Dio_Write+0x112>
    2640:	84 2b       	or	r24, r20
    2642:	8c 93       	st	X, r24
    2644:	4a c0       	rjmp	.+148    	; 0x26da <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	88 23       	and	r24, r24
    264a:	09 f0       	breq	.+2      	; 0x264e <Dio_Write+0x128>
    264c:	46 c0       	rjmp	.+140    	; 0x26da <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTC,pin);
    264e:	a5 e3       	ldi	r26, 0x35	; 53
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e5 e3       	ldi	r30, 0x35	; 53
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <Dio_Write+0x146>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <Dio_Write+0x142>
    2670:	80 95       	com	r24
    2672:	84 23       	and	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	31 c0       	rjmp	.+98     	; 0x26da <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_D)
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	83 30       	cpi	r24, 0x03	; 3
    267c:	71 f5       	brne	.+92     	; 0x26da <Dio_Write+0x1b4>
	{
		if(state == HIGH)
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	a1 f4       	brne	.+40     	; 0x26ac <Dio_Write+0x186>
		{
			SET_BIT(PORTD,pin);
    2684:	a2 e3       	ldi	r26, 0x32	; 50
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e2 e3       	ldi	r30, 0x32	; 50
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 2e       	mov	r0, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <Dio_Write+0x17c>
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <Dio_Write+0x178>
    26a6:	84 2b       	or	r24, r20
    26a8:	8c 93       	st	X, r24
    26aa:	17 c0       	rjmp	.+46     	; 0x26da <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	88 23       	and	r24, r24
    26b0:	a1 f4       	brne	.+40     	; 0x26da <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTD,pin);
    26b2:	a2 e3       	ldi	r26, 0x32	; 50
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e2 e3       	ldi	r30, 0x32	; 50
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	48 2f       	mov	r20, r24
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	02 2e       	mov	r0, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <Dio_Write+0x1aa>
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	0a 94       	dec	r0
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <Dio_Write+0x1a6>
    26d4:	80 95       	com	r24
    26d6:	84 23       	and	r24, r20
    26d8:	8c 93       	st	X, r24
		}
	}


}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <Dio_Pin_Toggle>:

void Dio_Pin_Toggle(channel_t ch){
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <Dio_Pin_Toggle+0x6>
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	8b 83       	std	Y+3, r24	; 0x03

	Dio_port_t port = ch / 8;
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	86 95       	lsr	r24
    26fa:	86 95       	lsr	r24
    26fc:	86 95       	lsr	r24
    26fe:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	87 70       	andi	r24, 0x07	; 7
    2704:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A)
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	88 23       	and	r24, r24
    270a:	a1 f4       	brne	.+40     	; 0x2734 <Dio_Pin_Toggle+0x4c>
	{
			TOGGLE_BIT(PORTA,pin);
    270c:	ab e3       	ldi	r26, 0x3B	; 59
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	eb e3       	ldi	r30, 0x3B	; 59
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <Dio_Pin_Toggle+0x42>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <Dio_Pin_Toggle+0x3e>
    272e:	84 27       	eor	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	44 c0       	rjmp	.+136    	; 0x27bc <Dio_Pin_Toggle+0xd4>

	}
	else if(port == PORT_B)
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	a1 f4       	brne	.+40     	; 0x2762 <Dio_Pin_Toggle+0x7a>
	{

			TOGGLE_BIT(PORTB,pin);
    273a:	a8 e3       	ldi	r26, 0x38	; 56
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e8 e3       	ldi	r30, 0x38	; 56
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	02 2e       	mov	r0, r18
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <Dio_Pin_Toggle+0x70>
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	0a 94       	dec	r0
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <Dio_Pin_Toggle+0x6c>
    275c:	84 27       	eor	r24, r20
    275e:	8c 93       	st	X, r24
    2760:	2d c0       	rjmp	.+90     	; 0x27bc <Dio_Pin_Toggle+0xd4>

	}
	else if(port == PORT_C)
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	a1 f4       	brne	.+40     	; 0x2790 <Dio_Pin_Toggle+0xa8>
	{

			TOGGLE_BIT(PORTC,pin);
    2768:	a5 e3       	ldi	r26, 0x35	; 53
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e5 e3       	ldi	r30, 0x35	; 53
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	48 2f       	mov	r20, r24
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 2e       	mov	r0, r18
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <Dio_Pin_Toggle+0x9e>
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	0a 94       	dec	r0
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <Dio_Pin_Toggle+0x9a>
    278a:	84 27       	eor	r24, r20
    278c:	8c 93       	st	X, r24
    278e:	16 c0       	rjmp	.+44     	; 0x27bc <Dio_Pin_Toggle+0xd4>

	}
	else if(port == PORT_D)
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	83 30       	cpi	r24, 0x03	; 3
    2794:	99 f4       	brne	.+38     	; 0x27bc <Dio_Pin_Toggle+0xd4>
	{

			TOGGLE_BIT(PORTD,pin);
    2796:	a2 e3       	ldi	r26, 0x32	; 50
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e2 e3       	ldi	r30, 0x32	; 50
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	48 2f       	mov	r20, r24
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	02 2e       	mov	r0, r18
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <Dio_Pin_Toggle+0xcc>
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	0a 94       	dec	r0
    27b6:	e2 f7       	brpl	.-8      	; 0x27b0 <Dio_Pin_Toggle+0xc8>
    27b8:	84 27       	eor	r24, r20
    27ba:	8c 93       	st	X, r24
	}

}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <Dio_Read>:
Dio_state_t Dio_Read(channel_t ch)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <Dio_Read+0x6>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <Dio_Read+0x8>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	8c 83       	std	Y+4, r24	; 0x04
	Dio_state_t state = LOW;
    27d6:	1b 82       	std	Y+3, r1	; 0x03
	Dio_port_t port = ch / 8;
    27d8:	8c 81       	ldd	r24, Y+4	; 0x04
    27da:	86 95       	lsr	r24
    27dc:	86 95       	lsr	r24
    27de:	86 95       	lsr	r24
    27e0:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	87 70       	andi	r24, 0x07	; 7
    27e6:	89 83       	std	Y+1, r24	; 0x01
	if(port == PORT_A)
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	88 23       	and	r24, r24
    27ec:	91 f4       	brne	.+36     	; 0x2812 <Dio_Read+0x4a>
	{
		state = READ_BIT(PINA,pin);
    27ee:	e9 e3       	ldi	r30, 0x39	; 57
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a9 01       	movw	r20, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <Dio_Read+0x3e>
    2802:	55 95       	asr	r21
    2804:	47 95       	ror	r20
    2806:	8a 95       	dec	r24
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <Dio_Read+0x3a>
    280a:	ca 01       	movw	r24, r20
    280c:	81 70       	andi	r24, 0x01	; 1
    280e:	8b 83       	std	Y+3, r24	; 0x03
    2810:	3e c0       	rjmp	.+124    	; 0x288e <Dio_Read+0xc6>
	}
	else if(port == PORT_B)
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	91 f4       	brne	.+36     	; 0x283c <Dio_Read+0x74>
	{
		state = READ_BIT(PINB,pin);
    2818:	e6 e3       	ldi	r30, 0x36	; 54
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <Dio_Read+0x68>
    282c:	55 95       	asr	r21
    282e:	47 95       	ror	r20
    2830:	8a 95       	dec	r24
    2832:	e2 f7       	brpl	.-8      	; 0x282c <Dio_Read+0x64>
    2834:	ca 01       	movw	r24, r20
    2836:	81 70       	andi	r24, 0x01	; 1
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	29 c0       	rjmp	.+82     	; 0x288e <Dio_Read+0xc6>
	}
	else if(port == PORT_C)
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	91 f4       	brne	.+36     	; 0x2866 <Dio_Read+0x9e>
	{
		state = READ_BIT(PINC,pin);
    2842:	e3 e3       	ldi	r30, 0x33	; 51
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a9 01       	movw	r20, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <Dio_Read+0x92>
    2856:	55 95       	asr	r21
    2858:	47 95       	ror	r20
    285a:	8a 95       	dec	r24
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <Dio_Read+0x8e>
    285e:	ca 01       	movw	r24, r20
    2860:	81 70       	andi	r24, 0x01	; 1
    2862:	8b 83       	std	Y+3, r24	; 0x03
    2864:	14 c0       	rjmp	.+40     	; 0x288e <Dio_Read+0xc6>
	}
	else if(port == PORT_D)
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	89 f4       	brne	.+34     	; 0x288e <Dio_Read+0xc6>
	{
		state = READ_BIT(PIND,pin);
    286c:	e0 e3       	ldi	r30, 0x30	; 48
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a9 01       	movw	r20, r18
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <Dio_Read+0xbc>
    2880:	55 95       	asr	r21
    2882:	47 95       	ror	r20
    2884:	8a 95       	dec	r24
    2886:	e2 f7       	brpl	.-8      	; 0x2880 <Dio_Read+0xb8>
    2888:	ca 01       	movw	r24, r20
    288a:	81 70       	andi	r24, 0x01	; 1
    288c:	8b 83       	std	Y+3, r24	; 0x03
	}

	return state;
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <ADC_Init>:
 */

#include "adc.h"

static void (*ADC_InterruptHandler)(void)= NULL;
void ADC_Init() {
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
		#if ADC_VOLTAGE_REF == ADC_AREF_SOURCE
			CLEAR_BIT(ADMUX, REFS0);
    28a6:	a7 e2       	ldi	r26, 0x27	; 39
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e7 e2       	ldi	r30, 0x27	; 39
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8f 7b       	andi	r24, 0xBF	; 191
    28b2:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, REFS1);
    28b4:	a7 e2       	ldi	r26, 0x27	; 39
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e7 e2       	ldi	r30, 0x27	; 39
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8f 77       	andi	r24, 0x7F	; 127
    28c0:	8c 93       	st	X, r24
		#elif ADC_VOLTAGE_REF == 5_INTER_SOURCE
			SET_BIT(ADMUX,REFS0);
			SET_BIT(ADMUX,REFS1);
		#endif
		#if ADC_READ_ADJEST == ADC_RIGHT_ADJUST_READ
			CLEAR_BIT(ADMUX, ADLAR);
    28c2:	a7 e2       	ldi	r26, 0x27	; 39
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e2       	ldi	r30, 0x27	; 39
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7d       	andi	r24, 0xDF	; 223
    28ce:	8c 93       	st	X, r24
		#elif ADC_PRESCALER == ADC_PRESCALER_64
			CLEAR_BIT(SFIOR, ADTS0);
			SET_BIT(SFIOR, ADTS1);
			SET_BIT(SFIOR, ADTS2);
		#elif ADC_PRESCALER == ADC_PRESCALER_128
			SET_BIT(SFIOR, ADTS0);
    28d0:	a0 e5       	ldi	r26, 0x50	; 80
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e0 e5       	ldi	r30, 0x50	; 80
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	80 62       	ori	r24, 0x20	; 32
    28dc:	8c 93       	st	X, r24
			SET_BIT(SFIOR, ADTS1);
    28de:	a0 e5       	ldi	r26, 0x50	; 80
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e0 e5       	ldi	r30, 0x50	; 80
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8c 93       	st	X, r24
			SET_BIT(SFIOR, ADTS2);
    28ec:	a0 e5       	ldi	r26, 0x50	; 80
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e0 e5       	ldi	r30, 0x50	; 80
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	80 68       	ori	r24, 0x80	; 128
    28f8:	8c 93       	st	X, r24
		#endif

		CLEAR_BIT(ADCSRA, ADATE);
    28fa:	a6 e2       	ldi	r26, 0x26	; 38
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e6 e2       	ldi	r30, 0x26	; 38
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8f 7d       	andi	r24, 0xDF	; 223
    2906:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADEN);
    2908:	a6 e2       	ldi	r26, 0x26	; 38
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e6 e2       	ldi	r30, 0x26	; 38
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 68       	ori	r24, 0x80	; 128
    2914:	8c 93       	st	X, r24

}
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <ADC_Read>:
uint16 ADC_Read(ADC_chanel ch) {
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	00 d0       	rcall	.+0      	; 0x2922 <ADC_Read+0x6>
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ADC_Value=0;
    292a:	1a 82       	std	Y+2, r1	; 0x02
    292c:	19 82       	std	Y+1, r1	; 0x01
	ADMUX &=0xE0;
    292e:	a7 e2       	ldi	r26, 0x27	; 39
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e7 e2       	ldi	r30, 0x27	; 39
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 7e       	andi	r24, 0xE0	; 224
    293a:	8c 93       	st	X, r24
	ADMUX |=ch;
    293c:	a7 e2       	ldi	r26, 0x27	; 39
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e7 e2       	ldi	r30, 0x27	; 39
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	90 81       	ld	r25, Z
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	89 2b       	or	r24, r25
    294a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);
    294c:	a6 e2       	ldi	r26, 0x26	; 38
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e6 e2       	ldi	r30, 0x26	; 38
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	80 64       	ori	r24, 0x40	; 64
    2958:	8c 93       	st	X, r24
	while(0 == READ_BIT(ADCSRA, ADIF));
    295a:	e6 e2       	ldi	r30, 0x26	; 38
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	82 95       	swap	r24
    2962:	8f 70       	andi	r24, 0x0F	; 15
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	81 70       	andi	r24, 0x01	; 1
    296a:	90 70       	andi	r25, 0x00	; 0
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	a9 f3       	breq	.-22     	; 0x295a <ADC_Read+0x3e>
	SET_BIT(ADCSRA, ADIF);
    2970:	a6 e2       	ldi	r26, 0x26	; 38
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e6 e2       	ldi	r30, 0x26	; 38
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	80 61       	ori	r24, 0x10	; 16
    297c:	8c 93       	st	X, r24
#if ADC_READ_ADJEST == ADC_RIGHT_ADJUST_READ
	ADC_Value = ADCL;
    297e:	e4 e2       	ldi	r30, 0x24	; 36
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
	ADC_Value |=(ADCH<<8);
    298c:	e5 e2       	ldi	r30, 0x25	; 37
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	98 2f       	mov	r25, r24
    2998:	88 27       	eor	r24, r24
    299a:	9c 01       	movw	r18, r24
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	82 2b       	or	r24, r18
    29a2:	93 2b       	or	r25, r19
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
#elif ADC_READ_ADJEST == ADC_LEFT_ADJUST_READ
	ADC_Value = ADCH<<2;
	ADC_Value |=(ADCL>>6);
#endif

	return ADC_Value;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <ADC_Intrrupt_Enable>:



void ADC_Intrrupt_Enable(){
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(ADCSRA, ADIE);
    29c0:	a6 e2       	ldi	r26, 0x26	; 38
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e6 e2       	ldi	r30, 0x26	; 38
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	88 60       	ori	r24, 0x08	; 8
    29cc:	8c 93       	st	X, r24
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <ADC_Intrrupt_Disable>:


void ADC_Intrrupt_Disable(){
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(ADCSRA, ADIE);
    29dc:	a6 e2       	ldi	r26, 0x26	; 38
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e6 e2       	ldi	r30, 0x26	; 38
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	87 7f       	andi	r24, 0xF7	; 247
    29e8:	8c 93       	st	X, r24
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <ADC_SetCallBack>:
/**
 *
 * @param ptfHandler
 */
void ADC_SetCallBack(void (*ptfHandler)(void))
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <ADC_SetCallBack+0x6>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
	ADC_InterruptHandler = ptfHandler;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	90 93 5c 02 	sts	0x025C, r25
    2a06:	80 93 5b 02 	sts	0x025B, r24
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <__vector_16>:
/**
 *
 *
 */
ISR(ADC_vect)
{
    2a14:	1f 92       	push	r1
    2a16:	0f 92       	push	r0
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	0f 92       	push	r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	2f 93       	push	r18
    2a20:	3f 93       	push	r19
    2a22:	4f 93       	push	r20
    2a24:	5f 93       	push	r21
    2a26:	6f 93       	push	r22
    2a28:	7f 93       	push	r23
    2a2a:	8f 93       	push	r24
    2a2c:	9f 93       	push	r25
    2a2e:	af 93       	push	r26
    2a30:	bf 93       	push	r27
    2a32:	ef 93       	push	r30
    2a34:	ff 93       	push	r31
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_InterruptHandler)
    2a3e:	80 91 5b 02 	lds	r24, 0x025B
    2a42:	90 91 5c 02 	lds	r25, 0x025C
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	29 f0       	breq	.+10     	; 0x2a54 <__vector_16+0x40>
		ADC_InterruptHandler();
    2a4a:	e0 91 5b 02 	lds	r30, 0x025B
    2a4e:	f0 91 5c 02 	lds	r31, 0x025C
    2a52:	09 95       	icall
}
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	bf 91       	pop	r27
    2a5e:	af 91       	pop	r26
    2a60:	9f 91       	pop	r25
    2a62:	8f 91       	pop	r24
    2a64:	7f 91       	pop	r23
    2a66:	6f 91       	pop	r22
    2a68:	5f 91       	pop	r21
    2a6a:	4f 91       	pop	r20
    2a6c:	3f 91       	pop	r19
    2a6e:	2f 91       	pop	r18
    2a70:	0f 90       	pop	r0
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	0f 90       	pop	r0
    2a76:	1f 90       	pop	r1
    2a78:	18 95       	reti

00002a7a <Ultrasonic_init>:
#include "ultrasonic.h"
static volatile uint16 ut1 ,ut2,uflag,c;
static void Func_ICU();
static void TMR_OVR();
void Ultrasonic_init()
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(TMR1_PWM_FAST_MODE_OCR1A,OCRA1_DISCONNECTED,OCRB1_NON_INVERTING);
    2a82:	8f e0       	ldi	r24, 0x0F	; 15
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	40 e2       	ldi	r20, 0x20	; 32
    2a88:	0e 94 7f 09 	call	0x12fe	; 0x12fe <Timer1_Init>
	OCR1A=20000;
    2a8c:	ea e4       	ldi	r30, 0x4A	; 74
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 e2       	ldi	r24, 0x20	; 32
    2a92:	9e e4       	ldi	r25, 0x4E	; 78
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
	Timer1_ICU_SetCallBack(Func_ICU);
    2a98:	8f e7       	ldi	r24, 0x7F	; 127
    2a9a:	96 e1       	ldi	r25, 0x16	; 22
    2a9c:	0e 94 a6 0b 	call	0x174c	; 0x174c <Timer1_ICU_SetCallBack>
	Timer1_SetCallBack_COMPA(TMR_OVR);
    2aa0:	8e eb       	ldi	r24, 0xBE	; 190
    2aa2:	96 e1       	ldi	r25, 0x16	; 22
    2aa4:	0e 94 31 0b 	call	0x1662	; 0x1662 <Timer1_SetCallBack_COMPA>
	TMR1_Interrupt_COMPA_enable();
    2aa8:	0e 94 23 0b 	call	0x1646	; 0x1646 <TMR1_Interrupt_COMPA_enable>
}
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <UltrasonicReadDistance>:
uint8 UltrasonicReadDistance(Ultrasonic_t* sonic)
{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	6d 97       	sbiw	r28, 0x1d	; 29
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	9d 8f       	std	Y+29, r25	; 0x1d
    2acc:	8c 8f       	std	Y+28, r24	; 0x1c
	uint8 distance=0;
    2ace:	1b 8e       	std	Y+27, r1	; 0x1b
	uint16 time=0;
    2ad0:	1a 8e       	std	Y+26, r1	; 0x1a
    2ad2:	19 8e       	std	Y+25, r1	; 0x19
	c=0;
    2ad4:	10 92 64 02 	sts	0x0264, r1
    2ad8:	10 92 63 02 	sts	0x0263, r1
	uflag=0;
    2adc:	10 92 62 02 	sts	0x0262, r1
    2ae0:	10 92 61 02 	sts	0x0261, r1
	TCNT1=0;
    2ae4:	ec e4       	ldi	r30, 0x4C	; 76
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	11 82       	std	Z+1, r1	; 0x01
    2aea:	10 82       	st	Z, r1
	Dio_Write(PORTB_0,HIGH);
    2aec:	88 e0       	ldi	r24, 0x08	; 8
    2aee:	61 e0       	ldi	r22, 0x01	; 1
    2af0:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a0 e2       	ldi	r26, 0x20	; 32
    2afa:	b1 e4       	ldi	r27, 0x41	; 65
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	9e 8b       	std	Y+22, r25	; 0x16
    2b00:	af 8b       	std	Y+23, r26	; 0x17
    2b02:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	2b ea       	ldi	r18, 0xAB	; 171
    2b0e:	3a ea       	ldi	r19, 0xAA	; 170
    2b10:	4a e2       	ldi	r20, 0x2A	; 42
    2b12:	50 e4       	ldi	r21, 0x40	; 64
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	89 8b       	std	Y+17, r24	; 0x11
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	ab 8b       	std	Y+19, r26	; 0x13
    2b22:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b24:	69 89       	ldd	r22, Y+17	; 0x11
    2b26:	7a 89       	ldd	r23, Y+18	; 0x12
    2b28:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	5f e3       	ldi	r21, 0x3F	; 63
    2b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b38:	88 23       	and	r24, r24
    2b3a:	1c f4       	brge	.+6      	; 0x2b42 <UltrasonicReadDistance+0x90>
		__ticks = 1;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	88 8b       	std	Y+16, r24	; 0x10
    2b40:	91 c0       	rjmp	.+290    	; 0x2c64 <UltrasonicReadDistance+0x1b2>
	else if (__tmp > 255)
    2b42:	69 89       	ldd	r22, Y+17	; 0x11
    2b44:	7a 89       	ldd	r23, Y+18	; 0x12
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	53 e4       	ldi	r21, 0x43	; 67
    2b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	0c f0       	brlt	.+2      	; 0x2b5c <UltrasonicReadDistance+0xaa>
    2b5a:	7b c0       	rjmp	.+246    	; 0x2c52 <UltrasonicReadDistance+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    2b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b60:	8f 89       	ldd	r24, Y+23	; 0x17
    2b62:	98 8d       	ldd	r25, Y+24	; 0x18
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a e7       	ldi	r20, 0x7A	; 122
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8c 87       	std	Y+12, r24	; 0x0c
    2b76:	9d 87       	std	Y+13, r25	; 0x0d
    2b78:	ae 87       	std	Y+14, r26	; 0x0e
    2b7a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a ef       	ldi	r20, 0xFA	; 250
    2b8a:	54 e4       	ldi	r21, 0x44	; 68
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	88 87       	std	Y+8, r24	; 0x08
    2b96:	99 87       	std	Y+9, r25	; 0x09
    2b98:	aa 87       	std	Y+10, r26	; 0x0a
    2b9a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b9c:	68 85       	ldd	r22, Y+8	; 0x08
    2b9e:	79 85       	ldd	r23, Y+9	; 0x09
    2ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <UltrasonicReadDistance+0x10c>
		__ticks = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9f 83       	std	Y+7, r25	; 0x07
    2bba:	8e 83       	std	Y+6, r24	; 0x06
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <UltrasonicReadDistance+0x18a>
	else if (__tmp > 65535)
    2bbe:	68 85       	ldd	r22, Y+8	; 0x08
    2bc0:	79 85       	ldd	r23, Y+9	; 0x09
    2bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	4f e7       	ldi	r20, 0x7F	; 127
    2bcc:	57 e4       	ldi	r21, 0x47	; 71
    2bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	4c f5       	brge	.+82     	; 0x2c28 <UltrasonicReadDistance+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bd8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9f 83       	std	Y+7, r25	; 0x07
    2bfc:	8e 83       	std	Y+6, r24	; 0x06
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <UltrasonicReadDistance+0x16c>
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9d 83       	std	Y+5, r25	; 0x05
    2c06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c08:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <UltrasonicReadDistance+0x15a>
    2c10:	9d 83       	std	Y+5, r25	; 0x05
    2c12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8e 81       	ldd	r24, Y+6	; 0x06
    2c16:	9f 81       	ldd	r25, Y+7	; 0x07
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9f 83       	std	Y+7, r25	; 0x07
    2c1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c20:	9f 81       	ldd	r25, Y+7	; 0x07
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <UltrasonicReadDistance+0x14e>
    2c26:	24 c0       	rjmp	.+72     	; 0x2c70 <UltrasonicReadDistance+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	68 85       	ldd	r22, Y+8	; 0x08
    2c2a:	79 85       	ldd	r23, Y+9	; 0x09
    2c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9f 83       	std	Y+7, r25	; 0x07
    2c3a:	8e 83       	std	Y+6, r24	; 0x06
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	9b 83       	std	Y+3, r25	; 0x03
    2c42:	8a 83       	std	Y+2, r24	; 0x02
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <UltrasonicReadDistance+0x196>
    2c4c:	9b 83       	std	Y+3, r25	; 0x03
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <UltrasonicReadDistance+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c52:	69 89       	ldd	r22, Y+17	; 0x11
    2c54:	7a 89       	ldd	r23, Y+18	; 0x12
    2c56:	8b 89       	ldd	r24, Y+19	; 0x13
    2c58:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	88 8b       	std	Y+16, r24	; 0x10
    2c64:	88 89       	ldd	r24, Y+16	; 0x10
    2c66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	8a 95       	dec	r24
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <UltrasonicReadDistance+0x1b8>
    2c6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	Dio_Write(PORTB_0,LOW);
    2c70:	88 e0       	ldi	r24, 0x08	; 8
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Timer1_InputCpetureEdge(RISING_EDGE);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
	Timer1_ICU_InterruptEnable();
    2c7e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Timer1_ICU_InterruptEnable>
	while(uflag<2);
    2c82:	80 91 61 02 	lds	r24, 0x0261
    2c86:	90 91 62 02 	lds	r25, 0x0262
    2c8a:	82 30       	cpi	r24, 0x02	; 2
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	c8 f3       	brcs	.-14     	; 0x2c82 <UltrasonicReadDistance+0x1d0>
	time=ut2-ut1 + ((uint32) 65535*c);
    2c90:	20 91 5f 02 	lds	r18, 0x025F
    2c94:	30 91 60 02 	lds	r19, 0x0260
    2c98:	80 91 5d 02 	lds	r24, 0x025D
    2c9c:	90 91 5e 02 	lds	r25, 0x025E
    2ca0:	89 01       	movw	r16, r18
    2ca2:	08 1b       	sub	r16, r24
    2ca4:	19 0b       	sbc	r17, r25
    2ca6:	80 91 63 02 	lds	r24, 0x0263
    2caa:	90 91 64 02 	lds	r25, 0x0264
    2cae:	cc 01       	movw	r24, r24
    2cb0:	a0 e0       	ldi	r26, 0x00	; 0
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	2f ef       	ldi	r18, 0xFF	; 255
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 9d 24 	call	0x493a	; 0x493a <__mulsi3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	80 0f       	add	r24, r16
    2cca:	91 1f       	adc	r25, r17
    2ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cce:	89 8f       	std	Y+25, r24	; 0x19
	distance=time/58;
    2cd0:	89 8d       	ldd	r24, Y+25	; 0x19
    2cd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cd4:	2a e3       	ldi	r18, 0x3A	; 58
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	b9 01       	movw	r22, r18
    2cda:	0e 94 bc 24 	call	0x4978	; 0x4978 <__udivmodhi4>
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8b 8f       	std	Y+27, r24	; 0x1b
	Timer1_ICU_InterruptDisnable();
    2ce2:	0e 94 98 0b 	call	0x1730	; 0x1730 <Timer1_ICU_InterruptDisnable>
	return distance;
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    2ce8:	6d 96       	adiw	r28, 0x1d	; 29
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	08 95       	ret

00002cfe <Func_ICU>:
static void Func_ICU()
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
	if(uflag==0)
    2d06:	80 91 61 02 	lds	r24, 0x0261
    2d0a:	90 91 62 02 	lds	r25, 0x0262
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	b1 f4       	brne	.+44     	; 0x2d3e <Func_ICU+0x40>
	{
		c=0;
    2d12:	10 92 64 02 	sts	0x0264, r1
    2d16:	10 92 63 02 	sts	0x0263, r1
		ut1=ICR1;
    2d1a:	e6 e4       	ldi	r30, 0x46	; 70
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	90 93 5e 02 	sts	0x025E, r25
    2d26:	80 93 5d 02 	sts	0x025D, r24
		uflag=1;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	90 93 62 02 	sts	0x0262, r25
    2d32:	80 93 61 02 	sts	0x0261, r24
		Timer1_InputCpetureEdge(FALLING_EDGE);
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
    2d3c:	1c c0       	rjmp	.+56     	; 0x2d76 <Func_ICU+0x78>

	}
	else if(uflag == 1)
    2d3e:	80 91 61 02 	lds	r24, 0x0261
    2d42:	90 91 62 02 	lds	r25, 0x0262
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	91 05       	cpc	r25, r1
    2d4a:	a9 f4       	brne	.+42     	; 0x2d76 <Func_ICU+0x78>
	{
		ut2=ICR1;
    2d4c:	e6 e4       	ldi	r30, 0x46	; 70
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	90 93 60 02 	sts	0x0260, r25
    2d58:	80 93 5f 02 	sts	0x025F, r24
		uflag=2;
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	90 93 62 02 	sts	0x0262, r25
    2d64:	80 93 61 02 	sts	0x0261, r24
		Timer1_InputCpetureEdge(RISING_EDGE);
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer1_InputCpetureEdge>
		Timer1_ICU_InterruptDisnable();
    2d6e:	0e 94 98 0b 	call	0x1730	; 0x1730 <Timer1_ICU_InterruptDisnable>
		TMR1_Interrupt_COMPA_Disable();
    2d72:	0e 94 43 0b 	call	0x1686	; 0x1686 <TMR1_Interrupt_COMPA_Disable>

	}
}
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <TMR_OVR>:
static void TMR_OVR()
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
	c++;
    2d84:	80 91 63 02 	lds	r24, 0x0263
    2d88:	90 91 64 02 	lds	r25, 0x0264
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	90 93 64 02 	sts	0x0264, r25
    2d92:	80 93 63 02 	sts	0x0263, r24
}
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <SevSegment_Display_Number>:
 *      Author: Mahmoud Abdelmoniem
 *
 */

#include "SevSegment.h"
void SevSegment_Display_Number(uint8 number){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	0f 92       	push	r0
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	89 83       	std	Y+1, r24	; 0x01

#if SEGMENT_TYPE == COMMON_CATHODE
	Dio_Write(SEV_PIN1, READ_BIT(number,0));
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	98 2f       	mov	r25, r24
    2dac:	91 70       	andi	r25, 0x01	; 1
    2dae:	80 e1       	ldi	r24, 0x10	; 16
    2db0:	69 2f       	mov	r22, r25
    2db2:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(SEV_PIN2, READ_BIT(number,1));
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	86 95       	lsr	r24
    2dba:	98 2f       	mov	r25, r24
    2dbc:	91 70       	andi	r25, 0x01	; 1
    2dbe:	81 e1       	ldi	r24, 0x11	; 17
    2dc0:	69 2f       	mov	r22, r25
    2dc2:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(SEV_PIN3, READ_BIT(number,2));
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	86 95       	lsr	r24
    2dca:	86 95       	lsr	r24
    2dcc:	98 2f       	mov	r25, r24
    2dce:	91 70       	andi	r25, 0x01	; 1
    2dd0:	82 e1       	ldi	r24, 0x12	; 18
    2dd2:	69 2f       	mov	r22, r25
    2dd4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(SEV_PIN4, READ_BIT(number,3));
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	86 95       	lsr	r24
    2ddc:	86 95       	lsr	r24
    2dde:	86 95       	lsr	r24
    2de0:	98 2f       	mov	r25, r24
    2de2:	91 70       	andi	r25, 0x01	; 1
    2de4:	83 e1       	ldi	r24, 0x13	; 19
    2de6:	69 2f       	mov	r22, r25
    2de8:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(SEV_PIN1, (READ_BIT(number,0))^1);
	Dio_Write(SEV_PIN2, (READ_BIT(number,1))^1);
	Dio_Write(SEV_PIN3, (READ_BIT(number,2))^1);
	Dio_Write(SEV_PIN4, (READ_BIT(number,3))^1);
#endif
}
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <SevSegment_Display_Counter>:

void SevSegment_Display_Counter(uint8 counterUP_DOWN,uint16 delay)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	a1 97       	sbiw	r28, 0x21	; 33
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	8f 8f       	std	Y+31, r24	; 0x1f
    2e0a:	79 a3       	std	Y+33, r23	; 0x21
    2e0c:	68 a3       	std	Y+32, r22	; 0x20
	if(COUNTER_UP == counterUP_DOWN)
    2e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <SevSegment_Display_Counter+0x22>
    2e14:	86 c0       	rjmp	.+268    	; 0x2f22 <SevSegment_Display_Counter+0x12e>
	{
		for(uint8 counter =0;counter<10;counter++)
    2e16:	1e 8e       	std	Y+30, r1	; 0x1e
    2e18:	7f c0       	rjmp	.+254    	; 0x2f18 <SevSegment_Display_Counter+0x124>
		{
			SevSegment_Display_Number(counter);
    2e1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e1c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <SevSegment_Display_Number>
			_delay_ms(delay);
    2e20:	88 a1       	ldd	r24, Y+32	; 0x20
    2e22:	99 a1       	ldd	r25, Y+33	; 0x21
    2e24:	cc 01       	movw	r24, r24
    2e26:	a0 e0       	ldi	r26, 0x00	; 0
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	89 8f       	std	Y+25, r24	; 0x19
    2e38:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a ef       	ldi	r20, 0xFA	; 250
    2e4c:	54 e4       	ldi	r21, 0x44	; 68
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8d 8b       	std	Y+21, r24	; 0x15
    2e58:	9e 8b       	std	Y+22, r25	; 0x16
    2e5a:	af 8b       	std	Y+23, r26	; 0x17
    2e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <SevSegment_Display_Counter+0x8c>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <SevSegment_Display_Counter+0x10a>
	else if (__tmp > 65535)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <SevSegment_Display_Counter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	69 8d       	ldd	r22, Y+25	; 0x19
    2e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <SevSegment_Display_Counter+0xec>
    2ec2:	88 ec       	ldi	r24, 0xC8	; 200
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9a 8b       	std	Y+18, r25	; 0x12
    2ec8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eca:	89 89       	ldd	r24, Y+17	; 0x11
    2ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <SevSegment_Display_Counter+0xda>
    2ed2:	9a 8b       	std	Y+18, r25	; 0x12
    2ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <SevSegment_Display_Counter+0xce>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <SevSegment_Display_Counter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	8b 89       	ldd	r24, Y+19	; 0x13
    2f00:	9c 89       	ldd	r25, Y+20	; 0x14
    2f02:	98 8b       	std	Y+16, r25	; 0x10
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	98 89       	ldd	r25, Y+16	; 0x10
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <SevSegment_Display_Counter+0x116>
    2f0e:	98 8b       	std	Y+16, r25	; 0x10
    2f10:	8f 87       	std	Y+15, r24	; 0x0f

void SevSegment_Display_Counter(uint8 counterUP_DOWN,uint16 delay)
{
	if(COUNTER_UP == counterUP_DOWN)
	{
		for(uint8 counter =0;counter<10;counter++)
    2f12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f14:	8f 5f       	subi	r24, 0xFF	; 255
    2f16:	8e 8f       	std	Y+30, r24	; 0x1e
    2f18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f1a:	8a 30       	cpi	r24, 0x0A	; 10
    2f1c:	08 f4       	brcc	.+2      	; 0x2f20 <SevSegment_Display_Counter+0x12c>
    2f1e:	7d cf       	rjmp	.-262    	; 0x2e1a <SevSegment_Display_Counter+0x26>
    2f20:	86 c0       	rjmp	.+268    	; 0x302e <SevSegment_Display_Counter+0x23a>
		{
			SevSegment_Display_Number(counter);
			_delay_ms(delay);
		}
	}
	else if(COUNTER_DOWN == counterUP_DOWN)
    2f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f24:	88 23       	and	r24, r24
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <SevSegment_Display_Counter+0x136>
    2f28:	82 c0       	rjmp	.+260    	; 0x302e <SevSegment_Display_Counter+0x23a>
	{
		for(uint8 counter =9;counter>=0;counter--)
    2f2a:	89 e0       	ldi	r24, 0x09	; 9
    2f2c:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			SevSegment_Display_Number(counter);
    2f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f30:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <SevSegment_Display_Number>
			_delay_ms(delay);
    2f34:	88 a1       	ldd	r24, Y+32	; 0x20
    2f36:	99 a1       	ldd	r25, Y+33	; 0x21
    2f38:	cc 01       	movw	r24, r24
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8b 87       	std	Y+11, r24	; 0x0b
    2f4c:	9c 87       	std	Y+12, r25	; 0x0c
    2f4e:	ad 87       	std	Y+13, r26	; 0x0d
    2f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	8f 83       	std	Y+7, r24	; 0x07
    2f6c:	98 87       	std	Y+8, r25	; 0x08
    2f6e:	a9 87       	std	Y+9, r26	; 0x09
    2f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f72:	6f 81       	ldd	r22, Y+7	; 0x07
    2f74:	78 85       	ldd	r23, Y+8	; 0x08
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	5f e3       	ldi	r21, 0x3F	; 63
    2f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f86:	88 23       	and	r24, r24
    2f88:	2c f4       	brge	.+10     	; 0x2f94 <SevSegment_Display_Counter+0x1a0>
		__ticks = 1;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	3f c0       	rjmp	.+126    	; 0x3012 <SevSegment_Display_Counter+0x21e>
	else if (__tmp > 65535)
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	57 e4       	ldi	r21, 0x47	; 71
    2fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa8:	18 16       	cp	r1, r24
    2faa:	4c f5       	brge	.+82     	; 0x2ffe <SevSegment_Display_Counter+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	0f c0       	rjmp	.+30     	; 0x2ff4 <SevSegment_Display_Counter+0x200>
    2fd6:	88 ec       	ldi	r24, 0xC8	; 200
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9c 83       	std	Y+4, r25	; 0x04
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <SevSegment_Display_Counter+0x1ee>
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	69 f7       	brne	.-38     	; 0x2fd6 <SevSegment_Display_Counter+0x1e2>
    2ffc:	14 c0       	rjmp	.+40     	; 0x3026 <SevSegment_Display_Counter+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    3000:	78 85       	ldd	r23, Y+8	; 0x08
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <SevSegment_Display_Counter+0x22a>
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(delay);
		}
	}
	else if(COUNTER_DOWN == counterUP_DOWN)
	{
		for(uint8 counter =9;counter>=0;counter--)
    3026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3028:	81 50       	subi	r24, 0x01	; 1
    302a:	8d 8f       	std	Y+29, r24	; 0x1d
    302c:	80 cf       	rjmp	.-256    	; 0x2f2e <SevSegment_Display_Counter+0x13a>
		{
			SevSegment_Display_Number(counter);
			_delay_ms(delay);
		}
	}
}
    302e:	a1 96       	adiw	r28, 0x21	; 33
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <Servo_angle>:
#include "../../MCAL/Timer0/timer0.h"


volatile uint8 counter=0;

void Servo_angle(uint8 angle){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	0f 92       	push	r0
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	89 83       	std	Y+1, r24	; 0x01

	if(angle==0)
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	88 23       	and	r24, r24
    3050:	39 f4       	brne	.+14     	; 0x3060 <Servo_angle+0x20>
	{
		OCR1B=1000;
    3052:	e8 e4       	ldi	r30, 0x48	; 72
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	88 ee       	ldi	r24, 0xE8	; 232
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	80 83       	st	Z, r24
    305e:	18 c0       	rjmp	.+48     	; 0x3090 <Servo_angle+0x50>
	}
	else if(angle==180)
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	84 3b       	cpi	r24, 0xB4	; 180
    3064:	39 f4       	brne	.+14     	; 0x3074 <Servo_angle+0x34>
	{
		OCR1B=2000;
    3066:	e8 e4       	ldi	r30, 0x48	; 72
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 ed       	ldi	r24, 0xD0	; 208
    306c:	97 e0       	ldi	r25, 0x07	; 7
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	0e c0       	rjmp	.+28     	; 0x3090 <Servo_angle+0x50>
	}
	else if(angle==90)
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	8a 35       	cpi	r24, 0x5A	; 90
    3078:	39 f4       	brne	.+14     	; 0x3088 <Servo_angle+0x48>
	{
		OCR1B = 1500;
    307a:	e8 e4       	ldi	r30, 0x48	; 72
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	8c ed       	ldi	r24, 0xDC	; 220
    3080:	95 e0       	ldi	r25, 0x05	; 5
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
    3086:	04 c0       	rjmp	.+8      	; 0x3090 <Servo_angle+0x50>
	}
	else
	{
		OCR1B = 0;
    3088:	e8 e4       	ldi	r30, 0x48	; 72
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	11 82       	std	Z+1, r1	; 0x01
    308e:	10 82       	st	Z, r1
	}
}
    3090:	0f 90       	pop	r0
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <LCD_Init>:
#include "lcd.h"

static void Trigger_Enable();
static void Set_Cursor_Pos(uint8 row,uint8 column);
void LCD_Init(void)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	2e 97       	sbiw	r28, 0x0e	; 14
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 ea       	ldi	r26, 0xA0	; 160
    30b2:	b1 e4       	ldi	r27, 0x41	; 65
    30b4:	8b 87       	std	Y+11, r24	; 0x0b
    30b6:	9c 87       	std	Y+12, r25	; 0x0c
    30b8:	ad 87       	std	Y+13, r26	; 0x0d
    30ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30be:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4a ef       	ldi	r20, 0xFA	; 250
    30ca:	54 e4       	ldi	r21, 0x44	; 68
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8f 83       	std	Y+7, r24	; 0x07
    30d6:	98 87       	std	Y+8, r25	; 0x08
    30d8:	a9 87       	std	Y+9, r26	; 0x09
    30da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	2c f4       	brge	.+10     	; 0x30fe <LCD_Init+0x66>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	3f c0       	rjmp	.+126    	; 0x317c <LCD_Init+0xe4>
	else if (__tmp > 65535)
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	4c f5       	brge	.+82     	; 0x3168 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3116:	6b 85       	ldd	r22, Y+11	; 0x0b
    3118:	7c 85       	ldd	r23, Y+12	; 0x0c
    311a:	8d 85       	ldd	r24, Y+13	; 0x0d
    311c:	9e 85       	ldd	r25, Y+14	; 0x0e
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e2       	ldi	r20, 0x20	; 32
    3124:	51 e4       	ldi	r21, 0x41	; 65
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9e 83       	std	Y+6, r25	; 0x06
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	0f c0       	rjmp	.+30     	; 0x315e <LCD_Init+0xc6>
    3140:	88 ec       	ldi	r24, 0xC8	; 200
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	9c 81       	ldd	r25, Y+4	; 0x04
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <LCD_Init+0xb4>
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	69 f7       	brne	.-38     	; 0x3140 <LCD_Init+0xa8>
    3166:	14 c0       	rjmp	.+40     	; 0x3190 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_Init+0xf0>
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_Send_Command(0x33);
    3190:	83 e3       	ldi	r24, 0x33	; 51
    3192:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(0x32);
    3196:	82 e3       	ldi	r24, 0x32	; 50
    3198:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(_LCD_4BIT_MODE_2_LINE);
    319c:	88 e2       	ldi	r24, 0x28	; 40
    319e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(_LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    31a2:	8c e0       	ldi	r24, 0x0C	; 12
    31a4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
    31a8:	86 e0       	ldi	r24, 0x06	; 6
    31aa:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(_LCD_DDRAM_START);
    31ae:	80 e8       	ldi	r24, 0x80	; 128
    31b0:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	LCD_Send_Command(_LCD_CLEAR);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
}
    31ba:	2e 96       	adiw	r28, 0x0e	; 14
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, LOW);
    31d8:	89 e0       	ldi	r24, 0x09	; 9
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(RW, LOW);
    31e0:	8a e0       	ldi	r24, 0x0A	; 10
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>


	(READ_BIT(command,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <LCD_Send_Command+0x2c>
    31ee:	84 e0       	ldi	r24, 0x04	; 4
    31f0:	61 e0       	ldi	r22, 0x01	; 1
    31f2:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    31f6:	04 c0       	rjmp	.+8      	; 0x3200 <LCD_Send_Command+0x34>
    31f8:	84 e0       	ldi	r24, 0x04	; 4
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	82 95       	swap	r24
    3204:	86 95       	lsr	r24
    3206:	86 95       	lsr	r24
    3208:	83 70       	andi	r24, 0x03	; 3
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	81 70       	andi	r24, 0x01	; 1
    3210:	90 70       	andi	r25, 0x00	; 0
    3212:	88 23       	and	r24, r24
    3214:	29 f0       	breq	.+10     	; 0x3220 <LCD_Send_Command+0x54>
    3216:	85 e0       	ldi	r24, 0x05	; 5
    3218:	61 e0       	ldi	r22, 0x01	; 1
    321a:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <LCD_Send_Command+0x5c>
    3220:	85 e0       	ldi	r24, 0x05	; 5
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	82 95       	swap	r24
    322c:	86 95       	lsr	r24
    322e:	87 70       	andi	r24, 0x07	; 7
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	81 70       	andi	r24, 0x01	; 1
    3236:	90 70       	andi	r25, 0x00	; 0
    3238:	88 23       	and	r24, r24
    323a:	29 f0       	breq	.+10     	; 0x3246 <LCD_Send_Command+0x7a>
    323c:	86 e0       	ldi	r24, 0x06	; 6
    323e:	61 e0       	ldi	r22, 0x01	; 1
    3240:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3244:	04 c0       	rjmp	.+8      	; 0x324e <LCD_Send_Command+0x82>
    3246:	86 e0       	ldi	r24, 0x06	; 6
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	82 95       	swap	r24
    3252:	8f 70       	andi	r24, 0x0F	; 15
    3254:	88 2f       	mov	r24, r24
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	81 70       	andi	r24, 0x01	; 1
    325a:	90 70       	andi	r25, 0x00	; 0
    325c:	88 23       	and	r24, r24
    325e:	29 f0       	breq	.+10     	; 0x326a <LCD_Send_Command+0x9e>
    3260:	87 e0       	ldi	r24, 0x07	; 7
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3268:	04 c0       	rjmp	.+8      	; 0x3272 <LCD_Send_Command+0xa6>
    326a:	87 e0       	ldi	r24, 0x07	; 7
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    3272:	0e 94 46 1b 	call	0x368c	; 0x368c <Trigger_Enable>
	(READ_BIT(command,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	86 95       	lsr	r24
    327a:	86 95       	lsr	r24
    327c:	86 95       	lsr	r24
    327e:	88 2f       	mov	r24, r24
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	81 70       	andi	r24, 0x01	; 1
    3284:	90 70       	andi	r25, 0x00	; 0
    3286:	88 23       	and	r24, r24
    3288:	29 f0       	breq	.+10     	; 0x3294 <LCD_Send_Command+0xc8>
    328a:	84 e0       	ldi	r24, 0x04	; 4
    328c:	61 e0       	ldi	r22, 0x01	; 1
    328e:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3292:	04 c0       	rjmp	.+8      	; 0x329c <LCD_Send_Command+0xd0>
    3294:	84 e0       	ldi	r24, 0x04	; 4
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	86 95       	lsr	r24
    32a0:	86 95       	lsr	r24
    32a2:	88 2f       	mov	r24, r24
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	81 70       	andi	r24, 0x01	; 1
    32a8:	90 70       	andi	r25, 0x00	; 0
    32aa:	88 23       	and	r24, r24
    32ac:	29 f0       	breq	.+10     	; 0x32b8 <LCD_Send_Command+0xec>
    32ae:	85 e0       	ldi	r24, 0x05	; 5
    32b0:	61 e0       	ldi	r22, 0x01	; 1
    32b2:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <LCD_Send_Command+0xf4>
    32b8:	85 e0       	ldi	r24, 0x05	; 5
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	86 95       	lsr	r24
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	81 70       	andi	r24, 0x01	; 1
    32ca:	90 70       	andi	r25, 0x00	; 0
    32cc:	88 23       	and	r24, r24
    32ce:	29 f0       	breq	.+10     	; 0x32da <LCD_Send_Command+0x10e>
    32d0:	86 e0       	ldi	r24, 0x06	; 6
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <LCD_Send_Command+0x116>
    32da:	86 e0       	ldi	r24, 0x06	; 6
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(command,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	81 70       	andi	r24, 0x01	; 1
    32ea:	90 70       	andi	r25, 0x00	; 0
    32ec:	88 23       	and	r24, r24
    32ee:	29 f0       	breq	.+10     	; 0x32fa <LCD_Send_Command+0x12e>
    32f0:	87 e0       	ldi	r24, 0x07	; 7
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    32f8:	04 c0       	rjmp	.+8      	; 0x3302 <LCD_Send_Command+0x136>
    32fa:	87 e0       	ldi	r24, 0x07	; 7
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    3302:	0e 94 46 1b 	call	0x368c	; 0x368c <Trigger_Enable>
}
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <LCD_Send_Char>:
void LCD_Send_Char(uint8 _char)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	0f 92       	push	r0
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, HIGH);
    331a:	89 e0       	ldi	r24, 0x09	; 9
    331c:	61 e0       	ldi	r22, 0x01	; 1
    331e:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(RW, LOW);
    3322:	8a e0       	ldi	r24, 0x0A	; 10
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>

	(READ_BIT(_char,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	88 23       	and	r24, r24
    332e:	2c f4       	brge	.+10     	; 0x333a <LCD_Send_Char+0x2c>
    3330:	84 e0       	ldi	r24, 0x04	; 4
    3332:	61 e0       	ldi	r22, 0x01	; 1
    3334:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3338:	04 c0       	rjmp	.+8      	; 0x3342 <LCD_Send_Char+0x34>
    333a:	84 e0       	ldi	r24, 0x04	; 4
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	82 95       	swap	r24
    3346:	86 95       	lsr	r24
    3348:	86 95       	lsr	r24
    334a:	83 70       	andi	r24, 0x03	; 3
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	81 70       	andi	r24, 0x01	; 1
    3352:	90 70       	andi	r25, 0x00	; 0
    3354:	88 23       	and	r24, r24
    3356:	29 f0       	breq	.+10     	; 0x3362 <LCD_Send_Char+0x54>
    3358:	85 e0       	ldi	r24, 0x05	; 5
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3360:	04 c0       	rjmp	.+8      	; 0x336a <LCD_Send_Char+0x5c>
    3362:	85 e0       	ldi	r24, 0x05	; 5
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	82 95       	swap	r24
    336e:	86 95       	lsr	r24
    3370:	87 70       	andi	r24, 0x07	; 7
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	81 70       	andi	r24, 0x01	; 1
    3378:	90 70       	andi	r25, 0x00	; 0
    337a:	88 23       	and	r24, r24
    337c:	29 f0       	breq	.+10     	; 0x3388 <LCD_Send_Char+0x7a>
    337e:	86 e0       	ldi	r24, 0x06	; 6
    3380:	61 e0       	ldi	r22, 0x01	; 1
    3382:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    3386:	04 c0       	rjmp	.+8      	; 0x3390 <LCD_Send_Char+0x82>
    3388:	86 e0       	ldi	r24, 0x06	; 6
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	82 95       	swap	r24
    3394:	8f 70       	andi	r24, 0x0F	; 15
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	81 70       	andi	r24, 0x01	; 1
    339c:	90 70       	andi	r25, 0x00	; 0
    339e:	88 23       	and	r24, r24
    33a0:	29 f0       	breq	.+10     	; 0x33ac <LCD_Send_Char+0x9e>
    33a2:	87 e0       	ldi	r24, 0x07	; 7
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <LCD_Send_Char+0xa6>
    33ac:	87 e0       	ldi	r24, 0x07	; 7
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    33b4:	0e 94 46 1b 	call	0x368c	; 0x368c <Trigger_Enable>
	(READ_BIT(_char,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	86 95       	lsr	r24
    33bc:	86 95       	lsr	r24
    33be:	86 95       	lsr	r24
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	81 70       	andi	r24, 0x01	; 1
    33c6:	90 70       	andi	r25, 0x00	; 0
    33c8:	88 23       	and	r24, r24
    33ca:	29 f0       	breq	.+10     	; 0x33d6 <LCD_Send_Char+0xc8>
    33cc:	84 e0       	ldi	r24, 0x04	; 4
    33ce:	61 e0       	ldi	r22, 0x01	; 1
    33d0:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    33d4:	04 c0       	rjmp	.+8      	; 0x33de <LCD_Send_Char+0xd0>
    33d6:	84 e0       	ldi	r24, 0x04	; 4
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	86 95       	lsr	r24
    33e2:	86 95       	lsr	r24
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	81 70       	andi	r24, 0x01	; 1
    33ea:	90 70       	andi	r25, 0x00	; 0
    33ec:	88 23       	and	r24, r24
    33ee:	29 f0       	breq	.+10     	; 0x33fa <LCD_Send_Char+0xec>
    33f0:	85 e0       	ldi	r24, 0x05	; 5
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    33f8:	04 c0       	rjmp	.+8      	; 0x3402 <LCD_Send_Char+0xf4>
    33fa:	85 e0       	ldi	r24, 0x05	; 5
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	86 95       	lsr	r24
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	81 70       	andi	r24, 0x01	; 1
    340c:	90 70       	andi	r25, 0x00	; 0
    340e:	88 23       	and	r24, r24
    3410:	29 f0       	breq	.+10     	; 0x341c <LCD_Send_Char+0x10e>
    3412:	86 e0       	ldi	r24, 0x06	; 6
    3414:	61 e0       	ldi	r22, 0x01	; 1
    3416:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <LCD_Send_Char+0x116>
    341c:	86 e0       	ldi	r24, 0x06	; 6
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	(READ_BIT(_char,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	81 70       	andi	r24, 0x01	; 1
    342c:	90 70       	andi	r25, 0x00	; 0
    342e:	88 23       	and	r24, r24
    3430:	29 f0       	breq	.+10     	; 0x343c <LCD_Send_Char+0x12e>
    3432:	87 e0       	ldi	r24, 0x07	; 7
    3434:	61 e0       	ldi	r22, 0x01	; 1
    3436:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <LCD_Send_Char+0x136>
    343c:	87 e0       	ldi	r24, 0x07	; 7
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    3444:	0e 94 46 1b 	call	0x368c	; 0x368c <Trigger_Enable>
}
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <LCD_Send_Char_Pos>:
void LCD_Send_Char_Pos(uint8 _char,uint8 row,uint8 column)
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <LCD_Send_Char_Pos+0x6>
    3456:	0f 92       	push	r0
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	6a 83       	std	Y+2, r22	; 0x02
    3460:	4b 83       	std	Y+3, r20	; 0x03
	Set_Cursor_Pos(row,column);
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	6b 81       	ldd	r22, Y+3	; 0x03
    3466:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <Set_Cursor_Pos>
	LCD_Send_Char(_char);
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_Send_Char>
}
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <LCD_Send_String>:
void LCD_Send_String(uint8 *string)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	00 d0       	rcall	.+0      	; 0x3482 <LCD_Send_String+0x6>
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	0b c0       	rjmp	.+22     	; 0x34a2 <LCD_Send_String+0x26>
	while(*string !='\0')
	{
		LCD_Send_Char(*string++);
    348c:	e9 81       	ldd	r30, Y+1	; 0x01
    348e:	fa 81       	ldd	r31, Y+2	; 0x02
    3490:	20 81       	ld	r18, Z
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	9a 83       	std	Y+2, r25	; 0x02
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	82 2f       	mov	r24, r18
    349e:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_Send_Char>
	Set_Cursor_Pos(row,column);
	LCD_Send_Char(_char);
}
void LCD_Send_String(uint8 *string)
{
	while(*string !='\0')
    34a2:	e9 81       	ldd	r30, Y+1	; 0x01
    34a4:	fa 81       	ldd	r31, Y+2	; 0x02
    34a6:	80 81       	ld	r24, Z
    34a8:	88 23       	and	r24, r24
    34aa:	81 f7       	brne	.-32     	; 0x348c <LCD_Send_String+0x10>
	{
		LCD_Send_Char(*string++);
	}
}
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(uint8 *string,uint8 row,uint8 column)
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <LCD_Send_String_Pos+0x6>
    34bc:	00 d0       	rcall	.+0      	; 0x34be <LCD_Send_String_Pos+0x8>
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	6b 83       	std	Y+3, r22	; 0x03
    34c8:	4c 83       	std	Y+4, r20	; 0x04
	Set_Cursor_Pos(row,column);
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	6c 81       	ldd	r22, Y+4	; 0x04
    34ce:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <Set_Cursor_Pos>
	LCD_Send_String(string);
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	0e 94 3e 1a 	call	0x347c	; 0x347c <LCD_Send_String>
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <LCD_Send_Number>:

void LCD_Send_Number(uint32 num)
{
    34e8:	0f 93       	push	r16
    34ea:	1f 93       	push	r17
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	60 97       	sbiw	r28, 0x10	; 16
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	6d 87       	std	Y+13, r22	; 0x0d
    3502:	7e 87       	std	Y+14, r23	; 0x0e
    3504:	8f 87       	std	Y+15, r24	; 0x0f
    3506:	98 8b       	std	Y+16, r25	; 0x10
	 uint8 arr[10],i=0,j=0;
    3508:	1a 82       	std	Y+2, r1	; 0x02
    350a:	19 82       	std	Y+1, r1	; 0x01
		   if(num == 0)
    350c:	8d 85       	ldd	r24, Y+13	; 0x0d
    350e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3510:	af 85       	ldd	r26, Y+15	; 0x0f
    3512:	b8 89       	ldd	r27, Y+16	; 0x10
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	a1 05       	cpc	r26, r1
    3518:	b1 05       	cpc	r27, r1
    351a:	91 f5       	brne	.+100    	; 0x3580 <LCD_Send_Number+0x98>
		   {
			   LCD_Send_Char('0');
    351c:	80 e3       	ldi	r24, 0x30	; 48
    351e:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_Send_Char>
    3522:	4d c0       	rjmp	.+154    	; 0x35be <LCD_Send_Number+0xd6>
		   }
		   else
		   {
			   while(num)
			   {
					arr[i]=num%10+'0';
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	08 2f       	mov	r16, r24
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	8d 85       	ldd	r24, Y+13	; 0x0d
    352c:	9e 85       	ldd	r25, Y+14	; 0x0e
    352e:	af 85       	ldd	r26, Y+15	; 0x0f
    3530:	b8 89       	ldd	r27, Y+16	; 0x10
    3532:	2a e0       	ldi	r18, 0x0A	; 10
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	28 2f       	mov	r18, r24
    3548:	20 5d       	subi	r18, 0xD0	; 208
    354a:	ce 01       	movw	r24, r28
    354c:	03 96       	adiw	r24, 0x03	; 3
    354e:	fc 01       	movw	r30, r24
    3550:	e0 0f       	add	r30, r16
    3552:	f1 1f       	adc	r31, r17
    3554:	20 83       	st	Z, r18
					num/=10;
    3556:	8d 85       	ldd	r24, Y+13	; 0x0d
    3558:	9e 85       	ldd	r25, Y+14	; 0x0e
    355a:	af 85       	ldd	r26, Y+15	; 0x0f
    355c:	b8 89       	ldd	r27, Y+16	; 0x10
    355e:	2a e0       	ldi	r18, 0x0A	; 10
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    356e:	da 01       	movw	r26, r20
    3570:	c9 01       	movw	r24, r18
    3572:	8d 87       	std	Y+13, r24	; 0x0d
    3574:	9e 87       	std	Y+14, r25	; 0x0e
    3576:	af 87       	std	Y+15, r26	; 0x0f
    3578:	b8 8b       	std	Y+16, r27	; 0x10
					i++;
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	8f 5f       	subi	r24, 0xFF	; 255
    357e:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   LCD_Send_Char('0');
		   }
		   else
		   {
			   while(num)
    3580:	8d 85       	ldd	r24, Y+13	; 0x0d
    3582:	9e 85       	ldd	r25, Y+14	; 0x0e
    3584:	af 85       	ldd	r26, Y+15	; 0x0f
    3586:	b8 89       	ldd	r27, Y+16	; 0x10
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	a1 05       	cpc	r26, r1
    358c:	b1 05       	cpc	r27, r1
    358e:	51 f6       	brne	.-108    	; 0x3524 <LCD_Send_Number+0x3c>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01
    3594:	11 c0       	rjmp	.+34     	; 0x35b8 <LCD_Send_Number+0xd0>
			   {
				   LCD_Send_Char(arr[j-1]);
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	88 2f       	mov	r24, r24
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9c 01       	movw	r18, r24
    359e:	21 50       	subi	r18, 0x01	; 1
    35a0:	30 40       	sbci	r19, 0x00	; 0
    35a2:	ce 01       	movw	r24, r28
    35a4:	03 96       	adiw	r24, 0x03	; 3
    35a6:	fc 01       	movw	r30, r24
    35a8:	e2 0f       	add	r30, r18
    35aa:	f3 1f       	adc	r31, r19
    35ac:	80 81       	ld	r24, Z
    35ae:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_Send_Char>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	81 50       	subi	r24, 0x01	; 1
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	88 23       	and	r24, r24
    35bc:	61 f7       	brne	.-40     	; 0x3596 <LCD_Send_Number+0xae>
			   {
				   LCD_Send_Char(arr[j-1]);
			   }
		   }
}
    35be:	60 96       	adiw	r28, 0x10	; 16
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	08 95       	ret

000035d4 <LCD_Send_Number_Pos>:
void LCD_Send_Number_Pos(uint32 num,uint8 row,uint8 column)
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	00 d0       	rcall	.+0      	; 0x35da <LCD_Send_Number_Pos+0x6>
    35da:	00 d0       	rcall	.+0      	; 0x35dc <LCD_Send_Number_Pos+0x8>
    35dc:	00 d0       	rcall	.+0      	; 0x35de <LCD_Send_Number_Pos+0xa>
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	69 83       	std	Y+1, r22	; 0x01
    35e4:	7a 83       	std	Y+2, r23	; 0x02
    35e6:	8b 83       	std	Y+3, r24	; 0x03
    35e8:	9c 83       	std	Y+4, r25	; 0x04
    35ea:	4d 83       	std	Y+5, r20	; 0x05
    35ec:	2e 83       	std	Y+6, r18	; 0x06
	Set_Cursor_Pos(row,column);
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	6e 81       	ldd	r22, Y+6	; 0x06
    35f2:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <Set_Cursor_Pos>
	LCD_Send_Number(num);
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	ab 81       	ldd	r26, Y+3	; 0x03
    35fc:	bc 81       	ldd	r27, Y+4	; 0x04
    35fe:	bc 01       	movw	r22, r24
    3600:	cd 01       	movw	r24, r26
    3602:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <LCD_Send_Number>
}
    3606:	26 96       	adiw	r28, 0x06	; 6
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <LCD_Send_Cust_char>:

void LCD_Send_Cust_char(const uint8 _char[],uint8 row,uint8 column,uint8 mem_pos){
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	00 d0       	rcall	.+0      	; 0x361e <LCD_Send_Cust_char+0x6>
    361e:	00 d0       	rcall	.+0      	; 0x3620 <LCD_Send_Cust_char+0x8>
    3620:	00 d0       	rcall	.+0      	; 0x3622 <LCD_Send_Cust_char+0xa>
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	9b 83       	std	Y+3, r25	; 0x03
    3628:	8a 83       	std	Y+2, r24	; 0x02
    362a:	6c 83       	std	Y+4, r22	; 0x04
    362c:	4d 83       	std	Y+5, r20	; 0x05
    362e:	2e 83       	std	Y+6, r18	; 0x06
	uint8 lcd_counter=0;
    3630:	19 82       	std	Y+1, r1	; 0x01
	LCD_Send_Command((_LCD_CGRAM_START + (mem_pos*8)));
    3632:	8e 81       	ldd	r24, Y+6	; 0x06
    3634:	88 2f       	mov	r24, r24
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	08 96       	adiw	r24, 0x08	; 8
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
    for(lcd_counter =0;lcd_counter <= 7;lcd_counter++){
    364a:	19 82       	std	Y+1, r1	; 0x01
    364c:	0e c0       	rjmp	.+28     	; 0x366a <LCD_Send_Cust_char+0x52>
    	LCD_Send_Char(_char[lcd_counter]);
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	28 2f       	mov	r18, r24
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	9b 81       	ldd	r25, Y+3	; 0x03
    3658:	fc 01       	movw	r30, r24
    365a:	e2 0f       	add	r30, r18
    365c:	f3 1f       	adc	r31, r19
    365e:	80 81       	ld	r24, Z
    3660:	0e 94 87 19 	call	0x330e	; 0x330e <LCD_Send_Char>
}

void LCD_Send_Cust_char(const uint8 _char[],uint8 row,uint8 column,uint8 mem_pos){
	uint8 lcd_counter=0;
	LCD_Send_Command((_LCD_CGRAM_START + (mem_pos*8)));
    for(lcd_counter =0;lcd_counter <= 7;lcd_counter++){
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	8f 5f       	subi	r24, 0xFF	; 255
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	88 30       	cpi	r24, 0x08	; 8
    366e:	78 f3       	brcs	.-34     	; 0x364e <LCD_Send_Cust_char+0x36>
    	LCD_Send_Char(_char[lcd_counter]);
    }
    LCD_Send_Char_Pos(mem_pos,row,column);
    3670:	8e 81       	ldd	r24, Y+6	; 0x06
    3672:	6c 81       	ldd	r22, Y+4	; 0x04
    3674:	4d 81       	ldd	r20, Y+5	; 0x05
    3676:	0e 94 28 1a 	call	0x3450	; 0x3450 <LCD_Send_Char_Pos>
}
    367a:	26 96       	adiw	r28, 0x06	; 6
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <Trigger_Enable>:
static void Trigger_Enable()
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	e0 97       	sbiw	r28, 0x30	; 48
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
	Dio_Write(EN,HIGH);
    36a0:	8b e0       	ldi	r24, 0x0B	; 11
    36a2:	61 e0       	ldi	r22, 0x01	; 1
    36a4:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e2       	ldi	r26, 0x20	; 32
    36ae:	b1 e4       	ldi	r27, 0x41	; 65
    36b0:	8d a7       	std	Y+45, r24	; 0x2d
    36b2:	9e a7       	std	Y+46, r25	; 0x2e
    36b4:	af a7       	std	Y+47, r26	; 0x2f
    36b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    36ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    36bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36be:	98 a9       	ldd	r25, Y+48	; 0x30
    36c0:	2b ea       	ldi	r18, 0xAB	; 171
    36c2:	3a ea       	ldi	r19, 0xAA	; 170
    36c4:	4a e2       	ldi	r20, 0x2A	; 42
    36c6:	50 e4       	ldi	r21, 0x40	; 64
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	89 a7       	std	Y+41, r24	; 0x29
    36d2:	9a a7       	std	Y+42, r25	; 0x2a
    36d4:	ab a7       	std	Y+43, r26	; 0x2b
    36d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    36d8:	69 a5       	ldd	r22, Y+41	; 0x29
    36da:	7a a5       	ldd	r23, Y+42	; 0x2a
    36dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36de:	9c a5       	ldd	r25, Y+44	; 0x2c
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	1c f4       	brge	.+6      	; 0x36f6 <Trigger_Enable+0x6a>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	88 a7       	std	Y+40, r24	; 0x28
    36f4:	91 c0       	rjmp	.+290    	; 0x3818 <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    36f6:	69 a5       	ldd	r22, Y+41	; 0x29
    36f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    36fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    36fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	4f e7       	ldi	r20, 0x7F	; 127
    3704:	53 e4       	ldi	r21, 0x43	; 67
    3706:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    370a:	18 16       	cp	r1, r24
    370c:	0c f0       	brlt	.+2      	; 0x3710 <Trigger_Enable+0x84>
    370e:	7b c0       	rjmp	.+246    	; 0x3806 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    3710:	6d a5       	ldd	r22, Y+45	; 0x2d
    3712:	7e a5       	ldd	r23, Y+46	; 0x2e
    3714:	8f a5       	ldd	r24, Y+47	; 0x2f
    3716:	98 a9       	ldd	r25, Y+48	; 0x30
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	4a e7       	ldi	r20, 0x7A	; 122
    371e:	54 e4       	ldi	r21, 0x44	; 68
    3720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8c a3       	std	Y+36, r24	; 0x24
    372a:	9d a3       	std	Y+37, r25	; 0x25
    372c:	ae a3       	std	Y+38, r26	; 0x26
    372e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3730:	6c a1       	ldd	r22, Y+36	; 0x24
    3732:	7d a1       	ldd	r23, Y+37	; 0x25
    3734:	8e a1       	ldd	r24, Y+38	; 0x26
    3736:	9f a1       	ldd	r25, Y+39	; 0x27
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a ef       	ldi	r20, 0xFA	; 250
    373e:	54 e4       	ldi	r21, 0x44	; 68
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	88 a3       	std	Y+32, r24	; 0x20
    374a:	99 a3       	std	Y+33, r25	; 0x21
    374c:	aa a3       	std	Y+34, r26	; 0x22
    374e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3750:	68 a1       	ldd	r22, Y+32	; 0x20
    3752:	79 a1       	ldd	r23, Y+33	; 0x21
    3754:	8a a1       	ldd	r24, Y+34	; 0x22
    3756:	9b a1       	ldd	r25, Y+35	; 0x23
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	2c f4       	brge	.+10     	; 0x3772 <Trigger_Enable+0xe6>
		__ticks = 1;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9f 8f       	std	Y+31, r25	; 0x1f
    376e:	8e 8f       	std	Y+30, r24	; 0x1e
    3770:	3f c0       	rjmp	.+126    	; 0x37f0 <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    3772:	68 a1       	ldd	r22, Y+32	; 0x20
    3774:	79 a1       	ldd	r23, Y+33	; 0x21
    3776:	8a a1       	ldd	r24, Y+34	; 0x22
    3778:	9b a1       	ldd	r25, Y+35	; 0x23
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	3f ef       	ldi	r19, 0xFF	; 255
    377e:	4f e7       	ldi	r20, 0x7F	; 127
    3780:	57 e4       	ldi	r21, 0x47	; 71
    3782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3786:	18 16       	cp	r1, r24
    3788:	4c f5       	brge	.+82     	; 0x37dc <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378a:	6c a1       	ldd	r22, Y+36	; 0x24
    378c:	7d a1       	ldd	r23, Y+37	; 0x25
    378e:	8e a1       	ldd	r24, Y+38	; 0x26
    3790:	9f a1       	ldd	r25, Y+39	; 0x27
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9f 8f       	std	Y+31, r25	; 0x1f
    37b0:	8e 8f       	std	Y+30, r24	; 0x1e
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <Trigger_Enable+0x146>
    37b4:	88 ec       	ldi	r24, 0xC8	; 200
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9d 8f       	std	Y+29, r25	; 0x1d
    37ba:	8c 8f       	std	Y+28, r24	; 0x1c
    37bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <Trigger_Enable+0x134>
    37c4:	9d 8f       	std	Y+29, r25	; 0x1d
    37c6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9f 8f       	std	Y+31, r25	; 0x1f
    37d0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <Trigger_Enable+0x128>
    37da:	24 c0       	rjmp	.+72     	; 0x3824 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	68 a1       	ldd	r22, Y+32	; 0x20
    37de:	79 a1       	ldd	r23, Y+33	; 0x21
    37e0:	8a a1       	ldd	r24, Y+34	; 0x22
    37e2:	9b a1       	ldd	r25, Y+35	; 0x23
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9f 8f       	std	Y+31, r25	; 0x1f
    37ee:	8e 8f       	std	Y+30, r24	; 0x1e
    37f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37f4:	9b 8f       	std	Y+27, r25	; 0x1b
    37f6:	8a 8f       	std	Y+26, r24	; 0x1a
    37f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <Trigger_Enable+0x170>
    3800:	9b 8f       	std	Y+27, r25	; 0x1b
    3802:	8a 8f       	std	Y+26, r24	; 0x1a
    3804:	0f c0       	rjmp	.+30     	; 0x3824 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3806:	69 a5       	ldd	r22, Y+41	; 0x29
    3808:	7a a5       	ldd	r23, Y+42	; 0x2a
    380a:	8b a5       	ldd	r24, Y+43	; 0x2b
    380c:	9c a5       	ldd	r25, Y+44	; 0x2c
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	88 a7       	std	Y+40, r24	; 0x28
    3818:	88 a5       	ldd	r24, Y+40	; 0x28
    381a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    381c:	89 8d       	ldd	r24, Y+25	; 0x19
    381e:	8a 95       	dec	r24
    3820:	f1 f7       	brne	.-4      	; 0x381e <Trigger_Enable+0x192>
    3822:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_Write(EN,LOW);
    3824:	8b e0       	ldi	r24, 0x0B	; 11
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	aa ef       	ldi	r26, 0xFA	; 250
    3832:	b4 e4       	ldi	r27, 0x44	; 68
    3834:	8d 8b       	std	Y+21, r24	; 0x15
    3836:	9e 8b       	std	Y+22, r25	; 0x16
    3838:	af 8b       	std	Y+23, r26	; 0x17
    383a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    383c:	6d 89       	ldd	r22, Y+21	; 0x15
    383e:	7e 89       	ldd	r23, Y+22	; 0x16
    3840:	8f 89       	ldd	r24, Y+23	; 0x17
    3842:	98 8d       	ldd	r25, Y+24	; 0x18
    3844:	2b ea       	ldi	r18, 0xAB	; 171
    3846:	3a ea       	ldi	r19, 0xAA	; 170
    3848:	4a e2       	ldi	r20, 0x2A	; 42
    384a:	50 e4       	ldi	r21, 0x40	; 64
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	89 8b       	std	Y+17, r24	; 0x11
    3856:	9a 8b       	std	Y+18, r25	; 0x12
    3858:	ab 8b       	std	Y+19, r26	; 0x13
    385a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    385c:	69 89       	ldd	r22, Y+17	; 0x11
    385e:	7a 89       	ldd	r23, Y+18	; 0x12
    3860:	8b 89       	ldd	r24, Y+19	; 0x13
    3862:	9c 89       	ldd	r25, Y+20	; 0x14
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e8       	ldi	r20, 0x80	; 128
    386a:	5f e3       	ldi	r21, 0x3F	; 63
    386c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3870:	88 23       	and	r24, r24
    3872:	1c f4       	brge	.+6      	; 0x387a <Trigger_Enable+0x1ee>
		__ticks = 1;
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	88 8b       	std	Y+16, r24	; 0x10
    3878:	91 c0       	rjmp	.+290    	; 0x399c <Trigger_Enable+0x310>
	else if (__tmp > 255)
    387a:	69 89       	ldd	r22, Y+17	; 0x11
    387c:	7a 89       	ldd	r23, Y+18	; 0x12
    387e:	8b 89       	ldd	r24, Y+19	; 0x13
    3880:	9c 89       	ldd	r25, Y+20	; 0x14
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	4f e7       	ldi	r20, 0x7F	; 127
    3888:	53 e4       	ldi	r21, 0x43	; 67
    388a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    388e:	18 16       	cp	r1, r24
    3890:	0c f0       	brlt	.+2      	; 0x3894 <Trigger_Enable+0x208>
    3892:	7b c0       	rjmp	.+246    	; 0x398a <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    3894:	6d 89       	ldd	r22, Y+21	; 0x15
    3896:	7e 89       	ldd	r23, Y+22	; 0x16
    3898:	8f 89       	ldd	r24, Y+23	; 0x17
    389a:	98 8d       	ldd	r25, Y+24	; 0x18
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4a e7       	ldi	r20, 0x7A	; 122
    38a2:	54 e4       	ldi	r21, 0x44	; 68
    38a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	8c 87       	std	Y+12, r24	; 0x0c
    38ae:	9d 87       	std	Y+13, r25	; 0x0d
    38b0:	ae 87       	std	Y+14, r26	; 0x0e
    38b2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    38b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    38b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	4a ef       	ldi	r20, 0xFA	; 250
    38c2:	54 e4       	ldi	r21, 0x44	; 68
    38c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	88 87       	std	Y+8, r24	; 0x08
    38ce:	99 87       	std	Y+9, r25	; 0x09
    38d0:	aa 87       	std	Y+10, r26	; 0x0a
    38d2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38d4:	68 85       	ldd	r22, Y+8	; 0x08
    38d6:	79 85       	ldd	r23, Y+9	; 0x09
    38d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38da:	9b 85       	ldd	r25, Y+11	; 0x0b
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e8       	ldi	r20, 0x80	; 128
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e8:	88 23       	and	r24, r24
    38ea:	2c f4       	brge	.+10     	; 0x38f6 <Trigger_Enable+0x26a>
		__ticks = 1;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	9f 83       	std	Y+7, r25	; 0x07
    38f2:	8e 83       	std	Y+6, r24	; 0x06
    38f4:	3f c0       	rjmp	.+126    	; 0x3974 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    38f6:	68 85       	ldd	r22, Y+8	; 0x08
    38f8:	79 85       	ldd	r23, Y+9	; 0x09
    38fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	3f ef       	ldi	r19, 0xFF	; 255
    3902:	4f e7       	ldi	r20, 0x7F	; 127
    3904:	57 e4       	ldi	r21, 0x47	; 71
    3906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    390a:	18 16       	cp	r1, r24
    390c:	4c f5       	brge	.+82     	; 0x3960 <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3910:	7d 85       	ldd	r23, Y+13	; 0x0d
    3912:	8e 85       	ldd	r24, Y+14	; 0x0e
    3914:	9f 85       	ldd	r25, Y+15	; 0x0f
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e2       	ldi	r20, 0x20	; 32
    391c:	51 e4       	ldi	r21, 0x41	; 65
    391e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	9f 83       	std	Y+7, r25	; 0x07
    3934:	8e 83       	std	Y+6, r24	; 0x06
    3936:	0f c0       	rjmp	.+30     	; 0x3956 <Trigger_Enable+0x2ca>
    3938:	88 ec       	ldi	r24, 0xC8	; 200
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	9d 83       	std	Y+5, r25	; 0x05
    393e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3940:	8c 81       	ldd	r24, Y+4	; 0x04
    3942:	9d 81       	ldd	r25, Y+5	; 0x05
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <Trigger_Enable+0x2b8>
    3948:	9d 83       	std	Y+5, r25	; 0x05
    394a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394c:	8e 81       	ldd	r24, Y+6	; 0x06
    394e:	9f 81       	ldd	r25, Y+7	; 0x07
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	9f 83       	std	Y+7, r25	; 0x07
    3954:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3956:	8e 81       	ldd	r24, Y+6	; 0x06
    3958:	9f 81       	ldd	r25, Y+7	; 0x07
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	69 f7       	brne	.-38     	; 0x3938 <Trigger_Enable+0x2ac>
    395e:	24 c0       	rjmp	.+72     	; 0x39a8 <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3960:	68 85       	ldd	r22, Y+8	; 0x08
    3962:	79 85       	ldd	r23, Y+9	; 0x09
    3964:	8a 85       	ldd	r24, Y+10	; 0x0a
    3966:	9b 85       	ldd	r25, Y+11	; 0x0b
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9f 83       	std	Y+7, r25	; 0x07
    3972:	8e 83       	std	Y+6, r24	; 0x06
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	9f 81       	ldd	r25, Y+7	; 0x07
    3978:	9b 83       	std	Y+3, r25	; 0x03
    397a:	8a 83       	std	Y+2, r24	; 0x02
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	9b 81       	ldd	r25, Y+3	; 0x03
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <Trigger_Enable+0x2f4>
    3984:	9b 83       	std	Y+3, r25	; 0x03
    3986:	8a 83       	std	Y+2, r24	; 0x02
    3988:	0f c0       	rjmp	.+30     	; 0x39a8 <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    398a:	69 89       	ldd	r22, Y+17	; 0x11
    398c:	7a 89       	ldd	r23, Y+18	; 0x12
    398e:	8b 89       	ldd	r24, Y+19	; 0x13
    3990:	9c 89       	ldd	r25, Y+20	; 0x14
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	88 8b       	std	Y+16, r24	; 0x10
    399c:	88 89       	ldd	r24, Y+16	; 0x10
    399e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	8a 95       	dec	r24
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <Trigger_Enable+0x316>
    39a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    39a8:	e0 96       	adiw	r28, 0x30	; 48
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <Set_Cursor_Pos>:
static void Set_Cursor_Pos(uint8 row,uint8 column)
{
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	00 d0       	rcall	.+0      	; 0x39c0 <Set_Cursor_Pos+0x6>
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <Set_Cursor_Pos+0x8>
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    39c6:	89 83       	std	Y+1, r24	; 0x01
    39c8:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	81 50       	subi	r24, 0x01	; 1
    39ce:	8a 83       	std	Y+2, r24	; 0x02
	switch(row)
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	28 2f       	mov	r18, r24
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	3c 83       	std	Y+4, r19	; 0x04
    39d8:	2b 83       	std	Y+3, r18	; 0x03
    39da:	8b 81       	ldd	r24, Y+3	; 0x03
    39dc:	9c 81       	ldd	r25, Y+4	; 0x04
    39de:	81 30       	cpi	r24, 0x01	; 1
    39e0:	91 05       	cpc	r25, r1
    39e2:	31 f0       	breq	.+12     	; 0x39f0 <Set_Cursor_Pos+0x36>
    39e4:	2b 81       	ldd	r18, Y+3	; 0x03
    39e6:	3c 81       	ldd	r19, Y+4	; 0x04
    39e8:	22 30       	cpi	r18, 0x02	; 2
    39ea:	31 05       	cpc	r19, r1
    39ec:	31 f0       	breq	.+12     	; 0x39fa <Set_Cursor_Pos+0x40>
    39ee:	09 c0       	rjmp	.+18     	; 0x3a02 <Set_Cursor_Pos+0x48>
			{
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	80 58       	subi	r24, 0x80	; 128
    39f4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <Set_Cursor_Pos+0x48>
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	80 54       	subi	r24, 0x40	; 64
    39fe:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_Send_Command>
	            default:;
	        }
}
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	08 95       	ret

00003a10 <KP_GetPressed>:
                                                                        {'4', '5', '6', '*'},
                                                                        {'1', '2', '3', '-'},
                                                                        {'&', '0', '=', '+'}
                                                                     };

uint8 KP_GetPressed(){
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <KP_GetPressed+0x6>
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <KP_GetPressed+0x8>
    3a18:	0f 92       	push	r0
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
	uint8 LRowConter=0;
    3a1e:	1d 82       	std	Y+5, r1	; 0x05
	uint8 RowConter=0;
    3a20:	1c 82       	std	Y+4, r1	; 0x04
	uint8 LColumnConter=0;
    3a22:	1b 82       	std	Y+3, r1	; 0x03
	Dio_state_t state=LOW;
    3a24:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Btn=0;
    3a26:	19 82       	std	Y+1, r1	; 0x01
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
    3a28:	1d 82       	std	Y+5, r1	; 0x05
    3a2a:	3a c0       	rjmp	.+116    	; 0x3aa0 <KP_GetPressed+0x90>
	{
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
    3a2c:	8c e0       	ldi	r24, 0x0C	; 12
    3a2e:	8c 83       	std	Y+4, r24	; 0x04
    3a30:	07 c0       	rjmp	.+14     	; 0x3a40 <KP_GetPressed+0x30>
			Dio_Write(RowConter, LOW);
    3a32:	8c 81       	ldd	r24, Y+4	; 0x04
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	uint8 LColumnConter=0;
	Dio_state_t state=LOW;
	uint8 Btn=0;
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
	{
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
    3a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3c:	8f 5f       	subi	r24, 0xFF	; 255
    3a3e:	8c 83       	std	Y+4, r24	; 0x04
    3a40:	8c 81       	ldd	r24, Y+4	; 0x04
    3a42:	80 31       	cpi	r24, 0x10	; 16
    3a44:	b0 f3       	brcs	.-20     	; 0x3a32 <KP_GetPressed+0x22>
			Dio_Write(RowConter, LOW);
		}
		Dio_Write(LRowConter + KEYPAD_ROW_1, HIGH);
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	84 5f       	subi	r24, 0xF4	; 244
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
		//_delay_ms(10);
		for(LColumnConter = KEYPAD_COLUMNS_1;LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS;LColumnConter++)
    3a50:	8b e1       	ldi	r24, 0x1B	; 27
    3a52:	8b 83       	std	Y+3, r24	; 0x03
    3a54:	1f c0       	rjmp	.+62     	; 0x3a94 <KP_GetPressed+0x84>
		{
			state = Dio_Read(LColumnConter);
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Dio_Read>
    3a5c:	8a 83       	std	Y+2, r24	; 0x02
			if(state == HIGH)
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	a9 f4       	brne	.+42     	; 0x3a8e <KP_GetPressed+0x7e>
			{
				Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	48 2f       	mov	r20, r24
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	88 2f       	mov	r24, r24
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	9c 01       	movw	r18, r24
    3a72:	2b 51       	subi	r18, 0x1B	; 27
    3a74:	30 40       	sbci	r19, 0x00	; 0
    3a76:	ca 01       	movw	r24, r20
    3a78:	88 0f       	add	r24, r24
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	82 0f       	add	r24, r18
    3a82:	93 1f       	adc	r25, r19
    3a84:	fc 01       	movw	r30, r24
    3a86:	ed 5c       	subi	r30, 0xCD	; 205
    3a88:	fd 4f       	sbci	r31, 0xFD	; 253
    3a8a:	80 81       	ld	r24, Z
    3a8c:	89 83       	std	Y+1, r24	; 0x01
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
			Dio_Write(RowConter, LOW);
		}
		Dio_Write(LRowConter + KEYPAD_ROW_1, HIGH);
		//_delay_ms(10);
		for(LColumnConter = KEYPAD_COLUMNS_1;LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS;LColumnConter++)
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	8f 5f       	subi	r24, 0xFF	; 255
    3a92:	8b 83       	std	Y+3, r24	; 0x03
    3a94:	8b 81       	ldd	r24, Y+3	; 0x03
    3a96:	8f 31       	cpi	r24, 0x1F	; 31
    3a98:	f0 f2       	brcs	.-68     	; 0x3a56 <KP_GetPressed+0x46>
	uint8 LRowConter=0;
	uint8 RowConter=0;
	uint8 LColumnConter=0;
	Dio_state_t state=LOW;
	uint8 Btn=0;
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	8f 5f       	subi	r24, 0xFF	; 255
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	84 30       	cpi	r24, 0x04	; 4
    3aa4:	18 f2       	brcs	.-122    	; 0x3a2c <KP_GetPressed+0x1c>
				Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
			}
		}
	}

	return Btn;
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01

}
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <IR_Sensor_Status>:
 *      Author: El-Wattaneya
 */

#include "IR_Sensor.h"
IR_Sensor_s IR_Sensor_Status(IR_Sensor_Pin _pin)
{
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <IR_Sensor_Status+0x6>
    3abe:	0f 92       	push	r0
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	8b 83       	std	Y+3, r24	; 0x03
	Dio_state_t Pin_State = Dio_Read(_pin);
    3ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <Dio_Read>
    3acc:	8a 83       	std	Y+2, r24	; 0x02
	IR_Sensor_s IR_Sensor_s = NON_BODY;
    3ace:	19 82       	std	Y+1, r1	; 0x01
	if(Pin_State == LOW)
    3ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad2:	88 23       	and	r24, r24
    3ad4:	19 f4       	brne	.+6      	; 0x3adc <IR_Sensor_Status+0x24>
	{
		IR_Sensor_s = BODY;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <IR_Sensor_Status+0x2c>
	}
	else if(Pin_State == HIGH)
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	81 30       	cpi	r24, 0x01	; 1
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <IR_Sensor_Status+0x2c>
	{
		IR_Sensor_s = NON_BODY;
    3ae2:	19 82       	std	Y+1, r1	; 0x01
	}
	return IR_Sensor_s;
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <Motor_Move_Right>:
 */

#include "DC_motor.h"

void Motor_Move_Right(Motor_t* _motor)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <Motor_Move_Right+0x6>
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	9a 83       	std	Y+2, r25	; 0x02
    3afe:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(_motor->in_1,HIGH);
    3b00:	e9 81       	ldd	r30, Y+1	; 0x01
    3b02:	fa 81       	ldd	r31, Y+2	; 0x02
    3b04:	80 81       	ld	r24, Z
    3b06:	61 e0       	ldi	r22, 0x01	; 1
    3b08:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(_motor->in_2,LOW);
    3b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b10:	81 81       	ldd	r24, Z+1	; 0x01
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>

}
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <Motor_Move_Left>:
void Motor_Move_Left(Motor_t* _motor)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <Motor_Move_Left+0x6>
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	9a 83       	std	Y+2, r25	; 0x02
    3b2e:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(_motor->in_1,LOW);
    3b30:	e9 81       	ldd	r30, Y+1	; 0x01
    3b32:	fa 81       	ldd	r31, Y+2	; 0x02
    3b34:	80 81       	ld	r24, Z
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(_motor->in_2,HIGH);
    3b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b40:	81 81       	ldd	r24, Z+1	; 0x01
    3b42:	61 e0       	ldi	r22, 0x01	; 1
    3b44:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
}
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	08 95       	ret

00003b52 <Motor_Stop>:
void Motor_Stop(Motor_t *_motor)
{
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <Motor_Stop+0x6>
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(_motor->in_1,LOW);
    3b60:	e9 81       	ldd	r30, Y+1	; 0x01
    3b62:	fa 81       	ldd	r31, Y+2	; 0x02
    3b64:	80 81       	ld	r24, Z
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
	Dio_Write(_motor->in_2,LOW);
    3b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b70:	81 81       	ldd	r24, Z+1	; 0x01
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	0e 94 93 12 	call	0x2526	; 0x2526 <Dio_Write>
}
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	cf 91       	pop	r28
    3b7e:	df 91       	pop	r29
    3b80:	08 95       	ret

00003b82 <main>:
Ultrasonic_t ultra ;
uint8 dis;
uint8 dis_right=0;
uint8 dis_left=0;
int main()
{
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	0f 92       	push	r0
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
	sei();
    3b8c:	78 94       	sei
	Dio_init();
    3b8e:	0e 94 11 11 	call	0x2222	; 0x2222 <Dio_init>
	Ultrasonic_init();
    3b92:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <Ultrasonic_init>
	UART_Init();
    3b96:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_Init>
	uint8 dataRecived;
	while (1)
	    {

		UART_SendString("\nChoose your mode\n");
    3b9a:	80 e6       	ldi	r24, 0x60	; 96
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 37 09 	call	0x126e	; 0x126e <UART_SendString>
		UART_SendString("\nFor RC Mode\n");
    3ba2:	83 e7       	ldi	r24, 0x73	; 115
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 37 09 	call	0x126e	; 0x126e <UART_SendString>
		UART_SendString("\nV For V2V Mode\n");
    3baa:	81 e8       	ldi	r24, 0x81	; 129
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	0e 94 37 09 	call	0x126e	; 0x126e <UART_SendString>

	    dataRecived = UART_ReceiveByte();
    3bb2:	0e 94 28 09 	call	0x1250	; 0x1250 <UART_ReceiveByte>
    3bb6:	89 83       	std	Y+1, r24	; 0x01

	    if('R' == dataRecived) RC_Car();
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	82 35       	cpi	r24, 0x52	; 82
    3bbc:	19 f4       	brne	.+6      	; 0x3bc4 <main+0x42>
    3bbe:	0e 94 e7 20 	call	0x41ce	; 0x41ce <RC_Car>
    3bc2:	eb cf       	rjmp	.-42     	; 0x3b9a <main+0x18>
	    else if('V' == dataRecived) Obstcale();
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	86 35       	cpi	r24, 0x56	; 86
    3bc8:	41 f7       	brne	.-48     	; 0x3b9a <main+0x18>
    3bca:	0e 94 16 21 	call	0x422c	; 0x422c <Obstcale>
    3bce:	e5 cf       	rjmp	.-54     	; 0x3b9a <main+0x18>

00003bd0 <Robot_Move_Forward>:
	    }

}

void Robot_Move_Forward()
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
	Motor_Move_Right(&motor1);
    3bd8:	87 ee       	ldi	r24, 0xE7	; 231
    3bda:	91 e0       	ldi	r25, 0x01	; 1
    3bdc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Motor_Move_Right>
	Motor_Move_Right(&motor2);
    3be0:	89 ee       	ldi	r24, 0xE9	; 233
    3be2:	91 e0       	ldi	r25, 0x01	; 1
    3be4:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Motor_Move_Right>
}
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	08 95       	ret

00003bee <Robot_Move_Backward>:

void Robot_Move_Backward()
{
    3bee:	df 93       	push	r29
    3bf0:	cf 93       	push	r28
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
	Motor_Move_Left(&motor1);
    3bf6:	87 ee       	ldi	r24, 0xE7	; 231
    3bf8:	91 e0       	ldi	r25, 0x01	; 1
    3bfa:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <Motor_Move_Left>
	Motor_Move_Left(&motor2);
    3bfe:	89 ee       	ldi	r24, 0xE9	; 233
    3c00:	91 e0       	ldi	r25, 0x01	; 1
    3c02:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <Motor_Move_Left>
}
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <Robot_Move_Right>:

void Robot_Move_Right()
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
	Motor_Move_Right(&motor1);
    3c14:	87 ee       	ldi	r24, 0xE7	; 231
    3c16:	91 e0       	ldi	r25, 0x01	; 1
    3c18:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Motor_Move_Right>
	Motor_Stop(&motor2);
    3c1c:	89 ee       	ldi	r24, 0xE9	; 233
    3c1e:	91 e0       	ldi	r25, 0x01	; 1
    3c20:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <Motor_Stop>
}
    3c24:	cf 91       	pop	r28
    3c26:	df 91       	pop	r29
    3c28:	08 95       	ret

00003c2a <Robot_Move_Left>:

void Robot_Move_Left()
{
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
	Motor_Stop(&motor1);
    3c32:	87 ee       	ldi	r24, 0xE7	; 231
    3c34:	91 e0       	ldi	r25, 0x01	; 1
    3c36:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <Motor_Stop>
	Motor_Move_Right(&motor2);
    3c3a:	89 ee       	ldi	r24, 0xE9	; 233
    3c3c:	91 e0       	ldi	r25, 0x01	; 1
    3c3e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <Motor_Move_Right>
}
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <Robot_turn_Right90>:

void Robot_turn_Right90()
{
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	2e 97       	sbiw	r28, 0x0e	; 14
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61

	Robot_Move_Right();
    3c5c:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <Robot_Move_Right>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e8       	ldi	r25, 0x80	; 128
    3c64:	ab eb       	ldi	r26, 0xBB	; 187
    3c66:	b4 e4       	ldi	r27, 0x44	; 68
    3c68:	8b 87       	std	Y+11, r24	; 0x0b
    3c6a:	9c 87       	std	Y+12, r25	; 0x0c
    3c6c:	ad 87       	std	Y+13, r26	; 0x0d
    3c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	4a ef       	ldi	r20, 0xFA	; 250
    3c7e:	54 e4       	ldi	r21, 0x44	; 68
    3c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	8f 83       	std	Y+7, r24	; 0x07
    3c8a:	98 87       	std	Y+8, r25	; 0x08
    3c8c:	a9 87       	std	Y+9, r26	; 0x09
    3c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c90:	6f 81       	ldd	r22, Y+7	; 0x07
    3c92:	78 85       	ldd	r23, Y+8	; 0x08
    3c94:	89 85       	ldd	r24, Y+9	; 0x09
    3c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e8       	ldi	r20, 0x80	; 128
    3c9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ca4:	88 23       	and	r24, r24
    3ca6:	2c f4       	brge	.+10     	; 0x3cb2 <Robot_turn_Right90+0x6a>
		__ticks = 1;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	9e 83       	std	Y+6, r25	; 0x06
    3cae:	8d 83       	std	Y+5, r24	; 0x05
    3cb0:	3f c0       	rjmp	.+126    	; 0x3d30 <Robot_turn_Right90+0xe8>
	else if (__tmp > 65535)
    3cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb4:	78 85       	ldd	r23, Y+8	; 0x08
    3cb6:	89 85       	ldd	r24, Y+9	; 0x09
    3cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	3f ef       	ldi	r19, 0xFF	; 255
    3cbe:	4f e7       	ldi	r20, 0x7F	; 127
    3cc0:	57 e4       	ldi	r21, 0x47	; 71
    3cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc6:	18 16       	cp	r1, r24
    3cc8:	4c f5       	brge	.+82     	; 0x3d1c <Robot_turn_Right90+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e2       	ldi	r20, 0x20	; 32
    3cd8:	51 e4       	ldi	r21, 0x41	; 65
    3cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	bc 01       	movw	r22, r24
    3ce4:	cd 01       	movw	r24, r26
    3ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
    3cf2:	0f c0       	rjmp	.+30     	; 0x3d12 <Robot_turn_Right90+0xca>
    3cf4:	88 ec       	ldi	r24, 0xC8	; 200
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	9c 83       	std	Y+4, r25	; 0x04
    3cfa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <Robot_turn_Right90+0xb8>
    3d04:	9c 83       	std	Y+4, r25	; 0x04
    3d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d08:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	9e 83       	std	Y+6, r25	; 0x06
    3d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	69 f7       	brne	.-38     	; 0x3cf4 <Robot_turn_Right90+0xac>
    3d1a:	14 c0       	rjmp	.+40     	; 0x3d44 <Robot_turn_Right90+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1e:	78 85       	ldd	r23, Y+8	; 0x08
    3d20:	89 85       	ldd	r24, Y+9	; 0x09
    3d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9e 83       	std	Y+6, r25	; 0x06
    3d2e:	8d 83       	std	Y+5, r24	; 0x05
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 83       	std	Y+1, r24	; 0x01
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	f1 f7       	brne	.-4      	; 0x3d3c <Robot_turn_Right90+0xf4>
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	Robot_Stop();
    3d44:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>

}
    3d48:	2e 96       	adiw	r28, 0x0e	; 14
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <Robot_turn_Left90>:

void Robot_turn_Left90()
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	2e 97       	sbiw	r28, 0x0e	; 14
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61

	Robot_Move_Left();
    3d6e:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <Robot_Move_Left>
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e8       	ldi	r25, 0x80	; 128
    3d76:	ab eb       	ldi	r26, 0xBB	; 187
    3d78:	b4 e4       	ldi	r27, 0x44	; 68
    3d7a:	8b 87       	std	Y+11, r24	; 0x0b
    3d7c:	9c 87       	std	Y+12, r25	; 0x0c
    3d7e:	ad 87       	std	Y+13, r26	; 0x0d
    3d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	4a ef       	ldi	r20, 0xFA	; 250
    3d90:	54 e4       	ldi	r21, 0x44	; 68
    3d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	8f 83       	std	Y+7, r24	; 0x07
    3d9c:	98 87       	std	Y+8, r25	; 0x08
    3d9e:	a9 87       	std	Y+9, r26	; 0x09
    3da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3da2:	6f 81       	ldd	r22, Y+7	; 0x07
    3da4:	78 85       	ldd	r23, Y+8	; 0x08
    3da6:	89 85       	ldd	r24, Y+9	; 0x09
    3da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e8       	ldi	r20, 0x80	; 128
    3db0:	5f e3       	ldi	r21, 0x3F	; 63
    3db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3db6:	88 23       	and	r24, r24
    3db8:	2c f4       	brge	.+10     	; 0x3dc4 <Robot_turn_Left90+0x6a>
		__ticks = 1;
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	3f c0       	rjmp	.+126    	; 0x3e42 <Robot_turn_Left90+0xe8>
	else if (__tmp > 65535)
    3dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc6:	78 85       	ldd	r23, Y+8	; 0x08
    3dc8:	89 85       	ldd	r24, Y+9	; 0x09
    3dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	3f ef       	ldi	r19, 0xFF	; 255
    3dd0:	4f e7       	ldi	r20, 0x7F	; 127
    3dd2:	57 e4       	ldi	r21, 0x47	; 71
    3dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dd8:	18 16       	cp	r1, r24
    3dda:	4c f5       	brge	.+82     	; 0x3e2e <Robot_turn_Left90+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e2       	ldi	r20, 0x20	; 32
    3dea:	51 e4       	ldi	r21, 0x41	; 65
    3dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	9e 83       	std	Y+6, r25	; 0x06
    3e02:	8d 83       	std	Y+5, r24	; 0x05
    3e04:	0f c0       	rjmp	.+30     	; 0x3e24 <Robot_turn_Left90+0xca>
    3e06:	88 ec       	ldi	r24, 0xC8	; 200
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	9c 83       	std	Y+4, r25	; 0x04
    3e0c:	8b 83       	std	Y+3, r24	; 0x03
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	9c 81       	ldd	r25, Y+4	; 0x04
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <Robot_turn_Left90+0xb8>
    3e16:	9c 83       	std	Y+4, r25	; 0x04
    3e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	9e 83       	std	Y+6, r25	; 0x06
    3e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e24:	8d 81       	ldd	r24, Y+5	; 0x05
    3e26:	9e 81       	ldd	r25, Y+6	; 0x06
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	69 f7       	brne	.-38     	; 0x3e06 <Robot_turn_Left90+0xac>
    3e2c:	14 c0       	rjmp	.+40     	; 0x3e56 <Robot_turn_Left90+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e30:	78 85       	ldd	r23, Y+8	; 0x08
    3e32:	89 85       	ldd	r24, Y+9	; 0x09
    3e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	9e 83       	std	Y+6, r25	; 0x06
    3e40:	8d 83       	std	Y+5, r24	; 0x05
    3e42:	8d 81       	ldd	r24, Y+5	; 0x05
    3e44:	9e 81       	ldd	r25, Y+6	; 0x06
    3e46:	9a 83       	std	Y+2, r25	; 0x02
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <Robot_turn_Left90+0xf4>
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	Robot_Stop();
    3e56:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>

}
    3e5a:	2e 96       	adiw	r28, 0x0e	; 14
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <Robot_Reverse>:

void Robot_Reverse()
{
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	2e 97       	sbiw	r28, 0x0e	; 14
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
	Robot_Speed(HIGH_SPEED);
    3e80:	8a e5       	ldi	r24, 0x5A	; 90
    3e82:	0e 94 d7 20 	call	0x41ae	; 0x41ae <Robot_Speed>
	Robot_Move_Right();
    3e86:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <Robot_Move_Right>
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	90 e8       	ldi	r25, 0x80	; 128
    3e8e:	ab e3       	ldi	r26, 0x3B	; 59
    3e90:	b5 e4       	ldi	r27, 0x45	; 69
    3e92:	8b 87       	std	Y+11, r24	; 0x0b
    3e94:	9c 87       	std	Y+12, r25	; 0x0c
    3e96:	ad 87       	std	Y+13, r26	; 0x0d
    3e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4a ef       	ldi	r20, 0xFA	; 250
    3ea8:	54 e4       	ldi	r21, 0x44	; 68
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	8f 83       	std	Y+7, r24	; 0x07
    3eb4:	98 87       	std	Y+8, r25	; 0x08
    3eb6:	a9 87       	std	Y+9, r26	; 0x09
    3eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eba:	6f 81       	ldd	r22, Y+7	; 0x07
    3ebc:	78 85       	ldd	r23, Y+8	; 0x08
    3ebe:	89 85       	ldd	r24, Y+9	; 0x09
    3ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e8       	ldi	r20, 0x80	; 128
    3ec8:	5f e3       	ldi	r21, 0x3F	; 63
    3eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ece:	88 23       	and	r24, r24
    3ed0:	2c f4       	brge	.+10     	; 0x3edc <Robot_Reverse+0x70>
		__ticks = 1;
    3ed2:	81 e0       	ldi	r24, 0x01	; 1
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
    3eda:	3f c0       	rjmp	.+126    	; 0x3f5a <Robot_Reverse+0xee>
	else if (__tmp > 65535)
    3edc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ede:	78 85       	ldd	r23, Y+8	; 0x08
    3ee0:	89 85       	ldd	r24, Y+9	; 0x09
    3ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	3f ef       	ldi	r19, 0xFF	; 255
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	57 e4       	ldi	r21, 0x47	; 71
    3eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef0:	18 16       	cp	r1, r24
    3ef2:	4c f5       	brge	.+82     	; 0x3f46 <Robot_Reverse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e2       	ldi	r20, 0x20	; 32
    3f02:	51 e4       	ldi	r21, 0x41	; 65
    3f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9e 83       	std	Y+6, r25	; 0x06
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	0f c0       	rjmp	.+30     	; 0x3f3c <Robot_Reverse+0xd0>
    3f1e:	88 ec       	ldi	r24, 0xC8	; 200
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	9c 83       	std	Y+4, r25	; 0x04
    3f24:	8b 83       	std	Y+3, r24	; 0x03
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <Robot_Reverse+0xbe>
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
    3f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	9e 83       	std	Y+6, r25	; 0x06
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	69 f7       	brne	.-38     	; 0x3f1e <Robot_Reverse+0xb2>
    3f44:	14 c0       	rjmp	.+40     	; 0x3f6e <Robot_Reverse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f46:	6f 81       	ldd	r22, Y+7	; 0x07
    3f48:	78 85       	ldd	r23, Y+8	; 0x08
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	9a 81       	ldd	r25, Y+2	; 0x02
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	f1 f7       	brne	.-4      	; 0x3f66 <Robot_Reverse+0xfa>
    3f6a:	9a 83       	std	Y+2, r25	; 0x02
    3f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    3f6e:	2e 96       	adiw	r28, 0x0e	; 14
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	cf 91       	pop	r28
    3f7c:	df 91       	pop	r29
    3f7e:	08 95       	ret

00003f80 <Robot_Move_Step>:

void Robot_Move_Step()
{
    3f80:	df 93       	push	r29
    3f82:	cf 93       	push	r28
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	2e 97       	sbiw	r28, 0x0e	; 14
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	f8 94       	cli
    3f8e:	de bf       	out	0x3e, r29	; 62
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	cd bf       	out	0x3d, r28	; 61
	Robot_Speed(HIGH_SPEED);
    3f94:	8a e5       	ldi	r24, 0x5A	; 90
    3f96:	0e 94 d7 20 	call	0x41ae	; 0x41ae <Robot_Speed>
	Robot_Move_Forward();
    3f9a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <Robot_Move_Forward>
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	a0 e2       	ldi	r26, 0x20	; 32
    3fa4:	b1 e4       	ldi	r27, 0x41	; 65
    3fa6:	8b 87       	std	Y+11, r24	; 0x0b
    3fa8:	9c 87       	std	Y+12, r25	; 0x0c
    3faa:	ad 87       	std	Y+13, r26	; 0x0d
    3fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	4a ef       	ldi	r20, 0xFA	; 250
    3fbc:	54 e4       	ldi	r21, 0x44	; 68
    3fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	8f 83       	std	Y+7, r24	; 0x07
    3fc8:	98 87       	std	Y+8, r25	; 0x08
    3fca:	a9 87       	std	Y+9, r26	; 0x09
    3fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fce:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd0:	78 85       	ldd	r23, Y+8	; 0x08
    3fd2:	89 85       	ldd	r24, Y+9	; 0x09
    3fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe2:	88 23       	and	r24, r24
    3fe4:	2c f4       	brge	.+10     	; 0x3ff0 <Robot_Move_Step+0x70>
		__ticks = 1;
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9e 83       	std	Y+6, r25	; 0x06
    3fec:	8d 83       	std	Y+5, r24	; 0x05
    3fee:	3f c0       	rjmp	.+126    	; 0x406e <Robot_Move_Step+0xee>
	else if (__tmp > 65535)
    3ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff2:	78 85       	ldd	r23, Y+8	; 0x08
    3ff4:	89 85       	ldd	r24, Y+9	; 0x09
    3ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	3f ef       	ldi	r19, 0xFF	; 255
    3ffc:	4f e7       	ldi	r20, 0x7F	; 127
    3ffe:	57 e4       	ldi	r21, 0x47	; 71
    4000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4004:	18 16       	cp	r1, r24
    4006:	4c f5       	brge	.+82     	; 0x405a <Robot_Move_Step+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4008:	6b 85       	ldd	r22, Y+11	; 0x0b
    400a:	7c 85       	ldd	r23, Y+12	; 0x0c
    400c:	8d 85       	ldd	r24, Y+13	; 0x0d
    400e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e2       	ldi	r20, 0x20	; 32
    4016:	51 e4       	ldi	r21, 0x41	; 65
    4018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9e 83       	std	Y+6, r25	; 0x06
    402e:	8d 83       	std	Y+5, r24	; 0x05
    4030:	0f c0       	rjmp	.+30     	; 0x4050 <Robot_Move_Step+0xd0>
    4032:	88 ec       	ldi	r24, 0xC8	; 200
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	9c 83       	std	Y+4, r25	; 0x04
    4038:	8b 83       	std	Y+3, r24	; 0x03
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	9c 81       	ldd	r25, Y+4	; 0x04
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <Robot_Move_Step+0xbe>
    4042:	9c 83       	std	Y+4, r25	; 0x04
    4044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4046:	8d 81       	ldd	r24, Y+5	; 0x05
    4048:	9e 81       	ldd	r25, Y+6	; 0x06
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	9e 83       	std	Y+6, r25	; 0x06
    404e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4050:	8d 81       	ldd	r24, Y+5	; 0x05
    4052:	9e 81       	ldd	r25, Y+6	; 0x06
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	69 f7       	brne	.-38     	; 0x4032 <Robot_Move_Step+0xb2>
    4058:	14 c0       	rjmp	.+40     	; 0x4082 <Robot_Move_Step+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405a:	6f 81       	ldd	r22, Y+7	; 0x07
    405c:	78 85       	ldd	r23, Y+8	; 0x08
    405e:	89 85       	ldd	r24, Y+9	; 0x09
    4060:	9a 85       	ldd	r25, Y+10	; 0x0a
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9e 83       	std	Y+6, r25	; 0x06
    406c:	8d 83       	std	Y+5, r24	; 0x05
    406e:	8d 81       	ldd	r24, Y+5	; 0x05
    4070:	9e 81       	ldd	r25, Y+6	; 0x06
    4072:	9a 83       	std	Y+2, r25	; 0x02
    4074:	89 83       	std	Y+1, r24	; 0x01
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	f1 f7       	brne	.-4      	; 0x407a <Robot_Move_Step+0xfa>
    407e:	9a 83       	std	Y+2, r25	; 0x02
    4080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    4082:	2e 96       	adiw	r28, 0x0e	; 14
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <Robot_Stop>:

void Robot_Stop()
{
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
    409c:	2e 97       	sbiw	r28, 0x0e	; 14
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
	Motor_Stop(&motor1);
    40a8:	87 ee       	ldi	r24, 0xE7	; 231
    40aa:	91 e0       	ldi	r25, 0x01	; 1
    40ac:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <Motor_Stop>
	Motor_Stop(&motor2);
    40b0:	89 ee       	ldi	r24, 0xE9	; 233
    40b2:	91 e0       	ldi	r25, 0x01	; 1
    40b4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <Motor_Stop>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	a6 e1       	ldi	r26, 0x16	; 22
    40be:	b4 e4       	ldi	r27, 0x44	; 68
    40c0:	8b 87       	std	Y+11, r24	; 0x0b
    40c2:	9c 87       	std	Y+12, r25	; 0x0c
    40c4:	ad 87       	std	Y+13, r26	; 0x0d
    40c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    40cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	4a ef       	ldi	r20, 0xFA	; 250
    40d6:	54 e4       	ldi	r21, 0x44	; 68
    40d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	8f 83       	std	Y+7, r24	; 0x07
    40e2:	98 87       	std	Y+8, r25	; 0x08
    40e4:	a9 87       	std	Y+9, r26	; 0x09
    40e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40e8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ea:	78 85       	ldd	r23, Y+8	; 0x08
    40ec:	89 85       	ldd	r24, Y+9	; 0x09
    40ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e8       	ldi	r20, 0x80	; 128
    40f6:	5f e3       	ldi	r21, 0x3F	; 63
    40f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fc:	88 23       	and	r24, r24
    40fe:	2c f4       	brge	.+10     	; 0x410a <Robot_Stop+0x76>
		__ticks = 1;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	9e 83       	std	Y+6, r25	; 0x06
    4106:	8d 83       	std	Y+5, r24	; 0x05
    4108:	3f c0       	rjmp	.+126    	; 0x4188 <Robot_Stop+0xf4>
	else if (__tmp > 65535)
    410a:	6f 81       	ldd	r22, Y+7	; 0x07
    410c:	78 85       	ldd	r23, Y+8	; 0x08
    410e:	89 85       	ldd	r24, Y+9	; 0x09
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	3f ef       	ldi	r19, 0xFF	; 255
    4116:	4f e7       	ldi	r20, 0x7F	; 127
    4118:	57 e4       	ldi	r21, 0x47	; 71
    411a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411e:	18 16       	cp	r1, r24
    4120:	4c f5       	brge	.+82     	; 0x4174 <Robot_Stop+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4122:	6b 85       	ldd	r22, Y+11	; 0x0b
    4124:	7c 85       	ldd	r23, Y+12	; 0x0c
    4126:	8d 85       	ldd	r24, Y+13	; 0x0d
    4128:	9e 85       	ldd	r25, Y+14	; 0x0e
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e2       	ldi	r20, 0x20	; 32
    4130:	51 e4       	ldi	r21, 0x41	; 65
    4132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	9e 83       	std	Y+6, r25	; 0x06
    4148:	8d 83       	std	Y+5, r24	; 0x05
    414a:	0f c0       	rjmp	.+30     	; 0x416a <Robot_Stop+0xd6>
    414c:	88 ec       	ldi	r24, 0xC8	; 200
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	9c 83       	std	Y+4, r25	; 0x04
    4152:	8b 83       	std	Y+3, r24	; 0x03
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	9c 81       	ldd	r25, Y+4	; 0x04
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <Robot_Stop+0xc4>
    415c:	9c 83       	std	Y+4, r25	; 0x04
    415e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	9e 81       	ldd	r25, Y+6	; 0x06
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	9e 83       	std	Y+6, r25	; 0x06
    4168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416a:	8d 81       	ldd	r24, Y+5	; 0x05
    416c:	9e 81       	ldd	r25, Y+6	; 0x06
    416e:	00 97       	sbiw	r24, 0x00	; 0
    4170:	69 f7       	brne	.-38     	; 0x414c <Robot_Stop+0xb8>
    4172:	14 c0       	rjmp	.+40     	; 0x419c <Robot_Stop+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4174:	6f 81       	ldd	r22, Y+7	; 0x07
    4176:	78 85       	ldd	r23, Y+8	; 0x08
    4178:	89 85       	ldd	r24, Y+9	; 0x09
    417a:	9a 85       	ldd	r25, Y+10	; 0x0a
    417c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	9e 83       	std	Y+6, r25	; 0x06
    4186:	8d 83       	std	Y+5, r24	; 0x05
    4188:	8d 81       	ldd	r24, Y+5	; 0x05
    418a:	9e 81       	ldd	r25, Y+6	; 0x06
    418c:	9a 83       	std	Y+2, r25	; 0x02
    418e:	89 83       	std	Y+1, r24	; 0x01
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	9a 81       	ldd	r25, Y+2	; 0x02
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	f1 f7       	brne	.-4      	; 0x4194 <Robot_Stop+0x100>
    4198:	9a 83       	std	Y+2, r25	; 0x02
    419a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
}
    419c:	2e 96       	adiw	r28, 0x0e	; 14
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret

000041ae <Robot_Speed>:

void Robot_Speed(Motor_Sped_t speed)
{
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	0f 92       	push	r0
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	89 83       	std	Y+1, r24	; 0x01
	PWM_SetDuty_Cycle_OCR1A(speed);
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWM_SetDuty_Cycle_OCR1A>
	PWM_SetDuty_Cycle_OCR1B(speed);
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	0e 94 df 0a 	call	0x15be	; 0x15be <PWM_SetDuty_Cycle_OCR1B>
}
    41c6:	0f 90       	pop	r0
    41c8:	cf 91       	pop	r28
    41ca:	df 91       	pop	r29
    41cc:	08 95       	ret

000041ce <RC_Car>:
void RC_Car()
{
    41ce:	df 93       	push	r29
    41d0:	cf 93       	push	r28
    41d2:	0f 92       	push	r0
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
	UART_SendString("RC Mode");
    41d8:	82 e9       	ldi	r24, 0x92	; 146
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0e 94 37 09 	call	0x126e	; 0x126e <UART_SendString>
	uint8 dataRecive=0;
    41e0:	19 82       	std	Y+1, r1	; 0x01

	  while(1)
	  {
		UART_Receive_NoBlock(&dataRecive);
    41e2:	ce 01       	movw	r24, r28
    41e4:	01 96       	adiw	r24, 0x01	; 1
    41e6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <UART_Receive_NoBlock>

	    if('f' == dataRecive) Robot_Move_Forward();
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	86 36       	cpi	r24, 0x66	; 102
    41ee:	19 f4       	brne	.+6      	; 0x41f6 <RC_Car+0x28>
    41f0:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <Robot_Move_Forward>
    41f4:	f6 cf       	rjmp	.-20     	; 0x41e2 <RC_Car+0x14>

	    else if('r' == dataRecive) Robot_Move_Right();
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	82 37       	cpi	r24, 0x72	; 114
    41fa:	19 f4       	brne	.+6      	; 0x4202 <RC_Car+0x34>
    41fc:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <Robot_Move_Right>
    4200:	f0 cf       	rjmp	.-32     	; 0x41e2 <RC_Car+0x14>
	    else if('l' == dataRecive) Robot_Move_Left();
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	8c 36       	cpi	r24, 0x6C	; 108
    4206:	19 f4       	brne	.+6      	; 0x420e <RC_Car+0x40>
    4208:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <Robot_Move_Left>
    420c:	ea cf       	rjmp	.-44     	; 0x41e2 <RC_Car+0x14>
	    else if('s' == dataRecive) Robot_Stop();
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	83 37       	cpi	r24, 0x73	; 115
    4212:	19 f4       	brne	.+6      	; 0x421a <RC_Car+0x4c>
    4214:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>
    4218:	e4 cf       	rjmp	.-56     	; 0x41e2 <RC_Car+0x14>
	    else if('t' == dataRecive) {Robot_Stop(); break;}
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	84 37       	cpi	r24, 0x74	; 116
    421e:	09 f7       	brne	.-62     	; 0x41e2 <RC_Car+0x14>
    4220:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>
	    else /* Nothing */;
	  }
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <Obstcale>:
}
void Obstcale()
{
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	df 93       	push	r29
    4232:	cf 93       	push	r28
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	c5 55       	subi	r28, 0x55	; 85
    423a:	d0 40       	sbci	r29, 0x00	; 0
    423c:	0f b6       	in	r0, 0x3f	; 63
    423e:	f8 94       	cli
    4240:	de bf       	out	0x3e, r29	; 62
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	cd bf       	out	0x3d, r28	; 61
	UART_SendString("V2V Mode");
    4246:	8a e9       	ldi	r24, 0x9A	; 154
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 37 09 	call	0x126e	; 0x126e <UART_SendString>
	uint8 dataRecive=0;
    424e:	fe 01       	movw	r30, r28
    4250:	eb 5a       	subi	r30, 0xAB	; 171
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	10 82       	st	Z, r1
	while(1){
		UART_Receive_NoBlock(&dataRecive);
    4256:	ce 01       	movw	r24, r28
    4258:	8b 5a       	subi	r24, 0xAB	; 171
    425a:	9f 4f       	sbci	r25, 0xFF	; 255
    425c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <UART_Receive_NoBlock>
    4260:	fe 01       	movw	r30, r28
    4262:	ef 5a       	subi	r30, 0xAF	; 175
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	a0 e2       	ldi	r26, 0x20	; 32
    426c:	b1 e4       	ldi	r27, 0x41	; 65
    426e:	80 83       	st	Z, r24
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	a2 83       	std	Z+2, r26	; 0x02
    4274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4276:	8e 01       	movw	r16, r28
    4278:	03 5b       	subi	r16, 0xB3	; 179
    427a:	1f 4f       	sbci	r17, 0xFF	; 255
    427c:	fe 01       	movw	r30, r28
    427e:	ef 5a       	subi	r30, 0xAF	; 175
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	60 81       	ld	r22, Z
    4284:	71 81       	ldd	r23, Z+1	; 0x01
    4286:	82 81       	ldd	r24, Z+2	; 0x02
    4288:	93 81       	ldd	r25, Z+3	; 0x03
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	4a ef       	ldi	r20, 0xFA	; 250
    4290:	54 e4       	ldi	r21, 0x44	; 68
    4292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	f8 01       	movw	r30, r16
    429c:	80 83       	st	Z, r24
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	a2 83       	std	Z+2, r26	; 0x02
    42a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42a4:	fe 01       	movw	r30, r28
    42a6:	e3 5b       	subi	r30, 0xB3	; 179
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	60 81       	ld	r22, Z
    42ac:	71 81       	ldd	r23, Z+1	; 0x01
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	93 81       	ldd	r25, Z+3	; 0x03
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e8       	ldi	r20, 0x80	; 128
    42b8:	5f e3       	ldi	r21, 0x3F	; 63
    42ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42be:	88 23       	and	r24, r24
    42c0:	44 f4       	brge	.+16     	; 0x42d2 <Obstcale+0xa6>
		__ticks = 1;
    42c2:	fe 01       	movw	r30, r28
    42c4:	e5 5b       	subi	r30, 0xB5	; 181
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	91 83       	std	Z+1, r25	; 0x01
    42ce:	80 83       	st	Z, r24
    42d0:	64 c0       	rjmp	.+200    	; 0x439a <Obstcale+0x16e>
	else if (__tmp > 65535)
    42d2:	fe 01       	movw	r30, r28
    42d4:	e3 5b       	subi	r30, 0xB3	; 179
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	60 81       	ld	r22, Z
    42da:	71 81       	ldd	r23, Z+1	; 0x01
    42dc:	82 81       	ldd	r24, Z+2	; 0x02
    42de:	93 81       	ldd	r25, Z+3	; 0x03
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	3f ef       	ldi	r19, 0xFF	; 255
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	57 e4       	ldi	r21, 0x47	; 71
    42e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	0c f0       	brlt	.+2      	; 0x42f2 <Obstcale+0xc6>
    42f0:	43 c0       	rjmp	.+134    	; 0x4378 <Obstcale+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f2:	fe 01       	movw	r30, r28
    42f4:	ef 5a       	subi	r30, 0xAF	; 175
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	60 81       	ld	r22, Z
    42fa:	71 81       	ldd	r23, Z+1	; 0x01
    42fc:	82 81       	ldd	r24, Z+2	; 0x02
    42fe:	93 81       	ldd	r25, Z+3	; 0x03
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	40 e2       	ldi	r20, 0x20	; 32
    4306:	51 e4       	ldi	r21, 0x41	; 65
    4308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8e 01       	movw	r16, r28
    4312:	05 5b       	subi	r16, 0xB5	; 181
    4314:	1f 4f       	sbci	r17, 0xFF	; 255
    4316:	bc 01       	movw	r22, r24
    4318:	cd 01       	movw	r24, r26
    431a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	f8 01       	movw	r30, r16
    4324:	91 83       	std	Z+1, r25	; 0x01
    4326:	80 83       	st	Z, r24
    4328:	1f c0       	rjmp	.+62     	; 0x4368 <Obstcale+0x13c>
    432a:	fe 01       	movw	r30, r28
    432c:	e7 5b       	subi	r30, 0xB7	; 183
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	88 ec       	ldi	r24, 0xC8	; 200
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	80 83       	st	Z, r24
    4338:	fe 01       	movw	r30, r28
    433a:	e7 5b       	subi	r30, 0xB7	; 183
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 81       	ld	r24, Z
    4340:	91 81       	ldd	r25, Z+1	; 0x01
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <Obstcale+0x116>
    4346:	fe 01       	movw	r30, r28
    4348:	e7 5b       	subi	r30, 0xB7	; 183
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4350:	de 01       	movw	r26, r28
    4352:	a5 5b       	subi	r26, 0xB5	; 181
    4354:	bf 4f       	sbci	r27, 0xFF	; 255
    4356:	fe 01       	movw	r30, r28
    4358:	e5 5b       	subi	r30, 0xB5	; 181
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	11 96       	adiw	r26, 0x01	; 1
    4364:	9c 93       	st	X, r25
    4366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4368:	fe 01       	movw	r30, r28
    436a:	e5 5b       	subi	r30, 0xB5	; 181
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	80 81       	ld	r24, Z
    4370:	91 81       	ldd	r25, Z+1	; 0x01
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	d1 f6       	brne	.-76     	; 0x432a <Obstcale+0xfe>
    4376:	27 c0       	rjmp	.+78     	; 0x43c6 <Obstcale+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4378:	8e 01       	movw	r16, r28
    437a:	05 5b       	subi	r16, 0xB5	; 181
    437c:	1f 4f       	sbci	r17, 0xFF	; 255
    437e:	fe 01       	movw	r30, r28
    4380:	e3 5b       	subi	r30, 0xB3	; 179
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	60 81       	ld	r22, Z
    4386:	71 81       	ldd	r23, Z+1	; 0x01
    4388:	82 81       	ldd	r24, Z+2	; 0x02
    438a:	93 81       	ldd	r25, Z+3	; 0x03
    438c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	f8 01       	movw	r30, r16
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	80 83       	st	Z, r24
    439a:	de 01       	movw	r26, r28
    439c:	a9 5b       	subi	r26, 0xB9	; 185
    439e:	bf 4f       	sbci	r27, 0xFF	; 255
    43a0:	fe 01       	movw	r30, r28
    43a2:	e5 5b       	subi	r30, 0xB5	; 181
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	8d 93       	st	X+, r24
    43ac:	9c 93       	st	X, r25
    43ae:	fe 01       	movw	r30, r28
    43b0:	e9 5b       	subi	r30, 0xB9	; 185
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	f1 f7       	brne	.-4      	; 0x43b8 <Obstcale+0x18c>
    43bc:	fe 01       	movw	r30, r28
    43be:	e9 5b       	subi	r30, 0xB9	; 185
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	91 83       	std	Z+1, r25	; 0x01
    43c4:	80 83       	st	Z, r24
		_delay_ms(10);
			dis=UltrasonicReadDistance(&ultra);
    43c6:	8f e6       	ldi	r24, 0x6F	; 111
    43c8:	92 e0       	ldi	r25, 0x02	; 2
    43ca:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UltrasonicReadDistance>
    43ce:	80 93 6e 02 	sts	0x026E, r24
    43d2:	fe 01       	movw	r30, r28
    43d4:	ed 5b       	subi	r30, 0xBD	; 189
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	a0 e2       	ldi	r26, 0x20	; 32
    43de:	b1 e4       	ldi	r27, 0x41	; 65
    43e0:	80 83       	st	Z, r24
    43e2:	91 83       	std	Z+1, r25	; 0x01
    43e4:	a2 83       	std	Z+2, r26	; 0x02
    43e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e8:	8e 01       	movw	r16, r28
    43ea:	01 5c       	subi	r16, 0xC1	; 193
    43ec:	1f 4f       	sbci	r17, 0xFF	; 255
    43ee:	fe 01       	movw	r30, r28
    43f0:	ed 5b       	subi	r30, 0xBD	; 189
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	4a ef       	ldi	r20, 0xFA	; 250
    4402:	54 e4       	ldi	r21, 0x44	; 68
    4404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	f8 01       	movw	r30, r16
    440e:	80 83       	st	Z, r24
    4410:	91 83       	std	Z+1, r25	; 0x01
    4412:	a2 83       	std	Z+2, r26	; 0x02
    4414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4416:	fe 01       	movw	r30, r28
    4418:	ff 96       	adiw	r30, 0x3f	; 63
    441a:	60 81       	ld	r22, Z
    441c:	71 81       	ldd	r23, Z+1	; 0x01
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	93 81       	ldd	r25, Z+3	; 0x03
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e8       	ldi	r20, 0x80	; 128
    4428:	5f e3       	ldi	r21, 0x3F	; 63
    442a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    442e:	88 23       	and	r24, r24
    4430:	2c f4       	brge	.+10     	; 0x443c <Obstcale+0x210>
		__ticks = 1;
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	9e af       	std	Y+62, r25	; 0x3e
    4438:	8d af       	std	Y+61, r24	; 0x3d
    443a:	46 c0       	rjmp	.+140    	; 0x44c8 <Obstcale+0x29c>
	else if (__tmp > 65535)
    443c:	fe 01       	movw	r30, r28
    443e:	ff 96       	adiw	r30, 0x3f	; 63
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	3f ef       	ldi	r19, 0xFF	; 255
    444c:	4f e7       	ldi	r20, 0x7F	; 127
    444e:	57 e4       	ldi	r21, 0x47	; 71
    4450:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4454:	18 16       	cp	r1, r24
    4456:	64 f5       	brge	.+88     	; 0x44b0 <Obstcale+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4458:	fe 01       	movw	r30, r28
    445a:	ed 5b       	subi	r30, 0xBD	; 189
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	60 81       	ld	r22, Z
    4460:	71 81       	ldd	r23, Z+1	; 0x01
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	40 e2       	ldi	r20, 0x20	; 32
    446c:	51 e4       	ldi	r21, 0x41	; 65
    446e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	bc 01       	movw	r22, r24
    4478:	cd 01       	movw	r24, r26
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	9e af       	std	Y+62, r25	; 0x3e
    4484:	8d af       	std	Y+61, r24	; 0x3d
    4486:	0f c0       	rjmp	.+30     	; 0x44a6 <Obstcale+0x27a>
    4488:	88 ec       	ldi	r24, 0xC8	; 200
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	9c af       	std	Y+60, r25	; 0x3c
    448e:	8b af       	std	Y+59, r24	; 0x3b
    4490:	8b ad       	ldd	r24, Y+59	; 0x3b
    4492:	9c ad       	ldd	r25, Y+60	; 0x3c
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	f1 f7       	brne	.-4      	; 0x4494 <Obstcale+0x268>
    4498:	9c af       	std	Y+60, r25	; 0x3c
    449a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449c:	8d ad       	ldd	r24, Y+61	; 0x3d
    449e:	9e ad       	ldd	r25, Y+62	; 0x3e
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	9e af       	std	Y+62, r25	; 0x3e
    44a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    44a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	69 f7       	brne	.-38     	; 0x4488 <Obstcale+0x25c>
    44ae:	16 c0       	rjmp	.+44     	; 0x44dc <Obstcale+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b0:	fe 01       	movw	r30, r28
    44b2:	ff 96       	adiw	r30, 0x3f	; 63
    44b4:	60 81       	ld	r22, Z
    44b6:	71 81       	ldd	r23, Z+1	; 0x01
    44b8:	82 81       	ldd	r24, Z+2	; 0x02
    44ba:	93 81       	ldd	r25, Z+3	; 0x03
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9e af       	std	Y+62, r25	; 0x3e
    44c6:	8d af       	std	Y+61, r24	; 0x3d
    44c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    44ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    44cc:	9a af       	std	Y+58, r25	; 0x3a
    44ce:	89 af       	std	Y+57, r24	; 0x39
    44d0:	89 ad       	ldd	r24, Y+57	; 0x39
    44d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <Obstcale+0x2a8>
    44d8:	9a af       	std	Y+58, r25	; 0x3a
    44da:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			if(dis > STOP_DISTANCE)
    44dc:	80 91 6e 02 	lds	r24, 0x026E
    44e0:	89 32       	cpi	r24, 0x29	; 41
    44e2:	30 f0       	brcs	.+12     	; 0x44f0 <Obstcale+0x2c4>
			{
				UART_SendByte('f');
    44e4:	86 e6       	ldi	r24, 0x66	; 102
    44e6:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
				Robot_Move_Forward();
    44ea:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <Robot_Move_Forward>
    44ee:	10 c2       	rjmp	.+1056   	; 0x4910 <Obstcale+0x6e4>
			}
			else if (dis<STOP_DISTANCE)
    44f0:	80 91 6e 02 	lds	r24, 0x026E
    44f4:	88 32       	cpi	r24, 0x28	; 40
    44f6:	08 f0       	brcs	.+2      	; 0x44fa <Obstcale+0x2ce>
    44f8:	0b c2       	rjmp	.+1046   	; 0x4910 <Obstcale+0x6e4>
			{
				Robot_Stop();
    44fa:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>
				UART_SendByte('s');
    44fe:	83 e7       	ldi	r24, 0x73	; 115
    4500:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
				Servo_angle(0);
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	0e 94 20 18 	call	0x3040	; 0x3040 <Servo_angle>
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	aa e7       	ldi	r26, 0x7A	; 122
    4510:	b4 e4       	ldi	r27, 0x44	; 68
    4512:	8d ab       	std	Y+53, r24	; 0x35
    4514:	9e ab       	std	Y+54, r25	; 0x36
    4516:	af ab       	std	Y+55, r26	; 0x37
    4518:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451a:	6d a9       	ldd	r22, Y+53	; 0x35
    451c:	7e a9       	ldd	r23, Y+54	; 0x36
    451e:	8f a9       	ldd	r24, Y+55	; 0x37
    4520:	98 ad       	ldd	r25, Y+56	; 0x38
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	4a ef       	ldi	r20, 0xFA	; 250
    4528:	54 e4       	ldi	r21, 0x44	; 68
    452a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	89 ab       	std	Y+49, r24	; 0x31
    4534:	9a ab       	std	Y+50, r25	; 0x32
    4536:	ab ab       	std	Y+51, r26	; 0x33
    4538:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    453a:	69 a9       	ldd	r22, Y+49	; 0x31
    453c:	7a a9       	ldd	r23, Y+50	; 0x32
    453e:	8b a9       	ldd	r24, Y+51	; 0x33
    4540:	9c a9       	ldd	r25, Y+52	; 0x34
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e8       	ldi	r20, 0x80	; 128
    4548:	5f e3       	ldi	r21, 0x3F	; 63
    454a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    454e:	88 23       	and	r24, r24
    4550:	2c f4       	brge	.+10     	; 0x455c <Obstcale+0x330>
		__ticks = 1;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	98 ab       	std	Y+48, r25	; 0x30
    4558:	8f a7       	std	Y+47, r24	; 0x2f
    455a:	3f c0       	rjmp	.+126    	; 0x45da <Obstcale+0x3ae>
	else if (__tmp > 65535)
    455c:	69 a9       	ldd	r22, Y+49	; 0x31
    455e:	7a a9       	ldd	r23, Y+50	; 0x32
    4560:	8b a9       	ldd	r24, Y+51	; 0x33
    4562:	9c a9       	ldd	r25, Y+52	; 0x34
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	3f ef       	ldi	r19, 0xFF	; 255
    4568:	4f e7       	ldi	r20, 0x7F	; 127
    456a:	57 e4       	ldi	r21, 0x47	; 71
    456c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4570:	18 16       	cp	r1, r24
    4572:	4c f5       	brge	.+82     	; 0x45c6 <Obstcale+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4574:	6d a9       	ldd	r22, Y+53	; 0x35
    4576:	7e a9       	ldd	r23, Y+54	; 0x36
    4578:	8f a9       	ldd	r24, Y+55	; 0x37
    457a:	98 ad       	ldd	r25, Y+56	; 0x38
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e2       	ldi	r20, 0x20	; 32
    4582:	51 e4       	ldi	r21, 0x41	; 65
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	bc 01       	movw	r22, r24
    458e:	cd 01       	movw	r24, r26
    4590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	98 ab       	std	Y+48, r25	; 0x30
    459a:	8f a7       	std	Y+47, r24	; 0x2f
    459c:	0f c0       	rjmp	.+30     	; 0x45bc <Obstcale+0x390>
    459e:	88 ec       	ldi	r24, 0xC8	; 200
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	9e a7       	std	Y+46, r25	; 0x2e
    45a4:	8d a7       	std	Y+45, r24	; 0x2d
    45a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    45a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <Obstcale+0x37e>
    45ae:	9e a7       	std	Y+46, r25	; 0x2e
    45b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    45b4:	98 a9       	ldd	r25, Y+48	; 0x30
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	98 ab       	std	Y+48, r25	; 0x30
    45ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    45be:	98 a9       	ldd	r25, Y+48	; 0x30
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	69 f7       	brne	.-38     	; 0x459e <Obstcale+0x372>
    45c4:	14 c0       	rjmp	.+40     	; 0x45ee <Obstcale+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c6:	69 a9       	ldd	r22, Y+49	; 0x31
    45c8:	7a a9       	ldd	r23, Y+50	; 0x32
    45ca:	8b a9       	ldd	r24, Y+51	; 0x33
    45cc:	9c a9       	ldd	r25, Y+52	; 0x34
    45ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	98 ab       	std	Y+48, r25	; 0x30
    45d8:	8f a7       	std	Y+47, r24	; 0x2f
    45da:	8f a5       	ldd	r24, Y+47	; 0x2f
    45dc:	98 a9       	ldd	r25, Y+48	; 0x30
    45de:	9c a7       	std	Y+44, r25	; 0x2c
    45e0:	8b a7       	std	Y+43, r24	; 0x2b
    45e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    45e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	f1 f7       	brne	.-4      	; 0x45e6 <Obstcale+0x3ba>
    45ea:	9c a7       	std	Y+44, r25	; 0x2c
    45ec:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				dis_right=UltrasonicReadDistance(&ultra);
    45ee:	8f e6       	ldi	r24, 0x6F	; 111
    45f0:	92 e0       	ldi	r25, 0x02	; 2
    45f2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UltrasonicReadDistance>
    45f6:	80 93 66 02 	sts	0x0266, r24
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	a6 e9       	ldi	r26, 0x96	; 150
    4600:	b3 e4       	ldi	r27, 0x43	; 67
    4602:	8f a3       	std	Y+39, r24	; 0x27
    4604:	98 a7       	std	Y+40, r25	; 0x28
    4606:	a9 a7       	std	Y+41, r26	; 0x29
    4608:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460a:	6f a1       	ldd	r22, Y+39	; 0x27
    460c:	78 a5       	ldd	r23, Y+40	; 0x28
    460e:	89 a5       	ldd	r24, Y+41	; 0x29
    4610:	9a a5       	ldd	r25, Y+42	; 0x2a
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	4a ef       	ldi	r20, 0xFA	; 250
    4618:	54 e4       	ldi	r21, 0x44	; 68
    461a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	8b a3       	std	Y+35, r24	; 0x23
    4624:	9c a3       	std	Y+36, r25	; 0x24
    4626:	ad a3       	std	Y+37, r26	; 0x25
    4628:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    462a:	6b a1       	ldd	r22, Y+35	; 0x23
    462c:	7c a1       	ldd	r23, Y+36	; 0x24
    462e:	8d a1       	ldd	r24, Y+37	; 0x25
    4630:	9e a1       	ldd	r25, Y+38	; 0x26
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e8       	ldi	r20, 0x80	; 128
    4638:	5f e3       	ldi	r21, 0x3F	; 63
    463a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    463e:	88 23       	and	r24, r24
    4640:	2c f4       	brge	.+10     	; 0x464c <Obstcale+0x420>
		__ticks = 1;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	9a a3       	std	Y+34, r25	; 0x22
    4648:	89 a3       	std	Y+33, r24	; 0x21
    464a:	3f c0       	rjmp	.+126    	; 0x46ca <Obstcale+0x49e>
	else if (__tmp > 65535)
    464c:	6b a1       	ldd	r22, Y+35	; 0x23
    464e:	7c a1       	ldd	r23, Y+36	; 0x24
    4650:	8d a1       	ldd	r24, Y+37	; 0x25
    4652:	9e a1       	ldd	r25, Y+38	; 0x26
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	3f ef       	ldi	r19, 0xFF	; 255
    4658:	4f e7       	ldi	r20, 0x7F	; 127
    465a:	57 e4       	ldi	r21, 0x47	; 71
    465c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4660:	18 16       	cp	r1, r24
    4662:	4c f5       	brge	.+82     	; 0x46b6 <Obstcale+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4664:	6f a1       	ldd	r22, Y+39	; 0x27
    4666:	78 a5       	ldd	r23, Y+40	; 0x28
    4668:	89 a5       	ldd	r24, Y+41	; 0x29
    466a:	9a a5       	ldd	r25, Y+42	; 0x2a
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	40 e2       	ldi	r20, 0x20	; 32
    4672:	51 e4       	ldi	r21, 0x41	; 65
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	9a a3       	std	Y+34, r25	; 0x22
    468a:	89 a3       	std	Y+33, r24	; 0x21
    468c:	0f c0       	rjmp	.+30     	; 0x46ac <Obstcale+0x480>
    468e:	88 ec       	ldi	r24, 0xC8	; 200
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	98 a3       	std	Y+32, r25	; 0x20
    4694:	8f 8f       	std	Y+31, r24	; 0x1f
    4696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4698:	98 a1       	ldd	r25, Y+32	; 0x20
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <Obstcale+0x46e>
    469e:	98 a3       	std	Y+32, r25	; 0x20
    46a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a2:	89 a1       	ldd	r24, Y+33	; 0x21
    46a4:	9a a1       	ldd	r25, Y+34	; 0x22
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	9a a3       	std	Y+34, r25	; 0x22
    46aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ac:	89 a1       	ldd	r24, Y+33	; 0x21
    46ae:	9a a1       	ldd	r25, Y+34	; 0x22
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	69 f7       	brne	.-38     	; 0x468e <Obstcale+0x462>
    46b4:	14 c0       	rjmp	.+40     	; 0x46de <Obstcale+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b6:	6b a1       	ldd	r22, Y+35	; 0x23
    46b8:	7c a1       	ldd	r23, Y+36	; 0x24
    46ba:	8d a1       	ldd	r24, Y+37	; 0x25
    46bc:	9e a1       	ldd	r25, Y+38	; 0x26
    46be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	9a a3       	std	Y+34, r25	; 0x22
    46c8:	89 a3       	std	Y+33, r24	; 0x21
    46ca:	89 a1       	ldd	r24, Y+33	; 0x21
    46cc:	9a a1       	ldd	r25, Y+34	; 0x22
    46ce:	9e 8f       	std	Y+30, r25	; 0x1e
    46d0:	8d 8f       	std	Y+29, r24	; 0x1d
    46d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <Obstcale+0x4aa>
    46da:	9e 8f       	std	Y+30, r25	; 0x1e
    46dc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(300);
				Servo_angle(180);
    46de:	84 eb       	ldi	r24, 0xB4	; 180
    46e0:	0e 94 20 18 	call	0x3040	; 0x3040 <Servo_angle>
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	aa e7       	ldi	r26, 0x7A	; 122
    46ea:	b4 e4       	ldi	r27, 0x44	; 68
    46ec:	89 8f       	std	Y+25, r24	; 0x19
    46ee:	9a 8f       	std	Y+26, r25	; 0x1a
    46f0:	ab 8f       	std	Y+27, r26	; 0x1b
    46f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46f4:	69 8d       	ldd	r22, Y+25	; 0x19
    46f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	4a ef       	ldi	r20, 0xFA	; 250
    4702:	54 e4       	ldi	r21, 0x44	; 68
    4704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	8d 8b       	std	Y+21, r24	; 0x15
    470e:	9e 8b       	std	Y+22, r25	; 0x16
    4710:	af 8b       	std	Y+23, r26	; 0x17
    4712:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4714:	6d 89       	ldd	r22, Y+21	; 0x15
    4716:	7e 89       	ldd	r23, Y+22	; 0x16
    4718:	8f 89       	ldd	r24, Y+23	; 0x17
    471a:	98 8d       	ldd	r25, Y+24	; 0x18
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	40 e8       	ldi	r20, 0x80	; 128
    4722:	5f e3       	ldi	r21, 0x3F	; 63
    4724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4728:	88 23       	and	r24, r24
    472a:	2c f4       	brge	.+10     	; 0x4736 <Obstcale+0x50a>
		__ticks = 1;
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	9c 8b       	std	Y+20, r25	; 0x14
    4732:	8b 8b       	std	Y+19, r24	; 0x13
    4734:	3f c0       	rjmp	.+126    	; 0x47b4 <Obstcale+0x588>
	else if (__tmp > 65535)
    4736:	6d 89       	ldd	r22, Y+21	; 0x15
    4738:	7e 89       	ldd	r23, Y+22	; 0x16
    473a:	8f 89       	ldd	r24, Y+23	; 0x17
    473c:	98 8d       	ldd	r25, Y+24	; 0x18
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	3f ef       	ldi	r19, 0xFF	; 255
    4742:	4f e7       	ldi	r20, 0x7F	; 127
    4744:	57 e4       	ldi	r21, 0x47	; 71
    4746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    474a:	18 16       	cp	r1, r24
    474c:	4c f5       	brge	.+82     	; 0x47a0 <Obstcale+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474e:	69 8d       	ldd	r22, Y+25	; 0x19
    4750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	40 e2       	ldi	r20, 0x20	; 32
    475c:	51 e4       	ldi	r21, 0x41	; 65
    475e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	bc 01       	movw	r22, r24
    4768:	cd 01       	movw	r24, r26
    476a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	9c 8b       	std	Y+20, r25	; 0x14
    4774:	8b 8b       	std	Y+19, r24	; 0x13
    4776:	0f c0       	rjmp	.+30     	; 0x4796 <Obstcale+0x56a>
    4778:	88 ec       	ldi	r24, 0xC8	; 200
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	9a 8b       	std	Y+18, r25	; 0x12
    477e:	89 8b       	std	Y+17, r24	; 0x11
    4780:	89 89       	ldd	r24, Y+17	; 0x11
    4782:	9a 89       	ldd	r25, Y+18	; 0x12
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	f1 f7       	brne	.-4      	; 0x4784 <Obstcale+0x558>
    4788:	9a 8b       	std	Y+18, r25	; 0x12
    478a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    478c:	8b 89       	ldd	r24, Y+19	; 0x13
    478e:	9c 89       	ldd	r25, Y+20	; 0x14
    4790:	01 97       	sbiw	r24, 0x01	; 1
    4792:	9c 8b       	std	Y+20, r25	; 0x14
    4794:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4796:	8b 89       	ldd	r24, Y+19	; 0x13
    4798:	9c 89       	ldd	r25, Y+20	; 0x14
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	69 f7       	brne	.-38     	; 0x4778 <Obstcale+0x54c>
    479e:	14 c0       	rjmp	.+40     	; 0x47c8 <Obstcale+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a0:	6d 89       	ldd	r22, Y+21	; 0x15
    47a2:	7e 89       	ldd	r23, Y+22	; 0x16
    47a4:	8f 89       	ldd	r24, Y+23	; 0x17
    47a6:	98 8d       	ldd	r25, Y+24	; 0x18
    47a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	9c 8b       	std	Y+20, r25	; 0x14
    47b2:	8b 8b       	std	Y+19, r24	; 0x13
    47b4:	8b 89       	ldd	r24, Y+19	; 0x13
    47b6:	9c 89       	ldd	r25, Y+20	; 0x14
    47b8:	98 8b       	std	Y+16, r25	; 0x10
    47ba:	8f 87       	std	Y+15, r24	; 0x0f
    47bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    47be:	98 89       	ldd	r25, Y+16	; 0x10
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <Obstcale+0x594>
    47c4:	98 8b       	std	Y+16, r25	; 0x10
    47c6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				dis_left=UltrasonicReadDistance(&ultra);
    47c8:	8f e6       	ldi	r24, 0x6F	; 111
    47ca:	92 e0       	ldi	r25, 0x02	; 2
    47cc:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <UltrasonicReadDistance>
    47d0:	80 93 67 02 	sts	0x0267, r24
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	a6 e9       	ldi	r26, 0x96	; 150
    47da:	b3 e4       	ldi	r27, 0x43	; 67
    47dc:	8b 87       	std	Y+11, r24	; 0x0b
    47de:	9c 87       	std	Y+12, r25	; 0x0c
    47e0:	ad 87       	std	Y+13, r26	; 0x0d
    47e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	4a ef       	ldi	r20, 0xFA	; 250
    47f2:	54 e4       	ldi	r21, 0x44	; 68
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	8f 83       	std	Y+7, r24	; 0x07
    47fe:	98 87       	std	Y+8, r25	; 0x08
    4800:	a9 87       	std	Y+9, r26	; 0x09
    4802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4804:	6f 81       	ldd	r22, Y+7	; 0x07
    4806:	78 85       	ldd	r23, Y+8	; 0x08
    4808:	89 85       	ldd	r24, Y+9	; 0x09
    480a:	9a 85       	ldd	r25, Y+10	; 0x0a
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	40 e8       	ldi	r20, 0x80	; 128
    4812:	5f e3       	ldi	r21, 0x3F	; 63
    4814:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4818:	88 23       	and	r24, r24
    481a:	2c f4       	brge	.+10     	; 0x4826 <Obstcale+0x5fa>
		__ticks = 1;
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9e 83       	std	Y+6, r25	; 0x06
    4822:	8d 83       	std	Y+5, r24	; 0x05
    4824:	3f c0       	rjmp	.+126    	; 0x48a4 <Obstcale+0x678>
	else if (__tmp > 65535)
    4826:	6f 81       	ldd	r22, Y+7	; 0x07
    4828:	78 85       	ldd	r23, Y+8	; 0x08
    482a:	89 85       	ldd	r24, Y+9	; 0x09
    482c:	9a 85       	ldd	r25, Y+10	; 0x0a
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	3f ef       	ldi	r19, 0xFF	; 255
    4832:	4f e7       	ldi	r20, 0x7F	; 127
    4834:	57 e4       	ldi	r21, 0x47	; 71
    4836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483a:	18 16       	cp	r1, r24
    483c:	4c f5       	brge	.+82     	; 0x4890 <Obstcale+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4840:	7c 85       	ldd	r23, Y+12	; 0x0c
    4842:	8d 85       	ldd	r24, Y+13	; 0x0d
    4844:	9e 85       	ldd	r25, Y+14	; 0x0e
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	40 e2       	ldi	r20, 0x20	; 32
    484c:	51 e4       	ldi	r21, 0x41	; 65
    484e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
    4866:	0f c0       	rjmp	.+30     	; 0x4886 <Obstcale+0x65a>
    4868:	88 ec       	ldi	r24, 0xC8	; 200
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9c 83       	std	Y+4, r25	; 0x04
    486e:	8b 83       	std	Y+3, r24	; 0x03
    4870:	8b 81       	ldd	r24, Y+3	; 0x03
    4872:	9c 81       	ldd	r25, Y+4	; 0x04
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	f1 f7       	brne	.-4      	; 0x4874 <Obstcale+0x648>
    4878:	9c 83       	std	Y+4, r25	; 0x04
    487a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487c:	8d 81       	ldd	r24, Y+5	; 0x05
    487e:	9e 81       	ldd	r25, Y+6	; 0x06
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	9e 83       	std	Y+6, r25	; 0x06
    4884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4886:	8d 81       	ldd	r24, Y+5	; 0x05
    4888:	9e 81       	ldd	r25, Y+6	; 0x06
    488a:	00 97       	sbiw	r24, 0x00	; 0
    488c:	69 f7       	brne	.-38     	; 0x4868 <Obstcale+0x63c>
    488e:	14 c0       	rjmp	.+40     	; 0x48b8 <Obstcale+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4890:	6f 81       	ldd	r22, Y+7	; 0x07
    4892:	78 85       	ldd	r23, Y+8	; 0x08
    4894:	89 85       	ldd	r24, Y+9	; 0x09
    4896:	9a 85       	ldd	r25, Y+10	; 0x0a
    4898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	9e 83       	std	Y+6, r25	; 0x06
    48a2:	8d 83       	std	Y+5, r24	; 0x05
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	9a 83       	std	Y+2, r25	; 0x02
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	9a 81       	ldd	r25, Y+2	; 0x02
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	f1 f7       	brne	.-4      	; 0x48b0 <Obstcale+0x684>
    48b4:	9a 83       	std	Y+2, r25	; 0x02
    48b6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(300);
				Servo_angle(90);
    48b8:	8a e5       	ldi	r24, 0x5A	; 90
    48ba:	0e 94 20 18 	call	0x3040	; 0x3040 <Servo_angle>
				if(dis_right>dis_left)
    48be:	90 91 66 02 	lds	r25, 0x0266
    48c2:	80 91 67 02 	lds	r24, 0x0267
    48c6:	89 17       	cp	r24, r25
    48c8:	78 f4       	brcc	.+30     	; 0x48e8 <Obstcale+0x6bc>
				{
					UART_SendByte('r');
    48ca:	82 e7       	ldi	r24, 0x72	; 114
    48cc:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('r');
    48d0:	82 e7       	ldi	r24, 0x72	; 114
    48d2:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('r');
    48d6:	82 e7       	ldi	r24, 0x72	; 114
    48d8:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('r');
    48dc:	82 e7       	ldi	r24, 0x72	; 114
    48de:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					Robot_turn_Right90();
    48e2:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <Robot_turn_Right90>
    48e6:	14 c0       	rjmp	.+40     	; 0x4910 <Obstcale+0x6e4>

				}
				else if(dis_right<dis_left)
    48e8:	90 91 66 02 	lds	r25, 0x0266
    48ec:	80 91 67 02 	lds	r24, 0x0267
    48f0:	98 17       	cp	r25, r24
    48f2:	70 f4       	brcc	.+28     	; 0x4910 <Obstcale+0x6e4>
				{
					UART_SendByte('l');
    48f4:	8c e6       	ldi	r24, 0x6C	; 108
    48f6:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('l');
    48fa:	8c e6       	ldi	r24, 0x6C	; 108
    48fc:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('l');
    4900:	8c e6       	ldi	r24, 0x6C	; 108
    4902:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					UART_SendByte('l');
    4906:	8c e6       	ldi	r24, 0x6C	; 108
    4908:	0e 94 0e 09 	call	0x121c	; 0x121c <UART_SendByte>
					Robot_turn_Left90();
    490c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <Robot_turn_Left90>
				}

			}
			if(dataRecive == 't'){Robot_Stop(); break;}
    4910:	fe 01       	movw	r30, r28
    4912:	eb 5a       	subi	r30, 0xAB	; 171
    4914:	ff 4f       	sbci	r31, 0xFF	; 255
    4916:	80 81       	ld	r24, Z
    4918:	84 37       	cpi	r24, 0x74	; 116
    491a:	09 f0       	breq	.+2      	; 0x491e <Obstcale+0x6f2>
    491c:	9c cc       	rjmp	.-1736   	; 0x4256 <Obstcale+0x2a>
    491e:	0e 94 4a 20 	call	0x4094	; 0x4094 <Robot_Stop>

		}
    4922:	cb 5a       	subi	r28, 0xAB	; 171
    4924:	df 4f       	sbci	r29, 0xFF	; 255
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	f8 94       	cli
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	cd bf       	out	0x3d, r28	; 61
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	08 95       	ret

0000493a <__mulsi3>:
    493a:	62 9f       	mul	r22, r18
    493c:	d0 01       	movw	r26, r0
    493e:	73 9f       	mul	r23, r19
    4940:	f0 01       	movw	r30, r0
    4942:	82 9f       	mul	r24, r18
    4944:	e0 0d       	add	r30, r0
    4946:	f1 1d       	adc	r31, r1
    4948:	64 9f       	mul	r22, r20
    494a:	e0 0d       	add	r30, r0
    494c:	f1 1d       	adc	r31, r1
    494e:	92 9f       	mul	r25, r18
    4950:	f0 0d       	add	r31, r0
    4952:	83 9f       	mul	r24, r19
    4954:	f0 0d       	add	r31, r0
    4956:	74 9f       	mul	r23, r20
    4958:	f0 0d       	add	r31, r0
    495a:	65 9f       	mul	r22, r21
    495c:	f0 0d       	add	r31, r0
    495e:	99 27       	eor	r25, r25
    4960:	72 9f       	mul	r23, r18
    4962:	b0 0d       	add	r27, r0
    4964:	e1 1d       	adc	r30, r1
    4966:	f9 1f       	adc	r31, r25
    4968:	63 9f       	mul	r22, r19
    496a:	b0 0d       	add	r27, r0
    496c:	e1 1d       	adc	r30, r1
    496e:	f9 1f       	adc	r31, r25
    4970:	bd 01       	movw	r22, r26
    4972:	cf 01       	movw	r24, r30
    4974:	11 24       	eor	r1, r1
    4976:	08 95       	ret

00004978 <__udivmodhi4>:
    4978:	aa 1b       	sub	r26, r26
    497a:	bb 1b       	sub	r27, r27
    497c:	51 e1       	ldi	r21, 0x11	; 17
    497e:	07 c0       	rjmp	.+14     	; 0x498e <__udivmodhi4_ep>

00004980 <__udivmodhi4_loop>:
    4980:	aa 1f       	adc	r26, r26
    4982:	bb 1f       	adc	r27, r27
    4984:	a6 17       	cp	r26, r22
    4986:	b7 07       	cpc	r27, r23
    4988:	10 f0       	brcs	.+4      	; 0x498e <__udivmodhi4_ep>
    498a:	a6 1b       	sub	r26, r22
    498c:	b7 0b       	sbc	r27, r23

0000498e <__udivmodhi4_ep>:
    498e:	88 1f       	adc	r24, r24
    4990:	99 1f       	adc	r25, r25
    4992:	5a 95       	dec	r21
    4994:	a9 f7       	brne	.-22     	; 0x4980 <__udivmodhi4_loop>
    4996:	80 95       	com	r24
    4998:	90 95       	com	r25
    499a:	bc 01       	movw	r22, r24
    499c:	cd 01       	movw	r24, r26
    499e:	08 95       	ret

000049a0 <__udivmodsi4>:
    49a0:	a1 e2       	ldi	r26, 0x21	; 33
    49a2:	1a 2e       	mov	r1, r26
    49a4:	aa 1b       	sub	r26, r26
    49a6:	bb 1b       	sub	r27, r27
    49a8:	fd 01       	movw	r30, r26
    49aa:	0d c0       	rjmp	.+26     	; 0x49c6 <__udivmodsi4_ep>

000049ac <__udivmodsi4_loop>:
    49ac:	aa 1f       	adc	r26, r26
    49ae:	bb 1f       	adc	r27, r27
    49b0:	ee 1f       	adc	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	a2 17       	cp	r26, r18
    49b6:	b3 07       	cpc	r27, r19
    49b8:	e4 07       	cpc	r30, r20
    49ba:	f5 07       	cpc	r31, r21
    49bc:	20 f0       	brcs	.+8      	; 0x49c6 <__udivmodsi4_ep>
    49be:	a2 1b       	sub	r26, r18
    49c0:	b3 0b       	sbc	r27, r19
    49c2:	e4 0b       	sbc	r30, r20
    49c4:	f5 0b       	sbc	r31, r21

000049c6 <__udivmodsi4_ep>:
    49c6:	66 1f       	adc	r22, r22
    49c8:	77 1f       	adc	r23, r23
    49ca:	88 1f       	adc	r24, r24
    49cc:	99 1f       	adc	r25, r25
    49ce:	1a 94       	dec	r1
    49d0:	69 f7       	brne	.-38     	; 0x49ac <__udivmodsi4_loop>
    49d2:	60 95       	com	r22
    49d4:	70 95       	com	r23
    49d6:	80 95       	com	r24
    49d8:	90 95       	com	r25
    49da:	9b 01       	movw	r18, r22
    49dc:	ac 01       	movw	r20, r24
    49de:	bd 01       	movw	r22, r26
    49e0:	cf 01       	movw	r24, r30
    49e2:	08 95       	ret

000049e4 <__prologue_saves__>:
    49e4:	2f 92       	push	r2
    49e6:	3f 92       	push	r3
    49e8:	4f 92       	push	r4
    49ea:	5f 92       	push	r5
    49ec:	6f 92       	push	r6
    49ee:	7f 92       	push	r7
    49f0:	8f 92       	push	r8
    49f2:	9f 92       	push	r9
    49f4:	af 92       	push	r10
    49f6:	bf 92       	push	r11
    49f8:	cf 92       	push	r12
    49fa:	df 92       	push	r13
    49fc:	ef 92       	push	r14
    49fe:	ff 92       	push	r15
    4a00:	0f 93       	push	r16
    4a02:	1f 93       	push	r17
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	ca 1b       	sub	r28, r26
    4a0e:	db 0b       	sbc	r29, r27
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	09 94       	ijmp

00004a1c <__epilogue_restores__>:
    4a1c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a1e:	39 88       	ldd	r3, Y+17	; 0x11
    4a20:	48 88       	ldd	r4, Y+16	; 0x10
    4a22:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a24:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a26:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a28:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a2e:	b9 84       	ldd	r11, Y+9	; 0x09
    4a30:	c8 84       	ldd	r12, Y+8	; 0x08
    4a32:	df 80       	ldd	r13, Y+7	; 0x07
    4a34:	ee 80       	ldd	r14, Y+6	; 0x06
    4a36:	fd 80       	ldd	r15, Y+5	; 0x05
    4a38:	0c 81       	ldd	r16, Y+4	; 0x04
    4a3a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a3c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a3e:	b9 81       	ldd	r27, Y+1	; 0x01
    4a40:	ce 0f       	add	r28, r30
    4a42:	d1 1d       	adc	r29, r1
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	ed 01       	movw	r28, r26
    4a50:	08 95       	ret

00004a52 <_exit>:
    4a52:	f8 94       	cli

00004a54 <__stop_program>:
    4a54:	ff cf       	rjmp	.-2      	; 0x4a54 <__stop_program>
